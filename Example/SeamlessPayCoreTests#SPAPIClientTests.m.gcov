        -:    0:Source:SeamlessPayCoreTests/SPAPIClientTests.m
        -:    0:Graph:/Users/sb/Library/Developer/Xcode/DerivedData/SeamlessPayCore-hhzsuewgtnajsudfmilhnmvjpivn/Build/Intermediates.noindex/SeamlessPayCore.build/Debug-iphonesimulator/SeamlessPayCoreTests.build/Objects-normal/x86_64/SPAPIClientTests.gcno
        -:    0:Data:/Users/sb/Library/Developer/Xcode/DerivedData/SeamlessPayCore-hhzsuewgtnajsudfmilhnmvjpivn/Build/Intermediates.noindex/SeamlessPayCore.build/Debug-iphonesimulator/SeamlessPayCoreTests.build/Objects-normal/x86_64/SPAPIClientTests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2://  SPAPIClientTests.m
        -:    3://  SeamlessPayCoreTests
        -:    4://
        -:    5://
        -:    6:
        -:    7:#import <XCTest/XCTest.h>
        -:    8:
        -:    9:#import "../../SeamlessPayCore/Classes/SPAPIClient.h"
        -:   10:
        -:   11:@interface SPAPIClientTests : XCTestCase
        -:   12:@end
        -:   13:
        -:   14:@implementation SPAPIClientTests
        -:   15:
        1:   16:- (void)setUp {
        -:   17:    // Put setup code here. This method is called before the invocation of each test method in the class.
        -:   18:    
        1:   19:    NSString *SECRET_API_KEY = [[NSProcessInfo processInfo] environment][@"SECRET_API_KEY"];
        1:   20:    NSString *PUBLIC_API_KEY = [[NSProcessInfo processInfo] environment][@"PUBLIC_API_KEY"];
        1:   21:    NSString *API_ENDPOINT = [[NSProcessInfo processInfo] environment][@"API_ENDPOINT"];
        1:   22:    NSString *PAN_VAULT_ENDPOINT = [[NSProcessInfo processInfo] environment][@"PAN_VAULT_ENDPOINT"];
        -:   23:        
        2:   24:    [[SPAPIClient getSharedInstance]
        1:   25:     setSecretKey:SECRET_API_KEY
        1:   26:     publishableKey:PUBLIC_API_KEY
        1:   27:     apiEndpoint:API_ENDPOINT
        1:   28:     panVaultEndpoint:PAN_VAULT_ENDPOINT];
        1:   29:}
        -:   30:
        1:   31:- (void)tearDown {
        -:   32:    // Put teardown code here. This method is called after the invocation of each test method in the class.
        1:   33:}
        -:   34:
        1:   35:- (void)testSharedInstance {
        1:   36:    XCTAssertTrue([SPAPIClient getSharedInstance] != nil);
        1:   37:}
        -:   38:
    #####:   39:- (void)testListCharges {
        -:   40:    
    #####:   41:    XCTestExpectation *documentExpectation = [self expectationWithDescription:@"testListCharges"];
        -:   42:    
    #####:   43:    [[SPAPIClient getSharedInstance]
    #####:   44:     listChargesWithParams:@{}
    #####:   45:     success:^(NSDictionary *dict) {
    #####:   46:        XCTAssert(YES);
    #####:   47:        [documentExpectation fulfill];
    #####:   48:    }
    #####:   49:     failure:^(SPError *error) {
    #####:   50:        NSString *errMessage = [error.localizedDescription componentsSeparatedByString:@"\n"][1];
    #####:   51:        XCTAssertTrue([errMessage isEqualToString:@"Message=Access denied using publishable API key authentication"]);
    #####:   52:        [documentExpectation fulfill];
    #####:   53:    }];
        -:   54:    
    #####:   55:    [self waitForExpectationsWithTimeout:10.0 handler:nil];
    #####:   56:}
        -:   57:
        -:   58:
    #####:   59:- (void)testCreateChargeWithToken {
        -:   60:    
    #####:   61:    XCTestExpectation *documentExpectation = [self expectationWithDescription:@"testCreateChargeWithToken"];
        -:   62:    
    #####:   63:    [[SPAPIClient getSharedInstance]
        -:   64:     createChargeWithToken:@"tok_visa"
        -:   65:     cvv:@"123"
        -:   66:     capture:YES
        -:   67:     currency:nil
        -:   68:     amount:@"1.0"
        -:   69:     taxAmount:nil
        -:   70:     taxExempt:NO
        -:   71:     tip:nil
        -:   72:     surchargeFeeAmount:nil
        -:   73:     description:@"test charge"
        -:   74:     order:nil
        -:   75:     orderId:nil
        -:   76:     poNumber:nil
        -:   77:     metadata:nil
        -:   78:     descriptor:nil
        -:   79:     entryType:nil
        -:   80:     idempotencyKey:nil
        -:   81:     digitalWalletProgramType:nil
    #####:   82:     success:^(SPCharge *charge) {
        -:   83:        
    #####:   84:        XCTAssertTrue([charge.status isEqualToString:@"CAPTURED"]);
    #####:   85:        XCTAssertTrue([charge.paymentNetwork isEqualToString:@"Visa"]);
    #####:   86:        XCTAssertTrue([charge.amount isEqualToString:@"1.00"]);
        -:   87:          
    #####:   88:        [documentExpectation fulfill];
    #####:   89:    }
    #####:   90:     failure:^(SPError *error) {
    #####:   91:        NSLog(@"%@", [error errorMessage]);
    #####:   92:        [documentExpectation fulfill];
    #####:   93:    }];
        -:   94:    
    #####:   95:    [self waitForExpectationsWithTimeout:15.0 handler:nil];
    #####:   96:}
        -:   97:
    #####:   98:- (void)testCreatePaymentMethodWithType {
        -:   99:    
    #####:  100:    XCTestExpectation *documentExpectation = [self expectationWithDescription:@"testCreatePaymentMethodWithType"];
        -:  101:    
    #####:  102:    SPAddress * billingAddress = [[SPAddress alloc]
        -:  103:                                  initWithline1:nil
        -:  104:                                  line2:nil
        -:  105:                                  city:nil
        -:  106:                                  country:@"US"
        -:  107:                                  state:nil
        -:  108:                                  postalCode:@"12345"];
        -:  109:    
    #####:  110:    SPCustomer * customer = [[SPCustomer alloc]
        -:  111:                             initWithName:@"Customer Name"
        -:  112:                             email:nil
        -:  113:                             phone:nil
        -:  114:                             companyName:nil
        -:  115:                             notes:nil
        -:  116:                             website:nil
        -:  117:                             metadata:nil
        -:  118:                             address:nil
        -:  119:                             paymentMethods:nil];
        -:  120:    
        -:  121:    
    #####:  122:    [[SPAPIClient getSharedInstance]
        -:  123:     createPaymentMethodWithPaymentType:@"credit_card"
        -:  124:     account:@"4485245870307367"
        -:  125:     expDate:@"12/30"
        -:  126:     cvv:@"123"
        -:  127:     accountType:nil
        -:  128:     routing:nil
        -:  129:     pin:nil
    #####:  130:     billingAddress:billingAddress
        -:  131:     billingCompanyName:nil
        -:  132:     accountEmail:nil
        -:  133:     phoneNumber:nil
        -:  134:     name:@"test token"
    #####:  135:     customer:customer
        -:  136:     
    #####:  137:     success:^(SPPaymentMethod *paymentMethod) {
        -:  138:        
    #####:  139:        XCTAssertTrue(paymentMethod.token != nil);
    #####:  140:        XCTAssertTrue([paymentMethod.paymentNetwork isEqualToString:@"Visa"]);
        -:  141:        
    #####:  142:        [documentExpectation fulfill];
    #####:  143:    }
    #####:  144:     failure:^(SPError *error) {
        -:  145:        
    #####:  146:        NSLog(@"%@", [error errorMessage]);
    #####:  147:        [documentExpectation fulfill];
    #####:  148:    }];
        -:  149:    
    #####:  150:    [self waitForExpectationsWithTimeout:10.0 handler:nil];
    #####:  151:}
        -:  152:
        -:  153:
        -:  154:
        -:  155://- (void)testPerformanceExample {
        -:  156://    // This is an example of a performance test case.
        -:  157://    [self measureBlock:^{
        -:  158://        // Put the code you want to measure the time of here.
        -:  159://    }];
        -:  160://}
        -:  161:
        -:  162:@end
