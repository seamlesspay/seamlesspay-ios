        -:    0:Source:SeamlessPayCoreTests/SPCardValidatorTest.m
        -:    0:Graph:/Users/sb/Library/Developer/Xcode/DerivedData/SeamlessPayCore-hhzsuewgtnajsudfmilhnmvjpivn/Build/Intermediates.noindex/SeamlessPayCore.build/Debug-iphonesimulator/SeamlessPayCoreTests.build/Objects-normal/x86_64/SPCardValidatorTest.gcno
        -:    0:Data:/Users/sb/Library/Developer/Xcode/DerivedData/SeamlessPayCore-hhzsuewgtnajsudfmilhnmvjpivn/Build/Intermediates.noindex/SeamlessPayCore.build/Debug-iphonesimulator/SeamlessPayCoreTests.build/Objects-normal/x86_64/SPCardValidatorTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2://  SPCardValidatorTest.m
        -:    3://  SeamlessPayCoreTests
        -:    4://
        -:    5:
        -:    6:#import <XCTest/XCTest.h>
        -:    7:
        -:    8:#import "../../SeamlessPayCore/Classes/SPCardValidator.h"
        -:    9:
        -:   10:@interface SPCardValidator (Testing)
        -:   11:
        -:   12:+ (SPCardValidationState)validationStateForExpirationYear:(NSString *)expirationYear
        -:   13:                                                   inMonth:(NSString *)expirationMonth
        -:   14:                                             inCurrentYear:(NSInteger)currentYear
        -:   15:                                              currentMonth:(NSInteger)currentMonth;
        -:   16:
        -:   17:+ (SPCardValidationState)validationStateForCard:(SPCardParams *)card
        -:   18:                                   inCurrentYear:(NSInteger)currentYear
        -:   19:                                    currentMonth:(NSInteger)currentMonth;
        -:   20:
        -:   21:@end
        -:   22:
        -:   23:
        -:   24:
        -:   25:@interface SPCardValidatorTest : XCTestCase
        -:   26:
        -:   27:@end
        -:   28:
        -:   29:@implementation SPCardValidatorTest
        -:   30:
        2:   31:+ (NSArray *)cardData {
       34:   32:    return @[
        2:   33:             @[@(SPCardBrandVisa), @"4242424242424242", @(SPCardValidationStateValid)],
        2:   34:             @[@(SPCardBrandVisa), @"4242424242422", @(SPCardValidationStateIncomplete)],
        2:   35:             @[@(SPCardBrandVisa), @"4012888888881881", @(SPCardValidationStateValid)],
        2:   36:             @[@(SPCardBrandVisa), @"4000056655665556", @(SPCardValidationStateValid)],
        2:   37:             @[@(SPCardBrandMasterCard), @"5555555555554444", @(SPCardValidationStateValid)],
        2:   38:             @[@(SPCardBrandMasterCard), @"5200828282828210", @(SPCardValidationStateValid)],
        2:   39:             @[@(SPCardBrandMasterCard), @"5105105105105100", @(SPCardValidationStateValid)],
        2:   40:             @[@(SPCardBrandMasterCard), @"2223000010089800", @(SPCardValidationStateValid)],
        2:   41:             @[@(SPCardBrandAmex), @"378282246310005", @(SPCardValidationStateValid)],
        2:   42:             @[@(SPCardBrandAmex), @"371449635398431", @(SPCardValidationStateValid)],
        2:   43:             @[@(SPCardBrandDiscover), @"6011111111111117", @(SPCardValidationStateValid)],
        2:   44:             @[@(SPCardBrandDiscover), @"6011000990139424", @(SPCardValidationStateValid)],
        2:   45:             @[@(SPCardBrandDinersClub), @"36227206271667", @(SPCardValidationStateValid)],
        2:   46:             @[@(SPCardBrandJCB), @"3530111333300000", @(SPCardValidationStateValid)],
        2:   47:             @[@(SPCardBrandJCB), @"3566002020360505", @(SPCardValidationStateValid)],
        2:   48:             @[@(SPCardBrandUnknown), @"1234567812345678", @(SPCardValidationStateInvalid)],
        -:   49:             ];
        -:   50:}
        -:   51:
        9:   52:- (void)setUp {
        -:   53:    // Put setup code here. This method is called before the invocation of each test method in the class.
        9:   54:}
        -:   55:
        9:   56:- (void)tearDown {
        -:   57:    // Put teardown code here. This method is called after the invocation of each test method in the class.
        9:   58:}
        -:   59:
        1:   60:- (void)testNumberSanitization {
        6:   61:    NSArray *tests = @[
        1:   62:                       @[@"4242424242424242", @"4242424242424242"],
        1:   63:                       @[@"XXXXXX", @""],
        1:   64:                       @[@"424242424242424X", @"424242424242424"],
        1:   65:                       @[@"X4242", @"4242"],
        1:   66:                       @[@"4242 4242 4242 4242", @"4242424242424242"]
        -:   67:                       ];
        5:   68:    for (NSArray *test in tests) {
        5:   69:        XCTAssertEqualObjects([SPCardValidator sanitizedNumericStringForString:test[0]], test[1]);
        5:   70:    }
        1:   71:}
        -:   72:
        1:   73:- (void)testNumberValidation {
        1:   74:    NSMutableArray *tests = [@[] mutableCopy];
        -:   75:    
        1:   76:    for (NSArray *card in [self.class cardData]) {
        1:   77:        [tests addObject:@[card[2], card[1]]];
        1:   78:    }
        -:   79:    
        1:   80:    [tests addObject:@[@(SPCardValidationStateValid), @"4242 4242 4242 4242"]];
        1:   81:    [tests addObject:@[@(SPCardValidationStateValid), @"4136000000008"]];
        -:   82:
        1:   83:    NSArray *badCardNumbers = @[
        -:   84:                                @"0000000000000000",
        -:   85:                                @"9999999999999995",
        -:   86:                                @"1",
        -:   87:                                @"1234123412341234",
        -:   88:                                @"xxx",
        -:   89:                                @"9999999999999999999999",
        -:   90:                                @"42424242424242424242",
        -:   91:                                @"4242-4242-4242-4242",
        -:   92:                                ];
        -:   93:    
        1:   94:    for (NSString *card in badCardNumbers) {
        1:   95:        [tests addObject:@[@(SPCardValidationStateInvalid), card]];
        1:   96:    }
        -:   97:    
        1:   98:    NSArray *possibleCardNumbers = @[
        -:   99:                                     @"4242",
        -:  100:                                     @"5",
        -:  101:                                     @"3",
        -:  102:                                     @"",
        -:  103:                                     @"    ",
        -:  104:                                     @"6011",
        -:  105:                                     @"4012888888881"
        -:  106:                                     ];
        -:  107:
        1:  108:    for (NSString *card in possibleCardNumbers) {
        1:  109:        [tests addObject:@[@(SPCardValidationStateIncomplete), card]];
        1:  110:    }
        -:  111:    
        1:  112:    for (NSArray *test in tests) {
        1:  113:        NSString *card = test[1];
        1:  114:        NSNumber *validationState = @([SPCardValidator validationStateForNumber:card validatingCardBrand:YES]);
        1:  115:        NSNumber *expected = test[0];
        1:  116:        if (![validationState isEqual:expected]) {
    #####:  117:            XCTFail(@"Expected %@, got %@ for number %@", expected, validationState, card);
    #####:  118:        }
        1:  119:    }
        -:  120:    
        1:  121:    XCTAssertEqual(SPCardValidationStateIncomplete, [SPCardValidator validationStateForNumber:@"1" validatingCardBrand:NO]);
        1:  122:    XCTAssertEqual(SPCardValidationStateValid, [SPCardValidator validationStateForNumber:@"0000000000000000" validatingCardBrand:NO]);
        1:  123:    XCTAssertEqual(SPCardValidationStateValid, [SPCardValidator validationStateForNumber:@"9999999999999995" validatingCardBrand:NO]);
        1:  124:    XCTAssertEqual(SPCardValidationStateIncomplete, [SPCardValidator validationStateForNumber:@"4242424242424" validatingCardBrand:YES]);
        1:  125:    XCTAssertEqual(SPCardValidationStateIncomplete, [SPCardValidator validationStateForNumber:nil validatingCardBrand:YES]);
        1:  126:}
        -:  127:
        1:  128:- (void)testBrand {
       16:  129:    for (NSArray *test in [self.class cardData]) {
       16:  130:        XCTAssertEqualObjects(@([SPCardValidator brandForNumber:test[1]]), test[0]);
       16:  131:    }
        1:  132:}
        -:  133:
        1:  134:- (void)testLengthsForCardBrand {
        9:  135:    NSArray *tests = @[
        1:  136:                       @[@(SPCardBrandVisa), @[@13, @16]],
        1:  137:                       @[@(SPCardBrandMasterCard), @[@16]],
        1:  138:                       @[@(SPCardBrandAmex), @[@15]],
        1:  139:                       @[@(SPCardBrandDiscover), @[@16]],
        1:  140:                       @[@(SPCardBrandDinersClub), @[@14]],
        1:  141:                       @[@(SPCardBrandJCB), @[@16]],
        1:  142:                       @[@(SPCardBrandUnionPay), @[@16]],
        1:  143:                       @[@(SPCardBrandUnknown), @[@16]],
        -:  144:                       ];
        8:  145:    for (NSArray *test in tests) {
        8:  146:        NSSet *lengths = [SPCardValidator lengthsForCardBrand:[test[0] integerValue]];
        8:  147:        NSSet *expected = [NSSet setWithArray:test[1]];
        8:  148:        if (![lengths isEqualToSet:expected]) {
    #####:  149:            XCTFail(@"Invalid lengths for brand %@: expected %@, got %@", test[0], expected, lengths);
    #####:  150:        }
        8:  151:    }
        1:  152:}
        -:  153:
        1:  154:- (void)testFragmentLength {
        9:  155:    NSArray *tests = @[
        1:  156:                       @[@(SPCardBrandVisa), @4],
        1:  157:                       @[@(SPCardBrandMasterCard), @4],
        1:  158:                       @[@(SPCardBrandAmex), @5],
        1:  159:                       @[@(SPCardBrandDiscover), @4],
        1:  160:                       @[@(SPCardBrandDinersClub), @4],
        1:  161:                       @[@(SPCardBrandJCB), @4],
        1:  162:                       @[@(SPCardBrandUnionPay), @4],
        1:  163:                       @[@(SPCardBrandUnknown), @4],
        -:  164:                       ];
        8:  165:    for (NSArray *test in tests) {
        8:  166:        XCTAssertEqualObjects(@([SPCardValidator fragmentLengthForCardBrand:[test[0] integerValue]]), test[1]);
        8:  167:    }
        1:  168:}
        -:  169:
        1:  170:- (void)testMonthValidation {
       14:  171:    NSArray *tests = @[
        1:  172:                       @[@"", @(SPCardValidationStateIncomplete)],
        1:  173:                       @[@"0", @(SPCardValidationStateIncomplete)],
        1:  174:                       @[@"1", @(SPCardValidationStateIncomplete)],
        1:  175:                       @[@"2", @(SPCardValidationStateValid)],
        1:  176:                       @[@"9", @(SPCardValidationStateValid)],
        1:  177:                       @[@"10", @(SPCardValidationStateValid)],
        1:  178:                       @[@"12", @(SPCardValidationStateValid)],
        1:  179:                       @[@"13", @(SPCardValidationStateInvalid)],
        1:  180:                       @[@"11a", @(SPCardValidationStateInvalid)],
        1:  181:                       @[@"x", @(SPCardValidationStateInvalid)],
        1:  182:                       @[@"100", @(SPCardValidationStateInvalid)],
        1:  183:                       @[@"00", @(SPCardValidationStateInvalid)],
        1:  184:                       @[@"13", @(SPCardValidationStateInvalid)],
        -:  185:                       ];
       13:  186:    for (NSArray *test in tests) {
       13:  187:        XCTAssertEqualObjects(@([SPCardValidator validationStateForExpirationMonth:test[0]]), test[1]);
       13:  188:    }
        1:  189:}
        -:  190:
        1:  191:- (void)testYearValidation {
       16:  192:    NSArray *tests = @[
        1:  193:                       @[@"12", @"15", @(SPCardValidationStateValid)],
        1:  194:                       @[@"8", @"15", @(SPCardValidationStateValid)],
        1:  195:                       @[@"9", @"15", @(SPCardValidationStateValid)],
        1:  196:                       @[@"11", @"16", @(SPCardValidationStateValid)],
        1:  197:                       @[@"11", @"99", @(SPCardValidationStateValid)],
        1:  198:                       @[@"01", @"99", @(SPCardValidationStateValid)],
        1:  199:                       @[@"1", @"99", @(SPCardValidationStateValid)],
        1:  200:                       @[@"00", @"99", @(SPCardValidationStateInvalid)],
        1:  201:                       @[@"12", @"14", @(SPCardValidationStateInvalid)],
        1:  202:                       @[@"7", @"15", @(SPCardValidationStateInvalid)],
        1:  203:                       @[@"12", @"00", @(SPCardValidationStateInvalid)],
        1:  204:                       @[@"13", @"16", @(SPCardValidationStateInvalid)],
        1:  205:                       @[@"12", @"2", @(SPCardValidationStateIncomplete)],
        1:  206:                       @[@"12", @"1", @(SPCardValidationStateIncomplete)],
        1:  207:                       @[@"12", @"0", @(SPCardValidationStateIncomplete)],
        -:  208:                       ];
        -:  209:    
       15:  210:    for (NSArray *test in tests) {
       15:  211:        SPCardValidationState state = [SPCardValidator validationStateForExpirationYear:test[1] inMonth:test[0] inCurrentYear:15 currentMonth:8];
       15:  212:        XCTAssertEqualObjects(@(state), test[2]);
       15:  213:    }
        1:  214:}
        -:  215:
        1:  216:- (void)testCVCLength {
        9:  217:    NSArray *tests = @[
        1:  218:                       @[@(SPCardBrandVisa), @3],
        1:  219:                       @[@(SPCardBrandMasterCard), @3],
        1:  220:                       @[@(SPCardBrandAmex), @4],
        1:  221:                       @[@(SPCardBrandDiscover), @3],
        1:  222:                       @[@(SPCardBrandDinersClub), @3],
        1:  223:                       @[@(SPCardBrandJCB), @3],
        1:  224:                       @[@(SPCardBrandUnionPay), @3],
        1:  225:                       @[@(SPCardBrandUnknown), @4],
        -:  226:                       ];
        8:  227:    for (NSArray *test in tests) {
        8:  228:        XCTAssertEqualObjects(@([SPCardValidator maxCVCLengthForCardBrand:[test[0] integerValue]]), test[1]);
        8:  229:    }
        1:  230:}
        -:  231:
        1:  232:- (void)testCardValidation {
       11:  233:    NSArray *tests = @[
        1:  234:                       @[@"4242424242424242", @(12), @(15), @"123", @(SPCardValidationStateValid)],
        1:  235:                       @[@"4242424242424242", @(12), @(15), @"x", @(SPCardValidationStateInvalid)],
        1:  236:                       @[@"4242424242424242", @(12), @(15), @"1", @(SPCardValidationStateIncomplete)],
        1:  237:                       @[@"4242424242424242", @(12), @(14), @"123", @(SPCardValidationStateInvalid)],
        1:  238:                       @[@"4242424242424242", @(21), @(15), @"123", @(SPCardValidationStateInvalid)],
        1:  239:                       @[@"42424242", @(12), @(15), @"123", @(SPCardValidationStateIncomplete)],
        1:  240:                       @[@"378282246310005", @(12), @(15), @"1234", @(SPCardValidationStateValid)],
        1:  241:                       @[@"378282246310005", @(12), @(15), @"123", @(SPCardValidationStateValid)],
        1:  242:                       @[@"378282246310005", @(12), @(15), @"12345", @(SPCardValidationStateInvalid)],
        1:  243:                       @[@"1234567812345678", @(12), @(15), @"12345", @(SPCardValidationStateInvalid)],
        -:  244:                       ];
       10:  245:    for (NSArray *test in tests) {
       10:  246:        SPCardParams *card = [[SPCardParams alloc] init];
       10:  247:        card.number = test[0];
       10:  248:        card.expMonth = [test[1] integerValue];
       10:  249:        card.expYear = [test[2] integerValue];
       10:  250:        card.cvc = test[3];
       10:  251:        SPCardValidationState state = [SPCardValidator validationStateForCard:card
        -:  252:                                        inCurrentYear:15 currentMonth:8];
       10:  253:        if (![@(state) isEqualToNumber:test[4]]) {
    #####:  254:            XCTFail(@"Wrong validation state for %@. Expected %@, got %@", card.number, test[4], @(state));
    #####:  255:        }
       10:  256:    }
        1:  257:}
        -:  258:
        -:  259:@end
