openapi: 3.1.0
info:
  version: v2020
  title: Main API
  description: >
    # Overview


    The Seamless Payments API is organized around REST, and responses are sent
    using JSON. Our API is designed to have predictable, resource-oriented URLs
    and to use HTTP response codes to indicate API errors. Use our API to
    integrate your website, software application, mobile app and more. This
    documentation is a work in progress.


    ### API Endpoints:


    - Sandbox: `https://sandbox.seamlesspay.com`


    - Production: `https://api.seamlesspay.com`


    ### PAN Vault Endpoints:


    - Sandbox: `https://sandbox-pan-vault.seamlesspay.com`


    - Production: `https://pan-vault.seamlesspay.com`


    # Authentication


    In order to authenticate your account, you must first generate an API Key.
    Once you've created an account, generating an API key is simple:


    1. Login to your Seamless Payments account Dashboard


    2. Select 'API Keys' in left side bar


    3. Click on 'Reveal Secret Key' button



    Your secret API key should never be shared publicly or accessible, such as
    committed code on GitHub, client-side code, etc.



    Authentication to the API is performed via [bearer
    tokens](https://tools.ietf.org/html/rfc6750). Provide your API key as the
    bearer token value in the Authorization header.



    For API endpoints, use your **secret** key (prefixed with ``sk``). For PAN
    Vault, use your **publishable** key (prefixed with ``pk``).


    For Sub Merchant accounts, use the master merchant API key and Sub Merchant
    Account ID in the header as a parameter ``SeamlessPay-Account:
    MRT_1234ABCD``.


    All API requests must be made using HTTPS. Calls made using plain HTTP will
    timeout. API requests without authentication will also timeout.



    ![alt text](/images/api-keys.png 'API Keys')


    # Idempotent Requests


    Network failures and integration logic can potentially result in the same
    API request being sent multiple times. The SeamlessPay API supports
    idempotent requests to prevent any requested operation from being
    inadvertently duplicated. To perform an idempotent request, assign a
    universally unique value to the idempotencyKey parameter in the request
    body. This is only necessary for API requests that create side effects (i.e.
    it's not necessary for API requests that just read data).


    Because the idempotencyKey is a unique external identifier associated with a
    specific transaction, it can also be used to reference a previous
    transaction when the system-generated transaction ID is not known. For
    example, a void can be requested using the idempotency key (instead of the
    transaction ID) of the original charge request.


    # Querying


    The Seamless Payments API support a common way for querying, sorting,
    limiting and selecting resources with REST `GET` method calls using URL
    query parameters and the following operators:


    ### Equality


    All fields that do not contain special query parameters are compared
    directly for equality.


    #### Example Request


    ````

    $ curl https://sandbox.seamlesspay.com/transactions?amount=10&currency=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Limit `$limit`


    `$limit` will return only the number of results you specify:



    #### Example Request


    ````

    $ curl https://sandbox.seamlesspay.com/transactions?currency=USD&$limit=2 -H
    'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Skip `$skip`


    `$skip` will skip the specified number of results:



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?$limit=2&$skip=2&currency=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Sort `$sort`


    `$sort` will sort based on the object you provide. It can contain a list of
    properties by which to sort mapped to the order ( `1` ascending, `-1`
    descending).



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?$limit=10&$sort[createdAt]=-1
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Select `$select`


    `$select` allows to pick which fields to include in the result. This will
    work for any service method.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?$select[]=accountNumber&$select[]=date&$select[]=_id
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### In, Not In `$in`, `$nin`


    Find all records where the property does ( `$in`) or does not ( `$nin`)
    match any of the given values.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?currency[$in]=CAD&currency[$in]=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Less Than Range `$lt`, `$lte`


    Find all records where the value is less ( `$lt`) or less and equal (
    `$lte`) to a given value.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?transactionDate[$lt]=1479664146607
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Greater Than Range `$gt`, `$gte`


    Find all records where the value is more ( `$gt`) or more and equal (
    `$gte`) to a given value.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?transactionDate[$gt]=1479664146607
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Inequality `$ne`


    Find all records that do not equal the given property value.



    #### Example Request


    ````

    $ curl https://sandbox.seamlesspay.com/transactions?processed[$ne]=true -H
    'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Or `$or`


    Find all records that match any of the given criteria.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/transactions?$or[0][status][$ne]=01&$or[1][currency]=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````


      ### Include `$include`

      Includes records from the related resource.


      #### Example Request

      ````
      $ curl https://sandbox.seamlesspay.com/batches/{batch_id}?$include=transactions -H 'Authorization: Bearer {SECRET_API_KEY}'
      ````


    # Test Cards


    ### Credit Cards


    |       Number       |            Token           |  Card Brand  
    |            Test Case            |

    |--------------------|----------------------------|---------------|---------------------------------|

    | `4242424242424242` | `tok_visa`                 | Visa          |
    Approval                        |

    | `5555555555554444` | `tok_mastercard`           | Mastercard    |
    Approval                        |

    | `378282246310005`  | `tok_amex`                 | Amex          |
    Approval                        |

    | `6011361000000000` | `tok_discover`             | Discover      |
    Approval                        |

    | `30569309025904`   | `tok_diners`               | Diners Club   |
    Approval                        |

    | `3566002020360505` | `tok_jcb`                  | JCB           |
    Approval                        |

    | `6200000000000005` | `tok_unionpay`             | Union Pay     |
    Approval                        |

    | `5105105105105100` | `tok_mastercard_prepaid`   | Mastercard    | Approval
    (Prepaid)              |

    | `4024007132771824` | `tok_successful_avs`       | Visa          | Approval
    (Successful AVS)       |

    | `4485245870307367` | `tok_successful_cvc`       | Visa          | Approval
    (Successful CVC)       |

    | `4716407216838809` | `tok_incorrect_street`     | Visa          | Decline
    (Incorrect Street)      |

    | `4539797450485720` | `tok_incorrect_zip`        | Visa          | Decline
    (Incorrect Postal Code) |

    | `4716280826204823` | `tok_incorrect_avs`        | Visa          | Decline
    (Incorrect AVS)         |

    | `4539690071186258` | `tok_incorrect_cvc`        | Visa          | Decline
    (Incorrect CVC)         |

    | `6011111111111117` | `tok_incorrect_cardnumber` | Discover      | Decline
    (Incorrect Card Number) |


    ### Gift Cards


    |       Number       |      Token      |  Test Case  |

    |--------------------|-----------------|-------------|

    | `1238990000000018` | `tok_gift_card` | Approval    |


    # Transaction Statuses
      
    ### AUTHORIZED


    statusCode                    | statusDescription   | paymentType

    -------------------------------|---------------------|-------------

    `approved` | Transaction approved |
    `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`

    `authorized_token_updated` | Token data was updated |
    `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`

    `new_account_information_avail` | Updated bank routing and/or account
    information | `ach`


    ### CAPTURED

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `captured` | Transaction capture success | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `captured_token_updated` | Token data was updated | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`

    ### DECLINED

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `account_activated` | Account is already activated | `gift_card`
     `account_already_issued` | Account is already in use | `gift_card`
     `account_compromised` | Card reported compromised, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `account_not_issued` | Account hasn't been activated | `gift_card`
     `call_for_authorization` | Contact issuer for authorization | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `contact_issuer` | Cardholder should contact issuer for support | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `declined_account_update` | Issuer provided updated account number, new token provided | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `declined_token_updated` | Token was declined | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `do_not_honor` | Card has been declined for unknown reason | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `duplicate_transaction` | Duplicate transaction detected | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `expired_card` | Card is expired | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `declined_charge_fee` | Transaction Decline (invalid fee) | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`
     `generic_decline` | Generic decline, customer should contact issuer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `inactive_account` | Customer should contact their issuer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_account_number` | Incorrect account number | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_amount` | Incorrect amount | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `incorrect_authorization` | Authorization data incorrect | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `incorrect_avs` | Address verification failed by card issuer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_currency` | The currency provided was incorrect | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_cvc` | The CVC/CVV information provided was incorrect | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_expiration` | The expiration provided was incorrect | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_parameters` | Data provided is incorrect, update transaction information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `incorrect_pin` | The PIN number provided was incorrect | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_routing_number` | Routing number is incorrect | `ach`
     `incorrect_street` | Street address failed card issuer verification | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `incorrect_zip` | Zip code failed card issuer verification | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `insufficient_funds` | Insufficient funds | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `issuer_not_available` | Issuer system is unavailable, please try again | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `limit_exceeded` | Merchant threshold exceeded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `lost_card` | Card reported lost, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `merchant_block` | Card number blocked by merchant | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `payment_type_not_supported` | Merchant doesn't support payment type | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `payment_velocity_exceeded` | Too many attempts, please wait and retry later | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `pin_required` | Transaction requires PIN entry | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `pin_try_exceeded` | Too many PIN attempts, please wait and retry | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `refund_not_supported` | Transaction does not support refunds | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `restricted_payment` | Account restrictions in place, please contact issuer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `revocation_of_authorization` | Your card was declined | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `risk_acquirer_detected` | Acquirer has detected fraud, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `risk_fraudulent` | Seamless has flagged this transaction as fraudulent, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `risk_issuer_detected` | Issuer has detected fraud, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `risk_processor_detected` | Seamless risk issue detected, contact support, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `risk_review` | Merchants risk thresholds exceeded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `risk_score_exceeded` | Risk score exceeded thresholds, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `risk_table` | Prior transaction created risk issue | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `stolen_card` | Card reported stolen, return generic decline to customer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `test_mode_decline` | Test card used in live mode | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `transaction_not_allowed` | Transaction type is not allowed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `try_again_later` | The card has been declined for an unknown reason, please try again later | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `withdrawal_amount_exceeded` | Account withdrawal amount exceeded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `withdrawal_count_exceeded` | Account withdrawal count exceeded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `account_number_blocked` | Account number blocked by merchant | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`

    ### ERROR

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `account_affiliation_failed` | There is no affiliation between accounts | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `account_denied` | The merchant application has been denied. please contact support for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `account_email_already_exists` | The email address provided for the creation account already has an account associated with it | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `account_number_exchanged` | Account number has been exchanged for a new number | `gift_card`
     `account_pended` | The merchant application has been pended. please contact support for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `account_signup_error` | Please check new application details for errors | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `account_under_review` | The merchant application is under review. please contact support for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `already_reversed` | Transaction has already been reversed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `api_key_expired` | Your API key has expired, please update key | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `authentication_failed` | Authentication of the provided credientials has failed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `balance_insufficient` | The transfer or payout could not be completed because the associated account does not have a sufficient balance available | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `batch_error` | Batch closure has failed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `character_limit_exceeded` | Character limit was exceeded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `charge_already_captured` | The transaction you’re attempting to capture has already been captured | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `charge_already_refunded` | The transaction you’re attempting to refund has already been refunded | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `charge_already_settled` | The transaction you’re attempting to capture/void has already been settled | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`
     `charge_already_voided` | The transaction you’re attempting to void has already been voided | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `charge_disputed` | The charge you’re attempting to refund has been charged back | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `charge_expired_for_capture` | The transaction cannot be captured as the authorization has expired | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `country_unsupported` | Country is not yet supported | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `coupon_expired` | The coupon provided for a subscription or order has expired | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `emv_error` | EMV error, contact processor for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `encryption_error` | Encryption issue, contact processor for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `external_account_setup_error` | Incorrect third party account configuration | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `general_error` | General error, please try again | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `idempotency_key_in_use` | The idempotency key provided is currently being used in another request | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `incorrect_account_range` | Account range of numbers isn't supported at location | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `invalid_account_number` | The account number provided is invalid (e.g., missing digits) | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `invalid_email` | The email address is invalid (e.g., not properly formatted) | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `invalid_expiration` | The card has expired. Check the expiration date or use a different card | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `invalid_mcc` | The merchant category code provided is invalid | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `invalid_merchant` | Merchant account is closed and/or inactive, contact support | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `invalid_parameter_provided` | One or more values provided contains a validation error | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `invalid_tax_id` | The tax ID number provided is invalid (e.g., missing digits) | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `issuance_error` | Account creation error | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`
     `issuer_error` | Issuer error, contact issuer for more details | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `magstripe_error` | Magstripe error, contact processor for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `pin_encryption_error` | PIN encryption issue, contact processor for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `refund_exceeds_original_transaction` | The refund amount is greater than the original transaction amount | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `request_previously_completed` | Transaction has already been reversed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`
     `request_timed_out` | The system can't be reached, please try again | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `settlement_error` | Settlement error, contact support for more information | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`
     `testmode_charges_only` | Your account has not been activated and can only make test charges | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `transaction_already_completed` | The transaction has already been completed | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `transfer_denied` | The transfer of funds between accounts has been denied | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `transfer_successful` | The transfer of funds between accounts was successful | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `transaction_type_not_supported` | The payment method selected needs to be activated | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`gift_card`<br/>`ach`
     `unable_to_deactivate` | Account is unable to be deactivated, may contain value | `gift_card`
     `unable_to_reference` | Associated transactions details are missing | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `unsupported_program_type` | Gift / Loyalty program isn't supported | `gift_card`
     `url_invalid` | The URL provided is invalid | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `merchant_not_found` | Merchant not found | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `missing_amount` | Missing amount | `gift_card`
     `partial_refund_not_allowed` | You cannot do a refund for an amount less than the original capture amount. | `paypal`
     `paypal_not_enabled` | paypal is not enabled for this merchant. | `paypal`
     `paypal_onboarding_incomplete` | Please confirm paypal account is active and integration is complete. | `paypal`
     `pending_capture` | Cannot initiate a refund as the capture is pending. | `paypal`

      ### REFUNDED

       statusCode                    | statusDescription   | paymentType
      -------------------------------|---------------------|-------------
       `refunded` | Transaction refund success | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`

      ### PARTIALLY_REFUNDED

       statusCode                    | statusDescription   | paymentType
      -------------------------------|---------------------|-------------
       `partially_refunded` | An amount less than the captured amount was partially refunded to the payer | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`<br/>`paypal`

    ### RETURNED

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `account_closed` | The bank account has been closed | `ach`
     `bank_returned` | Transaction rejected by bank, funds returned | `ach`
     `incorrect_bank_account` | Incorrect bank account | `ach`
     `incorrect_routing` | Incorrect routing number | `ach`
     `insufficient_bank_funds` | Insufficient funds in account | `ach`
     `non_transactional_account` | Bank account doesn't support ach | `ach`
     `stopped_payment` | Payment has been stopped by customer | `ach`
     `unable_to_locate_account` | Bank was unable to locate account, verify with account holder | `ach`

    ### SETTLED

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `settled` | Transaction settled | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`

    ### VERIFICATION

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `verification_successful` | The account successfully verified | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`
     `verification_failed` | The account failed verification | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`

    ### VOIDED

     statusCode                    | statusDescription   | paymentType
    -------------------------------|---------------------|-------------
     `voided` | Transaction void success | `credit_card`<br/>`pindebit_card`<br/>`pldebit_card`<br/>`ach`<br/>`gift_card`

    # AVS & CVV Verification Codes


    Code                | Status Description

    --------------------|----------------------------------

    `pass`              | Verification passed

    `fail`              | Verification failed

    `unchecked`         | No verification was performed

    `unsupported`       | Provider does not support this verification

    `retry`             | System error, please
    retry                                                                                                                                        
    |
tags:
  - name: Charge
    x-displayName: Charges
  - name: Refunds
  - name: ApplePay
    x-displayName: Apple Pay
    description: >
      <br><h2>Enable Apple Pay on your SeamlessPay</h2>


      To set up Apple Pay for your Seamlesspay account for the first time, click
      Apple Pay tab in the
      [settings](https://portal.seamlesspay.com/settings#applePay) page.


      From there, depending on whether you intend to implement Apple Pay - in
      the iOS app or on your website, or both - the setup process will be
      different.


      If you plan on adding Apple Pay to both the iOS app and your website,
      follow all the steps below.


      <br><h2>Set up Apple Pay for your iOS app</h2>


      ###### To set up Apple Pay on your iOS application:

      <br>

        1. From the [Apple Pay Settings page](https://portal.seamlesspay.com/settings#applePay), click `Add new application`.


        2. Download the Certificate Signing Request (CSR) and click `Continue`.

          <image align="center" src="/images/apple-pay-add-sertificate.png" width=1000> <br>


        3. Go to the [Apple Developer Center](https://developer.apple.com/account/ios/identifier/merchant).


        4. Select the merchant ID that you want the certificate to belong to, then click Edit and Create Certificate.


        5. Ignore instructions to create or retrieve a CSR file; this is the certificate signing request file that you downloaded earlier from Seamlesspay.


        6. Follow the instructions to download the CSR file.


        7. Click `Generate` to generate the certificate and upload it. The certificate must be in CER format.


        8. Go back to Seamlesspay and upload your new certificate file:

          <image align="center" src="/images/apple-pay-upload-sertificate.png" width=1000> <br>

        
        9. After uploading, you should see the certificate in the list of iOS certificates.


        10. You can then proceed with the [Apple Pay integration for apps](https://developer.apple.com/documentation/passkit/apple_pay/).

      <br><h2>Set up Apple Pay for your website</h2>


      ###### To set up Apple Pay to integrate into your website:

      <br>

        1. From the [Apple Pay Settings page](https://portal.seamlesspay.com/settings#applePay), click `Add new domain`.

          <image align="center" src="/images/apple-pay-add-domain.png" width=1000> <br>


        2. Enter the top-level domain or subdomain where you will implement Apple Pay (for example, yourdomain.com or test.yourdomain.com).


        3. Download the confirmation file: it will be a text file called `apple-developer-merchantid-domain-association.txt`.


        4. Upload the confirmation file to your website using the URL that you entered in the second step. The resulting URL should look like this: https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association.txt.


        5. You can then proceed with the [Apple Pay for Web integration](https://developer.apple.com/documentation/apple_pay_on_the_web/).
  - name: Checkout
    x-displayName: Checkout Sessions
  - name: WebhookEvents
    x-displayName: Webhook Events
  - name: PCIAudit
    x-displayName: PCI Audit
  - name: IRSReporting
    x-displayName: IRS Reporting
  - name: BinLookups
    x-displayName: BIN Lookups
  - name: GiftCards
    x-displayName: Gift Cards
  - name: SubMerchant
    x-displayName: Sub-Merchant
  - name: Invoices
    x-displayName: Invoices
    description: >
      Invoices are statements of amounts owed by a customer, and are either
      generated one-off, or generated periodically from a subscription.
  - name: Products
    x-displayName: Products
    description: >
      Products describe the specific goods or services you offer to your
      customers.
  - name: Plans
    x-displayName: Plans
    description: >
      Plans define the base price and billing cycle for recurring purchases of
      products.
  - name: Subscriptions
    x-displayName: Subscriptions
    description: |
      Subscriptions allow you to charge a customer on a recurring basis.
  - name: TaxRates
    x-displayName: Tax Rates
    description: |
      Tax rates can be applied to invoices to collect tax.
  - name: UsageRecords
    x-displayName: Usage Records
    description: >
      Usage records allow you to report customer usage to Seamlesspay for
      metered billing of subscription plans.
  - name: PanVault
    x-displayName: Tokens
    description: >
      Our stored value API can be used to create a variety of integrated
      applications, such as gift card and rewards programs.


      A stored-value card is a payments card with a monetary value stored on the
      card itself, not in an external account maintained by a financial
      institution. Our API makes it simple to create accounts and manage their
      value programmatically.


      For your convenience, we provide JSON Schema definitions for testing and
      validating your raw requests. There are validator implementations in all
      major languages.
        
      ### Test Cards


      See [Test Cards](#tag/TestCards) for a comprehensive list of available
      tokens to test with. 


      ### Test ACH Tokens


      |   Token   | Account Number | Routing Number |

      |-----------|----------------|----------------|

      | `tok_ach` | `99211226789`  | `999999992`    |


      Additionally, the following tokens can be used to test specific responses:


      |              Token              |       Test Case        | 

      |---------------------------------|------------------------|

      | `tok_ach_error_invalid_routing` | Invalid Routing Number |

      | `tok_ach_error_account`         | Invalid Account Number |

      | `tok_ach_error_gateway`         | ACH Gateway Error      |

      | `tok_ach_error_denied`          | Transaction Denied     |
  - name: GettingStartedSDK
    x-displayName: Getting Started
    description: >
      The SDK lets you accept payments from credit cards, and other payment
      methods.

      Each of these payment methods is its own component, so you only need to
      pull in the files you need.


      #### Loading the SDK

      ```html

      <!-- Load the required client component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/client.min.js"></script>


      <!-- Load additional components when required. -->


      <!-- Use the components. We'll see usage instructions next. -->

      <script>

      seamlesspay.client.create(/* ... */);

      </script>

      ```


      To start up, the JavaScript SDK needs a Publishable Key (you can get it on
      the [API Keys](https://portal.seamlesspay.com/api-keys) page).

      Once you've received Publishable Key, embed it into your template and
      create [client instance](#tag/Client).


      #### Using a Publishable Key to start up with SDK

      ```javascript

      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        function(error, clientInstance) {
          /* ... */
        }
      );

      ```
  - name: Client
    x-displayName: Client
    description: >
      This class is required by many other Seamlesspay components. It serves as
      the base API layer that communicates with our servers. It is also capable
      of being used to formulate direct calls to our servers, such as direct
      credit card tokenization.
  - name: ClientMethods
    x-displayName: Client Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type            | Description

      ------------|-----------------|--------------

      `*options`  | `ClientOptions` | Object containing `Client`
      [options](#tag/ClientTypeDefinitions).

      `callback`  | `callback`      | The second argument, is the Client
      instance. If no callback is provided, create returns a promise that
      resolves with the Client instance.


      `* required` <br />


      #### Example of client object creation

      ```javascript

      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: 'pk_0123456789ABCDEFGHIJKLMNOP'
        },
        function(error, clientInstance) {
          /* ... */
        }
      );

      ```
  - name: ClientTypeDefinitions
    x-displayName: Client Types
    description: >
      ### `ClientOptions`


      PROPERTIES:


      Name             | Type     | Description

      -----------------|----------|---------------

      `*authorization` | `String` | Merchant Publishable Key

      `environment`    | `String` | API environment - `production` value for
      live mode and `sandbox` for test mode (default value `production`).


      #### Example `ClientOptions`

      ```javascript

      var ClientOptions = {
        environment: 'sandbox',
        authorization: 'pk_0123456789ABCDEFGHIJKLMNOP'
      };

      ````
  - name: ClientErrorCodes
    x-displayName: Client Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                         | Type\t      | Description\n-------------------------------------------------|------------|---------------------------------\n`CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN`    | `MERCHANT` | Occurs when client used is not Seamlesspay whitelisted domain.\n`CLIENT_OPTION_REQUIRED`                         | `MERCHANT` | An option required in the request method was not provided. Usually `options.method` or `options.endpoint`\n`CLIENT_OPTION_INVALID`                          | `MERCHANT` | The request option provided is invalid.\n`CLIENT_INVALID_AUTHORIZATION`                   | `MERCHANT` | Occurs when client token cannot be parsed.\n`CLIENT_GATEWAY_NETWORK`                         | `NETWORK`  | The Seamlesspay gateway could not be contacted.\n`CLIENT_REQUEST_TIMEOUT`                         | `NETWORK`  | The request took too long to complete and timed out.\n`CLIENT_REQUEST_ERROR`                           | `NETWORK`  | The response from a request had status 400 or greater.\n`CLIENT_RATE_LIMITED`                            | `MERCHANT` | The response from a request had a status of 429, indicating rate limiting.\n`CLIENT_AUTHORIZATION_INSUFFICIENT`              | `MERCHANT` | The user assocaited with the client token or tokenization key does not have permissions to make the request.\n"
  - name: HostedFields
    x-displayName: Hosted Fields
    description: >
      In order to be eligible for the easiest level of PCI compliance, certain
      payment fields on the checkout page must be hosted securely. This requires
      you to host the information on an external payment gateway's domain and
      present the fields to your users in a frame or with a redirect.

      Our Hosted Fields solution accomplishes this by rendering an iframe to
      handle input of the various [payment
      fields](#tag/HostedFieldsTypeDefinitions) (regarding to payment method) on
      your checkout page.


      This provides you with the ability to customize the look and feel of your
      web page while ensuring that you are compliant with PCI requirements.


      To start using Hosted Fields, you need to create a basic HTML checkout
      form. You will need to define `<div>` containers in place of the `<input>`
      elements that would normally comprise your credit card input fields (card
      number, expiration date, CVV and others).


      #### Loading

      ```html

      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/hosted-fields.min.js"></script>

      ```


      #### Checkout Form

      ```html

      <form action="/" id="my-sample-form" method="post">
        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="cvv">CVV</label>
        <div id="cvv"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <input type="submit" value="Pay" disabled />
      </form>

      ```


      Then [set up the SDK](#tag/GettingStartedSDK), create a
      [`client`](#tag/Client) and pass it to the
      [`seamlesspay.hostedFields.create`](#tag/HostedFieldsMethods) within the
      [`options`](#tag/HostedFieldsTypeDefinitions) object.


      #### Passing the client to the `seamlesspay.hostedFields.create`

      ```javascript

      var options = {
        paymentType: 'credit_card',
        client: clientInstance,
        styles: {
          /* ... */
        },
        fields: {
          /* ... */
        }
      };


      seamlesspay.hostedFields.create(options, function(
        hostedFieldsError,
        hostedFieldsInstance
      ) {
        if (hostedFieldsErr) {
          // Handle error in Hosted Fields creation
          return;
        }

        // Use the Hosted Fields instance here to tokenize a card
      });

      ```


      Look for examples [here](#tag/Examples).


      #### Content Security Policy

      If you have deployed a
      [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP), the full
      set of required directives for `production` environment are:


      * `connect-src` https://pan-vault.seamlesspay.com
      https://api.seamlesspay.com

      * `frame-src` https://pan-vault.seamlesspay.com

      * `script-src` 'unsafe-inline' https://web-sdk.seamlesspay.com


      ```html

      <meta http-equiv="Content-Security-Policy" content="default-src
      'self';connect-src https://pan-vault.seamlesspay.com
      https://api.seamlesspay.com;frame-src
      https://pan-vault.seamlesspay.com;script-src 'unsafe-inline'
      https://web-sdk.seamlesspay.com;">

      ```

      Set of required directives for `sandbox` environment are:


      * `connect-src` https://sandbox-pan-vault.seamlesspay.com
      https://sandbox.seamlesspay.com

      * `frame-src` https://sandbox-pan-vault.seamlesspay.com

      * `script-src` 'unsafe-inline' https://web-sdk.seamlesspay.com


      ```html

      <meta http-equiv="Content-Security-Policy" content="default-src
      'self';connect-src https://sandbox-pan-vault.seamlesspay.com
      https://sandbox.seamlesspay.com;frame-src
      https://sandbox-pan-vault.seamlesspay.com;script-src 'unsafe-inline'
      https://web-sdk.seamlesspay.com;">

      ```
  - name: HostedFieldsMethods
    x-displayName: Hosted Fields Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name       | Type                   | Description

      -----------|------------------------|---------------

      `*options` | `HostedFieldsOptions`  | Creation
      [options](#tag/HostedFieldsTypeDefinitions).

      `callback` | `callback`             | The second argument, is the
      HostedFields instance. If no callback is provided, create returns a
      promise that resolves with the HostedFields instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.hostedFields.create(
        {
          paymentType: 'credit_card',
          client: clientInstance,
          styles: {
            input: {
              'font-size': '16pt',
              color: '#3A3A3A'
            },
            '.valid': {
              color: 'green'
            }
          },
          fields: {
            accountNumber: {
              selector: '#account-number'
            },
            expDate: {
              selector: '#exp-date'
            }
          }
        },
        function(error, hostedFieldsInstance) {
          // call `hostedFieldsInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `options`   | `object`    | All tokenization options for the Hosted Fields
      component (e.g: `{ phoneNumber: '1234567890' }`).

      `callback`  | `callback`  | The second argument, is a tokenizePayload. If
      no callback is provided, tokenize returns a function that resolves with a
      tokenizePayload.


      #### Example Method

      ```javascript

      hostedFieldsInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125"
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "paymentType": "credit_card"
      }

      ```


      ### `instance.on`


      `on(eventName, callback)` → `{void}`


      You can subscribe to Hosted Fields events using an event listener. This
      allows you to update the UI of your form based on the state of the fields.


      EVENTS:


      Name      | Description

      ----------|---------------

      `change`  | Emitted when field changes.

      `focus`   | Emitted when a field gains focus.

      `blur`    | Emitted when a field loses focus.


      The event payload sent from `on`:


      Name          | Type      | Description

      --------------|-----------|---------

      `cards`       | `Array`   | This will return an array of potential cards.
      If the card type has been determined, the array will contain only one
      card.

      `emittedBy`   | `string`  | The name of the field associated with an
      event. It will be one of the following strings: <br/>`accountNumber`
      <br/>`postalCode` <br/>`expDate` <br/>`cvv` <br/>`pinNumber`

      `fields`      | `object`  | Properties: <table
      class='nested-table'><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>`accountNumber`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the number field, if it is
      present.</td></tr><tr><td>`postalCode`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the postal code field, if it is
      present.</td></tr><tr><td>`expDate`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the expiration date field, if it is
      present.</td></tr><tr><td>`cvv`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the CVV field, if it is
      present.</td></tr><tr><td>`pinNumber`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the PIN number field, if it is present.</td></tr></tbody></table>


      #### Example `hostedFieldsInstance.on`

      ```javascript

      hostedFieldsInstance.on('change', function(event) {
        console.log('"change" event emitted by field "' + event.emittedBy + '"')
      });

      ```


      #### <a name="hostedFieldsFieldData"></a>Hosted Fields field data object
      properties:


      Name                 | Type          | Description

      ---------------------|---------------|--------------

      `container`          | `HTMLElement` | Reference to the container DOM
      element on your page associated with the current event.

      `isEmpty`            | `boolean`     | Whether or not the user has entered
      a value in the input.

      `isFocused`          | `boolean`     | Whether or not the input is
      currently focused.

      `isPotentiallyValid` | `boolean`     | A determination based on the future
      validity of the input value. This is helpful when a user is entering a
      card number and types "41". While that value is not valid for submission,
      it is still possible for it to become a fully qualified entry. However, if
      the user enters "4x" it is clear that the card number can never become
      valid and isPotentiallyValid will return false.

      `isValid`            | `boolean`     | Whether or not the value of the
      associated input is fully qualified for submission.


      #### Example card fields validation using `hostedFieldsInstance.on`

      ```javascript

      hostedFieldsInstance.on('blur', function(event) {
        // Get access to field data
        var hostedFieldData = event.fields[event.emittedBy];
        console.log('Hosted Field data: ', hostedFieldData);

        // Check field validity
        var valid = hostedFieldData.isValid && hostedFieldData.isPotentiallyValid;
        if (!valid) alert('Some payment input fields are invalid');
      });

      ```


      ### `instance.teardown`


      `teardown(callback)` → `{Promise|void}`


      Cleanly remove anything set up by [create](#tag/HostedFieldsMethods).


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `callback`  | `callback`  | Called on completion, containing an error if
      one occurred. No data is returned if teardown completes successfully. If
      no callback is provided, `teardown` returns a promise.


      #### Example

      ```javascript

      hostedFieldsInstance.teardown(function(teardownError) {
        if (teardownError) {
          console.error('Could not tear down Hosted Fields!');
        } else {
          console.info('Hosted Fields has been torn down!');
        }
      });

      ```
  - name: HostedFieldsTypeDefinitions
    x-displayName: Hosted Fields Types
    description: >
      ### `HostedFieldsOptions`


      PROPERTIES:


      Name      | Type            | Description

      ----------|-----------------|----------------

      `paymentType` | `String`        | Payment Type (eligible values:
      `credit_card`, `pindebit_card`, `pldebit_card`, `ach`, `gift_card`)

      `client`  | `Client`        | A [Client instance](#tag/Client).

      `fields`  | `fieldOptions`  | A set of options for each field.

      `styles`  | `styleOptions`  | Styles applied to each field.


      #### Example Options

      ```javascript

      var options = {
        paymentType: 'credit_card',
        client: clientInstance,
        styles: {
          /* ... */
        }, // styleOptions
        fields: {
          /* ... */
        } // fieldOptions
      };

      ```


      ### `fieldOptions`


      An object that has `field` objects for each field. Used in create.


      PROPERTIES:


      Name              | Payment Types                 | Applicable
      Methods             | Description

      ------------------|-------------------------------|--------------------------------|----------------

      `*accountNumber`  | Any                           | `tokenize` | Bank
      account number or card number.

      `postalCode`      | Any                           | `tokenize` | Customer
      postal code.

      `cvv`             | `credit_card` `pindebit_card` `pldebit_card` |
      `tokenize`            | CVV2, CVC2 and CID are, Visa, MasterCard,
      MaestroInt, American Express and Discover card verification tools designed
      to reduce fraud losses primarily on transactions when the card is not
      present. With the exception of American Express, this is a three character
      value printed on the back of the card in the signature panel, after the
      card number. For American Express, it is a four character value printed on
      the face of the card.

      `*expDate`        | `credit_card` `pindebit_card` `pldebit_card` |
      `tokenize` | Card expiration date.

      `pinNumber`       | `gift_card` `pindebit_card`   | `tokenize` | Card PIN.


      `* required` <br />


      #### Example Options (for payment type `credit_card`)

      ```javascript

      var options = {
        accountNumber: {
          selector: '#account-number'
        },
        expDate: {
          selector: '#exp-date'
        }
      };

      ```


      ### `styleOptions`


      An object that represents CSS that will be applied in each hosted field.
      This object looks similar to CSS. Typically, these styles involve fonts
      (such as `font-family` or `color`).


      These are the CSS properties that Hosted Fields supports. Any other CSS
      should be specified on your page and outside of any Seamlesspay
      configuration. Trying to set unsupported properties will fail and put a
      warning in the console.


      Supported CSS properties are:

      `-moz-osx-font-smoothing`

      `-moz-tap-highlight-color`

      `-moz-transition`

      `-webkit-font-smoothing`

      `-webkit-tap-highlight-color`

      `-webkit-transition`

      `color`

      `direction`

      `font`

      `font-family`

      `font-size`

      `font-size-adjust`

      `font-stretch`

      `font-style`

      `font-variant`

      `font-variant-alternates`

      `font-variant-caps`

      `font-variant-east-asian`

      `font-variant-ligatures`

      `font-variant-numeric`

      `font-weight`

      `letter-spacing`

      `line-height`

      `opacity`

      `outline`

      `text-shadow`

      `transition`


      #### Example Options

      ```javascript

      var options = {
        input: {
          'font-size': '16pt',
          color: '#3A3A3A'
        },
        '.valid': {
          color: 'green'
        }
      };

      ```


      ### `field`


      Fields used in `fieldOptions`


      PROPERTIES:

       Name          | Type               | Description
      ---------------|--------------------|--------------

      `*selector`    | `String`           | A CSS selector to find the container
      where the hosted field will be inserted.

      `placeholder`  | `String`           | Will be used as the placeholder
      attribute of the input.

      `maskInput`    | `object` `boolean` | Enable or disable input masking when
      input is not focused. If set to true instead of an object, the defaults
      for the maskInput parameters will be used. (e.g: `{ character: '*' }`)

      `formatInput`  | `boolean`          | Enable or disable automatic
      formatting on this field.


      `* required` <br />


      #### Example field

      ```javascript

      var field = {
        selector: '#account-number',
        placeholder: '4242 4242 4242 4242'
      };

      ```
  - name: HostedFieldsReact
    x-displayName: Hosted Fields React
    description: >
      React components for Seamlesspay Hosted Fields integration.


      ### `CardPayments`


      PROPS:


      Name                | Type                  | Description

      --------------------|-----------------------|---

      `*authorization`    | `String`              | Merchant Publishable Key.

      `*children`         | `Array<HostedField>`  | Hosted Fields components.

      `environment`       | `String`              | API environment -
      `production` value for live mode and `sandbox` for test mode (default
      value `production`).

      `onCardTypeChange`  | `callback`            | Called on Hosted Fields card
      type changed. The first argument is an event.

      `*onError`          | `callback`            | Called on Hosted Fields
      Instance creation failed. The first argument is an error.

      `*onReady`          | `callback`            | Called on Hosted Fields
      Instance created. The first argument is a `hostedFieldsInstance`.

      `onValidityChange`  | `callback`            | Called on Hosted Fields
      validity changed. The first argument is an event.

      `*paymentType`          | `String`              | A Payment Type
      (`credit_card` `pindebit_card` `pldebit_card` `ach` `gift_card`).

      `*seamless`         | `object`              | A seamlesspay library
      (`client` and `hostedFields` should be loaded).

      `styles`            | `styleOptions`        | Hosted Fields styles
      options.


      `* required` <br />


      #### Example

      ```html

      <CardPayments
        seamless={seamlesspay}
        environment="sandbox"
        paymentType="credit_card"
        styles={{
          input: {
            'font-size': '12px',
            'font-family': 'helvetica, tahoma, calibri, sans-serif',
            color: '#3a3a3a'
          },
          'input.invalid': {
            color: 'red'
          },
          'input.valid': {
            color: 'green'
          },
          ':focus': {
            color: 'black'
          }
        }}
        authorization={CLIENT_AUTHORIZATION}
        onReady={function (hostedFieldsInstance) {
          // call hostedFieldsInstance.tokenize here
        }}
        onError={function (error) {
          // handle error here
        }}
      >
        <HostedField name="accountNumber" placeholder="4242 4242 4242 4242" />
        <HostedField name="expDate" placeholder="MM / YY" />
      </CardPayments>

      ```


      ### `HostedField`


      PROPS:


      Name          | Type        | Description

      --------------|-------------|---------------

      `*name`       | `String`    | Field Name.

      `className`   | `String`    | A DOM element class definitions.

      `placeholder` | `String`    | Will be used as the placeholder attribute of
      the input.

      `instance`    | `object`    | A Hosted Fields Instance.

      `onChange`    | `callback`  | Called on Hosted Field changed (workable if
      `instance` property is set).


      `* required` <br />


      #### Example

      ```html

      <HostedField
        name="accountNumber"
        className="container-account-number"
        placeholder="4242 4242 4242 4242"
        instance={hostedFieldsInstance}
      />

      ```
  - name: HostedFieldsErrorCodes
    x-displayName: Hosted Fields Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                       | Type\t  | Description\n-----------------------------------------------|----------|--------------------------------------\n`HOSTED_FIELDS_INVALID_FIELD_KEY`              | `MERCHANT` | Occurs when Hosted Fields is instantiated with an invalid Field option.\n`HOSTED_FIELDS_INVALID_FIELD_DEFAULT_VALUE`    | `MERCHANT` | Occurs when Hosted Fields is instantiated with an invalid default value option.\n`HOSTED_FIELDS_INVALID_FIELD_SELECTOR`         | `MERCHANT` | Occurs when Hosted Fields given a field selector that is not valid.\n`HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME`         | `MERCHANT` | Occurs when Hosted Fields given a field selector that already contains an iframe.\n`HOSTED_FIELDS_FIELD_INVALID`                  | `MERCHANT` | Occurs when attempting to modify a field that is not a valid Hosted Fields option.\n`HOSTED_FIELDS_FIELD_NOT_PRESENT`              | `MERCHANT` | Occurs when attempting to modify a field that is not configured with Hosted Fields.\n`HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR`     | `NETWORK`  | Occurs when the Seamlesspay gateway cannot be contacted.\n`HOSTED_FIELDS_FAILED_TOKENIZATION`            | `CUSTOMER` | Occurs when the credit card details were sent to Seamlesspay, but failed to tokenize.\n`HOSTED_FIELDS_FIELDS_EMPTY`                   | `CUSTOMER` | Occurs when all the Hosted Fields inputs are empty.\n`HOSTED_FIELDS_FIELDS_INVALID`                 | `CUSTOMER` | Occurs when one ore more fields are invalid.\n`HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED`        | `MERCHANT` | Occurs when trying to set an attribtue that is not supported to be set.\n`HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED`    | `MERCHANT` | Occurs when the type of value for an attribue is not allowed to be set.\n`HOSTED_FIELDS_INCOMPATIBLE_FIELDS_SET`        | `MERCHANT` | Occurs when Hosted Fields is trying to be instantiated with an incompatible fields set\n"
  - name: PaymentRequest
    x-displayName: Payment Request API
    description: >
      The Payment Request API is a W3C standard candidate that enables customers
      using supported browsers to provide payment information without filling
      out a checkout form. Instead, the customer clicks a button to initiate a
      payment request, which opens a window provided by the browser where they
      can select a saved payment method or enter a new one.


      Seamlesspay's Payment Request component can be used as an alternative (or
      in addition) to Hosted Fields. As with Hosted Fields, the credit card
      details are all securely captured and tokenized within a Seamlesspay
      iframe, so the raw credit card details are never exposed on your website.


      Look for examples [here](#tag/Examples).


      #### Loading

      ```html

      <!-- Load the required paymentRequest component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/payment-request.min.js"></script>

      ```


      #### Check browser capabilities

      ```javascript

      if (window.PaymentRequest) {
        // This browser supports Payment Request
        // Display your Payment Request button
      } else {
        // Browser does not support Payment Request
        // Set up Hosted Fields, etc.
      }

      ```


      #### Passing the client to the `seamlesspay.paymentRequest.create`

      ```javascript

      var options = {
        client: clientInstance
      };


      seamlesspay.paymentRequest.create(options, function(
        paymentRequestError,
        paymentRequestInstance
      ) {
        if (paymentRequestError) {
          // Handle Payment Request errors here
          return;
        }

        // Use the Payment Request instance here to tokenize a card
      });

      ```
  - name: PaymentRequestMethods
    x-displayName: Payment Request Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `*options`  | `object`    | Creation options `{ client: clientInstance }`.

      `callback`  | `callback`  | The second argument is the
      PaymentRequestComponent instance. If no callback is provided, create
      returns a promise that resolves with the PaymentRequestComponent instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.paymentRequest.create(
        {
          client: clientInstance
        },
        function(error, paymentRequestInstance) {
          // call `paymentRequestInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type                  | Description

      ------------|-----------------------|----------------

      `options`   | `tokenizationOptions` | All tokenization options for the
      Payment Request component.

      `callback`  | `callback`            | The second argument, is a
      tokenizePayload. If no callback is provided, tokenize returns a function
      that resolves with a tokenizePayload.


      #### Example Options

      ```javascript

      var options = {
        details: {
          total: {
            label: 'Total Amount',
            amount: {
              currency: 'USD',
              value: '1.00'
            }
          }
        },
        options: {
          requestPayerName: true,
          requestPayerPhone: true,
          requestPayerEmail: true
        }
      };

      ```


      #### Example Method

      ```javascript

      paymentRequestInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125",
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "paymentType": "credit_card"
      }

      ```


      ### `instance.teardown`

      The same as for [hosted fields](#tag/HostedFieldsMethods)
  - name: PaymentRequestTypeDefinitions
    x-displayName: Payment Request Types
    description: |
      ### tokenizationOptions

      PROPERTIES:

      Name      | Type     | Description
      ----------|----------|---------------
      `details` | `object` | Payment Request details.
      `options` | `object` | Payment Request options.

      #### Example `options.details`
      ```javascript
      options.details = {
        total: {
          label: 'Total Amount',
          amount: {
            currency: 'USD',
            value: '1.00'
          }
        }
      };
      ```

      #### Example `options.options`
      ```javascript
      options.options = {
        requestPayerName: true,
        requestPayerPhone: true,
        requestPayerEmail: true
      };
      ```
  - name: PaymentRequestButton
    x-displayName: Payment Request Button
    description: >
      The Payment Request Button provides unified integration with Apple Pay,
      Google Pay and the standard browser Payment Request API.


      Customers see the "Pay Now" button or the Apple Pay button, depending on
      what their device / browser combination supports. If none of the options
      are available, they don't see the button. Additional steps are required to
      support Apple Pay, but compatible devices automatically support cards
      saved in the browser, Google Pay.


      Apple Pay with the Payment Request Button requires macOS 10.12.1+ or iOS
      10.1+.


      #### Prerequisites


      Before you start, you need to:


      * Add a payment method to your browser. For example, you can save the card
      to Chrome, add a card to your Google Pay account or add the card to your
      Safari wallet.


      * Serve your application over HTTPS. This is a requirement for both
      development and production.


      * Verify your domain with Apple Pay in both development and production.


      ### Verify your domain with Apple Pay


      To use Apple Pay, you need to register all of your web domains with Apple
      for the Apple Pay button to appear. This includes both top-level domains
      (eg yourdomain.com) and subdomains (eg test.yourdomain.com). This needs to
      be done for the domains that you use in both production and testing. When
      testing locally, use a tool like ngrok to get the HTTPS domain.


      __Important Note__: Apple's documentation for Apple Pay on the Web
      describes their “merchant verification” process that Seamlesspay does
      behind the scenes for you. You don't need to create Apple Merchant ID,
      CSR, etc. as described in their documentation, instead, you just need to
      follow these steps:


      1. Download this domain association file and place it in
      /.well-known/apple-developer-merchantid-domain-association on your site.

      For example, if you register at https://yourdomain.com, make this file
      available at
      https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association.txt.


      2. Ask Seamlesspay to register your domain with Apple. You can do this by
      going to the Apple Pay settings page, or directly using the API with a
      valid secret key, as shown below.

        ````
        $ curl https://api.seamlesspay.com/apple-pay/domains \
        -H "Authorization: Bearer {SECRET_API_KEY}" \
        -d domainName="yourdomain.com"
        ````

      3. After registering your domains, you can make payments on your site
      using valid API keys.


      ### Set up Request Button Element


      Include this in your page and create a container that will be used for the
      Payment Request Button Element:


      ```html

      <div id="payment-request-button-container"></div>

      <button id="payment-request-button">Make Payment Request $1.00</button>

      <!-- Load the required hostedFields component. -->

      <script src="/4.0.0/js/client.min.js"></script>

      <script src="/4.0.0/js/hosted-fields.min.js"></script>

      <script src="/4.0.0/js/payment-request.min.js"></script>

      ```


      ### Create Payment Request Button


      ````javascript

      var CLIENT_PUBLISHABLE_KEY = 'pk_01ER******************AWVM';
                                            
      seamlesspay.client.create(
        {
          environment: 'development',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        seamlesspay.paymentRequest.create(
          {
            client: client,
            enabledPaymentMethods: {
              payWithApple: true,
              payWithGoogle: true,
              basicCard: false
            },
            details: {
              total: {
                label: 'Total Amount',
                amount: {
                  currency: 'USD',
                  value: '10.00'
                }
              },
              displayItems: [
                {
                  label: 'Tax',
                  amount: { value: '2.00', currency: 'USD' }
                },
                {
                  label: 'Ground Shipping',
                  amount: { value: '5.00', currency: 'USD' }
                }
              ],
              shippingOptions: [
                {
                  id: 'ground',
                  label: 'Ground Shipping',
                  amount: { value: '5.00', currency: 'USD' },
                  detail: 'Delivers in five business days',
                  selected: true
                },
                {
                  id: 'free',
                  label: 'Free Shipping',
                  amount: { value: '0.00', currency: 'USD' }
                }
              ],
              modifiers: [
                {
                  supportedMethods: 'https://apple.com/apple-pay',
                  total: {
                    label: 'Total',
                    amount: { currency: 'USD', value: '110.08' }
                  },
                  additionalDisplayItems: [
                    {
                      label: 'Credit surcharge',
                      amount: { currency: 'USD', value: '2.00' }
                    }
                  ],
                  data: {
                    paymentMethodType: 'credit'
                  }
                }
              ]
            },
            options: {
              requestPayerName: true,
              requestPayerPhone: true,
              requestPayerEmail: true,
              requestShipping: true,
              merchantName: 'SPay'
            }
          },
          function (error, paymentRequestInstance) {
            if (error) {
              console.error('paymentRequestInstance init: ', error);
              return;
            }

            paymentRequestInstance.canMakePayment().then(function (event) {
              console.log('[canMakePayment] event: ', event)
              /*
                Event: { result: true, paymentMethod: 'googlePay' }
              */
              if (event.result) {
                const container = document.getElementById('container');
                const button = document.createElement('button');
                if (event.paymentMethod === 'googlePay') {
                  button.innerHTML = 'Google Pay';
                } else if (event.paymentMethod === 'applePay') {
                  button.innerHTML = 'Apple Pay';
                }
                container.appendChild(button);
                button.addEventListener('click', submitBtnHandler.bind(null, paymentRequestInstance));
              }
            }).catch(function (error) {
              console.error('[canMakePayment] error: ', error);
            })
          }
        );
      }

      ````


      __Note__: Asking for the name, email address, or phone number of the payer
      is optional, but highly recommended as it also results in their Apple Pay
      billing address.

      The billing address can be used to verify the address and block fraudulent
      payments. For all other payment methods, a billing address is
      automatically collected when available.


      ### Complete payment


      Listen for the `paymentmethod` event to complete payment. 


      ````javascript

      function submitBtnHandler(paymentRequest, event) {
        event.preventDefault();

        paymentRequest.show();

        paymentRequest.on('paymentmethod', function (event) {
          paymentRequest.tokenize(function(error, payload) {
            if (error) {
              console.log('SEAMLESSPAY SDK TOKENIZE ERROR: ');
              console.error(error);
              event.complete('fail');
              return;
            }

            // Send payload.token to your server here
            event.complete('success');
          });
        }
      }

      ````


      ### Collect shipping information


      To collect shipping information, start by including `requestShipping:
      true` when creating your payment request.


      At this point, you can also specify a set of shipping options, if your
      shipping options do not depend on the buyer's address.


      ````javascript

      seamlesspay.paymentRequest.create(
        {
          client: client,
          details: {
            total: {
              label: 'Total Amount',
              amount: {
                currency: 'USD',
                value: '10.00'
              },
            shippingOptions: [
              {
                id: 'ground',
                label: 'Ground Shipping',
                amount: { value: '5.00', currency: 'USD' },
                detail: 'Delivers in five business days',
                selected: true
              },
              {
                id: 'free',
                label: 'Free Shipping',
                amount: { value: '0.00', currency: 'USD' }
              }
            ]
          },
          options: {
            requestShipping: true
          }
        },
        function (error, paymentRequestInstance) {
          if (error) return;

          paymentRequestInstance.canMakePayment().then(function (event) {
            if (event.result) {
              var container = document.getElementById('container');
              var button = document.createElement('button');
              button.innerHTML = 'Pay';

              container.appendChild(button);
              button.addEventListener('click', submitBtnHandler.bind(null, paymentRequestInstance)); 
            }
          }).catch(function (error) {
            console.error(error);
          })
        }
      );

      ````


      Then listen for the `shippingaddresschange` event to determine when the
      customer chooses a shipping address.

      Use the address to get valid shipping options from your server, update the
      grand total, or perform other business logic.

      The address data in the `shippingaddresschange` event can be anonymized by
      the browser to avoid revealing sensitive information that is not necessary
      for calculating shipping costs.


      Note that valid `shippingOptions` must be specified at this point in order
      for the client to continue in the stream.


      ````javascript

      paymentRequest.on('shippingaddresschange', function (event) {
        if (event.shippingAddress.country !== 'us') {
          event.updateWith({ status: 'invalid_shipping_address' });
        } else {
          event.updateWith({
            total: {
              label: 'Total Amount',
              amount: {
                currency: 'USD',
                value: '500.00'
              }
            },
            shippingOptions: [
              {
                id: 'ground',
                label: 'Ground Shipping',
                amount: { value: '5.00', currency: 'USD' },
                detail: 'Delivers in five business days',
                selected: true
              },
              {
                id: 'free',
                label: 'Free Shipping',
                amount: { value: '0.00', currency: 'USD' }
              }
            ]
          });
        }
      });

      ````


      ### Style the button


      When building your own button, follow Apple Pay’s [Human Interface
      Guidelines](https://developer.apple.com/apple-pay/web-human-interface-guidelines/)
      and Google Pay’s [Brand
      Guidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines).
  - name: PaymentRequestErrorCodes
    x-displayName: Payment Request Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                              | Type\t   | Description\n------------------------------------------------------|------------|---------------------------------\n`PAYMENT_REQUEST_NO_VALID_SUPPORTED_PAYMENT_METHODS`  | `MERCHANT` | Occurs when there are no valid payment methods configured.\n`PAYMENT_REQUEST_CANCELED`                            | `CUSTOMER` | Occurs when customer cancels the Payment Request.\n`PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED`        | `MERCHANT` | Occurs when failed on configuring the payment request.\n`PAYMENT_REQUEST_PAY_WITH_GOOGLE_FAILED_TO_TOKENIZE`  | `MERCHANT` | Occurs when google card tokenization failed.\n`PAYMENT_REQUEST_PAY_WITH_GOOGLE_PARSING_ERROR`       | `UNKNOWN`  | Occurs when google card parsing failed.\n`PAYMENT_REQUEST_NOT_COMPLETED`                       | `CUSTOMER` | Occurs when an error prevented the Payment Request from being completed.\n`PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_MUST_INCLUDE_TYPE` | `MERCHANT` | Occurs when no type is supplied for method.\n`PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_TYPE_NOT_ENABLED`  | `MERCHANT` | Occurs when configured type is not enabled.\n"
  - name: CardElement
    x-displayName: Card Element
    description: >
      The Card Element lets you collect card information all within one Element.
      It includes a dynamically-updating card brand icon as well as inputs for
      account number, expiration date, CVV, and billing zip.


      Look for examples [here](#tag/Examples).


      #### Loading

      ```html

      <!-- Load the required cardElement component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/card-element.min.js"></script>

      ```


      #### Passing the client to the `seamlesspay.cardElement.create`

      ```javascript

      var options = {
        client: clientInstance,
        styles: {
          '.ElementsApp .InputElement': {
            color: '#007725'
          }
        },
        selector: '#card-element'
      };


      seamlesspay.cardElement.create(options, function(
        cardElementError,
        cardElementInstance
      ) {
        if (cardElementError) {
          // Handle card element errors here
          return;
        }

        // Use the card element instance here to tokenize a card
      });

      ```
  - name: CardElementMethods
    x-displayName: Card Element Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `*options`  | `object`    | Creation options `{ client: clientInstance,
      selector: '#card-element-selector' }`.

      `callback`  | `callback`  | The second argument is the
      CardElementComponent instance. If no callback is provided, create returns
      a promise that resolves with the CardElementComponent instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.cardElement.create(
        {
          client: clientInstance,
          selector: '#card-element-selector'
        },
        function(error, cardElementInstance) {
          // call `cardElementInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type                  | Description

      ------------|-----------------------|----------------

      `options`   | `tokenizationOptions` | All tokenization options for the
      Card Element component.

      `callback`  | `callback`            | The second argument, is a
      tokenizePayload. If no callback is provided, tokenize returns a function
      that resolves with a tokenizePayload.


      #### Example Options

      ```javascript

      var options = {
        billingAddress: {
          line1: '400 Madison Ave',
          line2: '10th Fl',
          city: 'New York',
          country: 'USA',
          state: 'NY'
        },
        email: 'hello@seamlesspay.com',
        name: 'Michael Smith'
      };

      ```


      #### Example Method

      ```javascript

      cardElementInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125",
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "paymentType": "credit_card"
      }

      ```


      ### `instance.on`

      The same as for [hosted fields](#tag/HostedFieldsMethods)


      ### `instance.teardown`

      The same as for [hosted fields](#tag/HostedFieldsMethods)
  - name: CardElementTypeDefinitions
    x-displayName: Card Element Types
    description: >
      ### `CardElementOptions`


      PROPERTIES:


      Name        | Type            | Description

      ------------|-----------------|----------------

      `*client`   | `Client`        | A [Client instance](#tag/Client).

      `*selector` | `String`        | A CSS selector to find the container where
      the card element will be inserted.

      `styles`    | `styleOptions`  | Styles applied to each field.


      `* required` <br />


      #### Example Options

      ```javascript

      var options = {
        client: clientInstance,
        selector: '#card-element',
        styles: {
          /* ... */
        } // styleOptions
      };

      ```


      ### `styleOptions`


      An object that represents CSS that will be applied in card element. This
      object looks similar to CSS. Typically, these styles involve fonts (such
      as `font-family` or `color`).


      These are the CSS properties that Card Element supports. Any other CSS
      should be specified on your page and outside of any Seamlesspay
      configuration. Trying to set unsupported properties will fail and put a
      warning in the console.


      Supported CSS properties are:

      `-moz-appearance`

      `-moz-osx-font-smoothing`

      `-moz-tap-highlight-color`

      `-moz-transition`

      `-webkit-appearance`

      `-webkit-font-smoothing`

      `-webkit-tap-highlight-color`

      `-webkit-transition`

      `appearance`

      `color`

      `direction`

      `font`

      `font-family`

      `font-size`

      `font-size-adjust`

      `font-stretch`

      `font-style`

      `font-variant`

      `font-variant-alternates`

      `font-variant-caps`

      `font-variant-east-asian`

      `font-variant-ligatures`

      `font-variant-numeric`

      `font-weight`

      `letter-spacing`

      `line-height`

      `margin`

      `opacity`

      `outline`

      `padding`

      `text-shadow`

      `transition`


      #### Example Options

      ```javascript

      var options = {
        '.ElementsApp .InputElement': {
          'font-size': '16pt',
          color: '#007725'
        },
        '.ElementsApp .InputElement.is-invalid': {
          color: '#ff8401'
        }
      };

      ```
  - name: CardElementErrorCodes
    x-displayName: Card Element Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                    | Type\t     | Description\n--------------------------------------------|------------|---------------------------------\n`CARD_ELEMENT_INVALID_FIELD_SELECTOR`       | `MERCHANT` | Occurs when Card Element given a field selector that is not valid.\n`CARD_ELEMENT_FIELD_INVALID`                | `MERCHANT` | Occurs when attempting to modify a field that is not a valid Card Element option.\n`CARD_ELEMENT_TOKENIZATION_NETWORK_ERROR`   | `NETWORK`  | Occurs when the Seamlesspay gateway cannot be contacted.\n`CARD_ELEMENT_FAILED_TOKENIZATION`          | `CUSTOMER` | Occurs when the credit card details were sent to Seamlesspay, but failed to tokenize.\n`CARD_ELEMENT_FIELDS_EMPTY`                 | `CUSTOMER` | Occurs when all the Card Element inputs are empty.\n`CARD_ELEMENT_FIELDS_INVALID`               | `CUSTOMER` | Occurs when one ore more fields are invalid.\n`CARD_ELEMENT_ATTRIBUTE_NOT_SUPPORTED`      | `MERCHANT` | Occurs when trying to set an attribtue that is not supported to be set.\n`CARD_ELEMENT_ATTRIBUTE_VALUE_NOT_ALLOWED`  | `MERCHANT` | Occurs when the type of value for an attribue is not allowed to be set.\n"
  - name: Examples
    x-displayName: Examples
    description: >
      ### Hosted Fields


      #### Example integration


      ```html

      <form action="/" id="my-sample-form">
        <input type="hidden" name="payment_method_id">

        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <input id="my-submit" type="submit" value="Pay" disabled/>
      </form>


      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/hosted-fields.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var submitBtn = document.getElementById('my-submit');

      var form = document.getElementById('my-sample-form');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        seamlesspay.hostedFields.create(
          {
            paymentType: 'credit_card',
            client: client,
            styles: {
              input: {
                'font-size': '16pt',
                color: '#3A3A3A'
              },
              '.valid': {
                color: 'green'
              }
            },
            fields: {
              accountNumber: {
                selector: '#account-number'
              },
              expDate: {
                selector: '#exp-date'
              }
            }
          },
          hostedFieldsDidCreate
        );
      }


      function hostedFieldsDidCreate(error, hostedFields) {
        submitBtn.addEventListener('click', submitHandler.bind(null, hostedFields));
        submitBtn.removeAttribute('disabled');
      }


      function submitHandler(hostedFields, event) {
        event.preventDefault();
        submitBtn.setAttribute('disabled', 'disabled');

        hostedFields.tokenize({ phoneNumber: '1234567890' }, function(error, payload) {
          if (error) {
            submitBtn.removeAttribute('disabled');
            console.error(error);
          } else {
            form['payment_method_id'].value = payload.token;
            form.submit();
          }
        });
      }

      ```


      #### Example react integration

      ```html

      <div id="app"></div>

      <!-- Load the required components. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/hosted-fields.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/react/card-payments.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/react/hosted-field.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      'use strict';


      var React = require('react');

      var styles = {
        input: {
          'font-size': '12px',
          'font-family': 'helvetica, tahoma, calibri, sans-serif',
          color: '#3a3a3a'
        },
        'input.invalid': {
          color: 'red'
        },
        'input.valid': {
          color: 'green'
        },
        ':focus': {
          color: 'black'
        }
      };


      var SeamlesspayExample = React.createClass({
        getInitialState: function() {
          return {
            hostedFields: null
          };
        },

        handleReady: function(hostedFields) {
          this.setState({ hostedFields: hostedFields });
        },

        handleValidityChange: function(event) {
          console.log('event.fields: ', event.fields);
        },

        handleCardTypeChange: function(event) {
          console.log('event.cards: ', event.cards);
        },

        handleSdkError: function(error) {
          console.log('SEAMLESSPAY SDK ERROR: ');
          console.error(error);
        },

        handleSubmit: function(event) {
          event.preventDefault();
          if (!this.state.hostedFields) {
            return;
          }

          this.state.hostedFields.tokenize(function(error, payload) {
            if (error) {
              console.log('SEAMLESSPAY SDK TOKENIZE ERROR: ');
              console.error(error);
              return;
            }
            console.log('payload: ', payload);

            // Send the `payload.token` to your server with AJAX.

            // This is where you would submit payload.token to your server
            alert(`Submit token ${payload.token} to your server here!`);
          });
        },

        render: function() {
          return (
            <form onSubmit={this.handleSubmit.bind(this)}>
              <CardPayments
                seamless={window.seamlesspay}
                environment="sandbox"
                paymentType="credit_card"
                styles={styles}
                authorization={CLIENT_AUTHORIZATION}
                onReady={this.handleReady.bind(this)}
                onValidityChange={this.handleValidityChange}
                onCardTypeChange={this.handleCardTypeChange}
                onError={this.handleSdkError}
              >
                <HostedField name="accountNumber" placeholder="4242 4242 4242 4242" />
                <HostedField name="expDate" placeholder="MM / YY" />
              </CardPayments>
              <button>Submit</button>
            </form>
          );
        }
      });


      var mainElement = document.querySelector('app');


      ReactDOM.render(<SeamlesspayExample />, mainElement);

      ```


      ### Payment Request

      #### Example integration


      ```html

      <button id="payment-request-button">Make Payment Request $ 1.00</button>

      <!-- Load the required components. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/payment-request.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var button = document.querySelector('#payment-request-button');


      if (window.PaymentRequest) {
        // This browser supports Payment Request
        // Display your Payment Request button
      } else {
        alert('Browser does not support Payment Request');
        // Browser does not support Payment Request
      }


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        if (error) {
          // handle client error here
          return;
        }

        seamlesspay.paymentRequest.create(
          {
            client: client
          },
          paymentRequestDidCreate
        );
      }


      function paymentRequestDidCreate(error, paymentRequest) {
        if (error) {
          // Handle Payment Request errors here
          return;
        }

        button.addEventListener('click', submitHandler.bind(null, paymentRequest));
      }


      function submitHandler(paymentRequest, event) {
        event.preventDefault();

        paymentRequest.tokenize(
          {
            details: {
              total: {
                label: 'Total Amount',
                amount: {
                  currency: 'USD',
                  value: '1.00'
                }
              }
            },
            options: {
              requestPayerName: true,
              requestPayerPhone: true,
              requestPayerEmail: true
            }
          },
          function(error, payload) {
            if (error) {
              // Handle errors from processing payment request
              return;
            }

            // Send payload.token to your server here
            alert(payload.token);
          }
        );
      }

      ```


      ### Card Element


      #### Example integration


      ```html

      <div class="main">
          <form id="payment-form">
            <div id="card-element"></div>
            <button id="pay">Pay $ 0.1</button>
          </form>
      </div>


      <!-- Load the required cardElement component. -->

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/4.0.0/js/card-element.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var payBtn = document.getElementById('pay');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        if (error) {
          alert(error);

          return;
        }

        seamlesspay.cardElement.create(
          {
            client: client,
            styles: {
              '.ElementsApp .InputElement': {
                color: '#007725'
              },
              '.ElementsApp .InputElement.is-invalid': {
                color: '#ff8401'
              }
            },
            selector: '#card-element'
          },
          cardElementDidCreate
        );
      }


      function cardElementDidCreate(error, cardElement) {
        if (error) {
          alert(error);

          return;
        }

        cardElement.on('change', function (event) {
          console.info(event.emittedBy + ' has been changed');
        });

        payBtn.addEventListener('click', submitHandlerPay.bind(null, cardElement));
      }


      function submitHandlerPay(cardElement, event) {
        event.preventDefault();

        cardElement.tokenize(function(error, payload) {
          if (!error) {
            // This is where you would submit payload.token to your server
            alert(`Submit token ${payload.token} to your server here!`);
          } else {
            alert(error)
          }
        });
      }

      ```
  - name: GeneralErrorCodes
    x-displayName: General Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                       | Type\t    | Description\n-----------------------------------------------|------------|--------------------------------------\n`INSTANTIATION_OPTION_REQUIRED`                | `MERCHANT` | Occurs when a component is created that is missing a required option.\n`INVALID_OPTION`                               | `MERCHANT` | Occurs when a component is consuming unsupported option.\n`INCOMPATIBLE_VERSIONS`                        | `MERCHANT` | Occurs when a component is created with a client with a different version than the component.\n"
  - name: SeamlessPayCoreFramework
    x-displayName: SeamlessPayCore Framework
    description: >

      The SeamlessPay iOS SDK makes it quick and easy to build an excellent
      payment experience in your iOS app. We provide powerful elements that can
      be used out-of-the-box to collect your users’ payment details. We also
      expose the low-level APIs that power those UIs so that you can build fully
      custom experiences.


      We provide low-level SPAPIClient that correspond to objects and methods in
      the SeamlessPay API. You can build your own entirely custom UI on top of
      this layer, while still taking advantage of utilities from SeamlessPayCore
      framework.


      We provide native element to collect payment. SPPaymentCardTextField is a
      text field with similar properties to UITextField, but specialized for
      collecting credit/debit card information. It manages multiple UITextFields
      under the hood to collect this information. It’s designed to fit on a
      single line, and from a design perspective can be used anywhere a
      UITextField would be appropriate. <br>


      <image aligin="center" src="/images/card-field.gif" width=400> <br>


      Requirements:

      The SeamlessPay iOS SDK requires Xcode 10.1 or later and is compatible
      with apps targeting iOS 9 or above.
  - name: GettingStartedSDKiOS
    x-displayName: Getting Started
    description: >

      SeamlessPayCore is available through CocoaPods. To install, simply add the
      following line to your Podfile:

      ```javascript

      pod 'SeamlessPayCore'

      ```


      When your app starts, configure the SDK with your SeamlessPay publishable
      (you can get it on the API Keys page), so that it can make requests to the
      SeamlessPay API.


      Using only Publishable Key for a single page apps without their own
      backend. In this case you will be able to do `/charge` only.<br/>

      Using a Secret Key allows you using all transaction's methods (e.g.
      `/charge`, `/refund`, `/void`).


      #### Objective-C:

      ```javascript
        AppDelegate.m
          #import "AppDelegate.h"
          @import SeamlessPayCore;

          @implementation AppDelegate
          - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
              [[SPAPIClient getSharedInstance]
                setSecretKey:@"sk_XXXXXXXXXXXXXXXXXXXXXXXXXX" // can be nil
                publicKey:@"pk_XXXXXXXXXXXXXXXXXXXXXXXXXX"
                sandbox:TRUE];
              // do any other necessary launch configuration
              return TRUE;
          }
          @end
      ```

      #### Swift:

      ```swift
        import SeamlessPayCore

        @UIApplicationMain
        class AppDelegate: UIResponder, UIApplicationDelegate {
            func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
                // Override point for customization after application launch.

                SPAPIClient.getSharedInstance()?.setSecretKey(@"sk_XXXXXXXXXXXXXXXXXXXXXXXXXX", // can be nil
                                                              publishableKey: "pk_XXXXXXXXXXXXXXXXXXXXXXXXXX",
                                                              sandbox: true)

                return true
            }
        }
      ```
  - name: CreatePaymentForm
    x-displayName: Create Payment Form
    description: >

      Securely collect card information on the client with
      SPPaymentCardTextField, a drop-in UI component provided by the SDK.

      Create an instance of the card component and a Pay button with the
      following code:


      #### Objective-C:


      ```javascript
        CheckoutViewController.m

        #import "CheckoutViewController.h"
        @import SeamlessPayCore;

        @interface CheckoutViewController ()
        @property (weak) SPPaymentCardTextField *cardTextField;
        @property (weak) UIButton *payButton;
        @end

        @implementation CheckoutViewController

        - (void)viewDidLoad {
            [super viewDidLoad];
            self.view.backgroundColor = [UIColor whiteColor];
            SPPaymentCardTextField *cardTextField = [[SPPaymentCardTextField alloc] init];
            self.cardTextField = cardTextField;
            UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
            button.layer.cornerRadius = 5;
            button.backgroundColor = [UIColor systemBlueColor];
            button.titleLabel.font = [UIFont systemFontOfSize:22];
            [button setTitle:@"Pay" forState:UIControlStateNormal];
            [button addTarget:self action:@selector(pay) forControlEvents:UIControlEventTouchUpInside];
            self.payButton = button;
            UIStackView *stackView = [[UIStackView alloc] initWithArrangedSubviews:@[cardTextField, button]];
            stackView.axis = UILayoutConstraintAxisVertical;
            stackView.translatesAutoresizingMaskIntoConstraints = FALSE;
            stackView.spacing = 20;
            [self.view addSubview:stackView];
            [NSLayoutConstraint activateConstraints:@[
                [stackView.leftAnchor constraintEqualToSystemSpacingAfterAnchor:self.view.leftAnchor multiplier:2],
                [self.view.rightAnchor constraintEqualToSystemSpacingAfterAnchor:stackView.rightAnchor multiplier:2],
                [stackView.topAnchor constraintEqualToSystemSpacingBelowAnchor:self.view.topAnchor multiplier:20],
            ]];
        }

        - (void)pay {

            NSString *cardNumber = _cardTextField.cardNumber;
            NSString *exp = _cardTextField.formattedExpirationDate;
            NSString *cvc = _cardTextField.cvc;
            NSString *zip = _cardTextField.postalCode;

            NSLog(@"%@ %@ %@ %@",cardNumber,exp,cvc,zip);
        }
        @end
      ```

      #### Swift:


      ```javascript
        CheckoutViewController.swift

        import UIKit

        import SeamlessPayCore

        class ViewController: UIViewController {
            lazy var cardTextField: SPPaymentCardTextField = {
                let cardTextField = SPPaymentCardTextField()
                return cardTextField
            }()

            lazy var payButton: UIButton = {
                let button = UIButton(type: .custom)
                button.layer.cornerRadius = 5
                button.backgroundColor = .systemBlue
                button.titleLabel?.font = UIFont.systemFont(ofSize: 22)
                button.setTitle("Pay", for: .normal)
                button.addTarget(self, action: #selector(pay), for: .touchUpInside)
                return button
            }()

            override func viewDidLoad() {
                super.viewDidLoad()
                // Do any additional setup after loading the view.

                view.backgroundColor = .white
                let stackView = UIStackView(arrangedSubviews: [cardTextField, payButton])
                stackView.axis = .vertical
                stackView.spacing = 20
                stackView.translatesAutoresizingMaskIntoConstraints = false
                view.addSubview(stackView)
                NSLayoutConstraint.activate([
                    stackView.leftAnchor.constraint(equalToSystemSpacingAfter: view.leftAnchor, multiplier: 2),
                    view.rightAnchor.constraint(equalToSystemSpacingAfter: stackView.rightAnchor, multiplier: 2),
                    stackView.topAnchor.constraint(equalToSystemSpacingBelow: view.topAnchor, multiplier: 20),
                ])
            }

            @objc
            func pay() {
                // ...
            }
        }
      ```
  - name: CreatePaymentMethod
    x-displayName: Create Payment Method and Charge
    description: "\nWhen the user taps the pay button, convert the card information collected by SPPaymentCardTextField into a PaymentMethod token. Tokenization ensures that no sensitive card data ever needs to touch your server, so that your integration remains PCI compliant. After the client passes the token, pass its identifier as the source to create a charge:\n\n#### Objective-C:\n\n```javascript\n  - (void)pay {\n\n    [[SPAPIClient getSharedInstance] createPaymentMethodWithType:@\"credit_card\"\n        account:self.cardTextField.cardNumber\n        expDate:self.cardTextField.formattedExpirationDate\n        cvv:self.cardTextField.cvc\n        accountType:nil\n        routing:nil\n        pin:nil\n        address:nil\n        address2:nil\n        city:nil\n        country:nil\n        state:nil\n        zip:self.cardTextField.postalCode\n        company:nil\n        email:nil\n        phone:nil\n        name:@\"IOS test\"\n        nickname:nil\n        verification : TRUE\n        success:^(SPPaymentMethod *paymentMethod) {\n          [[SPAPIClient getSharedInstance]\n              createChargeWithToken:paymentMethod.token\n              cvv:self.cardTextField.cvc\n              capture: TRUE\n              currency:nil\n              amount:@\"1\"\n              taxAmount:nil\n              taxExempt: FALSE\n              tip:nil\n              surchargeFeeAmount:nil\n              description:@\"\"\n              order:nil\n              orderId:nil\n              poNumber:nil\n              metadata:nil\n              descriptor:nil\n              txnEnv:nil\n              achType:nil\n              idempotencyKey:nil\n              needSendReceipt:false\n              success:^(SPCharge *charge) {\n\n                // Success Charge:\n\n                NSString *success = [NSString\n                    stringWithFormat:@\"Amount: $%@\\nStatus: %@\\nStatus message: \"\n                                     @\"%@\\ntxnID #: %@\",\n                                     charge.amount, charge.status,\n                                     charge.statusDescription, charge.chargeId];\n\n              }\n              failure:^(SPError *error) {\n\n               // Handle the error\n\n                NSString *err = [error localizedDescription];\n\n              }];\n        }\n        failure:^(SPError *error) {\n\n        \t// Handle the error\n\n          NSString *err = [error localizedDescription];\n\n        }];\n  }\n```\n### Swift:\n```swift\n  @objc\n      func pay() {\n          SPAPIClient.getSharedInstance()?.createPaymentMethod(\n              withType: \"credit_card\",\n              account: cardTextField.cardNumber,\n              expDate: cardTextField.formattedExpirationDate,\n              cvv: self.cardTextField.cvc,\n              accountType: nil,\n              routing: nil,\n              pin: nil,\n              address: nil,\n              address2: nil,\n              city: nil,\n              country: nil,\n              state: nil,\n              zip: cardTextField.postalCode,\n              company: nil,\n              email: nil,\n              phone: nil,\n              name: nil,\n              nickname: nil,\n              verification: true,\n              success: { (paymentMethod: SPPaymentMethod?) in\n\n                  let token = paymentMethod?.token\n\n                  SPAPIClient.getSharedInstance()?.createCharge(\n                      withToken: token!,\n                      cvv: self.cardTextField.cvc,\n                      capture: true,\n                      currency: nil,\n                      amount: \"1\",\n                      taxAmount: nil,\n                      taxExempt: false,\n                      tip: nil,\n                      surchargeFeeAmount: nil,\n                      description: nil,\n                      order: nil,\n                      orderId: nil,\n                      poNumber: nil,\n                      metadata: nil,\n                      descriptor: nil,\n                      txnEnv: nil,\n                      achType: nil,\n                      idempotencyKey: nil,\n                      needSendReceipt: false,\n                      success: { (charge: SPCharge?) in\n\n                          // Success Charge:\n                          print(charge?.chargeId ?? \"charge is nil\")\n\n                      }, failure: { (error: SPError?) in\n\n                          // Handle the error\n                          print(error?.localizedDescription ?? \"\")\n                          return\n                      }\n                  )\n\n              }, failure: { (error: SPError?) in\n\n                  // Handle the error\n                  print(error?.localizedDescription ?? \"\")\n                  return\n              }\n          )\n      }\n```\nStart with <a href=\"https://github.com/seamlesspay/seamlesspay-ios/tree/dev/Example\" target=\"_blank\">'Demo APP'</a> for sample on basic setup and usage.\n"
  - name: ApplePaySDKiOS
    x-displayName: Apple Pay
    description: >

      <h2>Make payments with Apple Pay on your iPhone, iPad, and Apple Watch
      secure.</h2>


      SeamlessPay users can accept Apple Pay on iOS apps on iOS 9 and above, and
      on the web on Safari starting with iOS 10 or macOS Sierra.

      There are no additional fees for processing Apple Pay payments, and prices
      are the same as for other card transactions.


      Apple Pay is compatible with most SeamlessPay products and features. Use
      it to accept payments for physical or digital items, donations,
      subscriptions, and more (You can't use Apple Pay instead of in-app
      purchases, however).


      Apple Pay is available to cardholders at participating banks in supported
      countries. Please refer to the documentation of [Apple participating
      banks](https://support.apple.com/en-us/ht204916) to find out which banks
      and countries are supported.


      ### Using SeamlessPay and Apple Pay versus in-app purchases

      Apple Pay does not replace the Apple [In-App Purchase
      API](https://developer.apple.com/in-app-purchase). You can use any of the
      SeamlessPay-supported payment methods and Apple Pay in your iOS app to
      sell physical goods (such as groceries and apparel) or services your
      business provides (such as club memberships and hotel reservations). These
      payments are processed through Seamlesspay and you only need to pay a
      processing fee.


      Apple [developer
      terms](https://developer.apple.com/app-store/review/guidelines/) requires
      their In-App Purchase API to be used for digital “content, features, or
      services,” such as premium content for your app or digital content
      subscriptions. Payments made using the In-App Purchase API are processed
      by Apple and are subject to transaction fees.


      ### Accept Apple Pay

      SeamlessPay offers a variety of ways to add Apple Pay as a payment method.
      For integration details, select your preferred method.


      With the SeamlessPay iOS SDK, you can accept both Apple Pay and
      traditional credit card payments. Before you get started, you need to sign
      up for the [Apple Developer Program](https://developer.apple.com/programs)
      and set up Seamlesspay on your server and your app. Then follow these
      steps:


      ### 1. Register for an Apple Seller ID

      Get an Apple Merchant ID by [registering for a new
      ID](https://developer.apple.com/account/resources/identifiers/add/merchant)
      on the Apple Developer website.


      Fill out the form with a description and ID. Your description is for your
      own records and you can change it in the future. SeamlessPay recommends
      using your app name as the identifier (for example,
      ``merchant.com.{{YOUR_APP_NAME}}``).


      ### 2. Create a new Apple Pay certificate

      Create a certificate for your payment encryption app.


      In [Apple Pay
      preferences](https://portal.seamlesspay.com/settings#applePay), click `Add
      new application`.


      ### 3. Integrate with Xcode

      Add Apple Pay to your app. In Xcode, open your project preferences, click
      the `Signing & Opportunities` tab, and add the Apple Pay Opportunity.

      At this point, you may be prompted to sign in to your developer account.
      Select the merchant ID you created earlier and your app is ready to accept
      Apple Pay.


      <image align="center" src="/images/apple-pay-xcode.png" width=1000> <br>


      ### 4. Check if Apple Pay is supported

      Before displaying Apple Pay as a payment option in your app, determine if
      the user’s device supports Apple Pay and that they have a card added to
      their wallet:


      #### Swift:

      ```swift
        CheckoutViewController.swift

        import SeamlessPayCore
        import PassKit

        class CheckoutViewController: UIViewController, SPApplePayContextDelegate {
            let applePayButton: PKPaymentButton = PKPaymentButton(paymentButtonType: .plain, paymentButtonStyle: .black)

            override func viewDidLoad() {
                super.viewDidLoad()
                // Check if the customer can pay with Apple Pay
                applePayButton.isHidden = !SPAPIClient.deviceSupportsApplePay()
                applePayButton.addTarget(self, action: #selector(handleApplePayButtonTapped), for: .touchUpInside)
            }

            // ...
        }
      ```

      #### Objective-C:

      ```javascript
        CheckoutViewController.m

        @import SeamlessPayCore;
        #import <PassKit/PassKit.h>

        @interface CheckoutViewController () <SPApplePayContextDelegate>
        @property (nonatomic) PKPaymentButton *applePayButton;
        @end

        @implementation CheckoutViewController

        - (void)viewDidLoad {
            [super viewDidLoad];

            // Check if the customer can pay with Apple Pay
            self.applePayButton.hidden = ![SPAPIClient deviceSupportsApplePay];
            [self.applePayButton addTarget:self action:@selector(handleApplePayButtonTapped) forControlEvents:UIControlEventTouchUpInside];
        }
      ```


      ### 5. Create the payment method

      When the user taps the Apple Pay button, call SPAPIClient
      paymentRequestWithMerchantIdentifier:country:currency: to create a
      [PKPaymentRequest](https://developer.apple.com/documentation/passkit/pkpaymentrequest).


      Then, configure the Payment Method to display your business name and the
      total. You can also collect information like billing details or shipping
      information.


      See [Apple’s
      documentation](https://developer.apple.com/design/human-interface-guidelines/apple-pay/overview/checkout-and-payment/#customize-the-payment-sheet)
      for a complete guide to setting up a payment request.


      #### Swift:

      ```swift
        CheckoutViewController.swift

        func handleApplePayButtonTapped() {
            let merchantIdentifier = "merchant.com.your_app_name"
            let paymentRequest = SPAPIClient.paymentRequest(withMerchantIdentifier: merchantIdentifier, country: "US", currency: "USD")

            // Configure the payment request
            paymentRequest.paymentSummaryItems = [
                // The last line should represent your company;
                // it'll start with the word "Pay" (i.e. "Pay Merch, Inc $45")
                PKPaymentSummaryItem(label: "Merch, Inc", amount: 45.00),
            ]

            // ...next step
        }
      ```


      #### Objective-C:

      ```javascript
        CheckoutViewController.m

        - (void)handleApplePayButtonTapped {
            NSString *merchantIdentifier = @"merchant.com.your_app_name";
            PKPaymentRequest *paymentRequest = [SPAPIClient paymentRequestWithMerchantIdentifier:merchantIdentifier country:@"US" currency:@"USD"];

            paymentRequest.paymentSummaryItems = @[
                // The last line should represent your company;
                // it'll start with the word "Pay" (i.e. "Pay Merch, Inc $45")
                [PKPaymentSummaryItem summaryItemWithLabel:@"Merch, Inc" amount:[NSDecimalNumber decimalNumberWithString:@"45.00"]],
            ];

            // ...next step
        }
      ```


      ### 6. Present the payment sheet

      Create an ``SPApplePayContext`` instance with the ``PKPaymentRequest`` and
      use it to present the Apple Pay sheet:


      #### Swift:

      ```swift
        CheckoutViewController.swift

        func handleApplePayButtonTapped() {
          // ...previous step

          // Initialize an SPApplePayContext instance
          if let applePayContext = SPApplePayContext(paymentRequest: paymentRequest, delegate: self) {
              // Present Apple Pay payment sheet
              applePayContext.presentApplePay(on: self)
          } else {
              // Something wrong with your Apple Pay configuration
          }
        }
      ```


      #### Objective-C:

      ```javascript
        CheckoutViewController.m

        - (void)handleApplePayButtonTapped {
          // ...previous step

          // Initialize an SPApplePayContext instance
          SPApplePayContext *applePayContext = [[SPApplePayContext alloc] initWithPaymentRequest:paymentRequest delegate:self];
          if (applePayContext) {
              // Present Apple Pay payment sheet
              [applePayContext presentApplePayOnViewController:self completion:nil];
          } else {
              // Something wrong with your Apple Pay configuration
          }
        }
      ```


      ### 6. Submit the payment to SeamlessPay

      #### Server-side

      Submit the payment.


      ````

      $ curl https://pan-vault.seamlesspay.com/tokens \
        -H "Authorization: Bearer {PUBLISHABLE_API_KEY}" \
        -d "paymentType"="credit_card" \
        -d "appleToken"="ApplePayPaymentToken"
      ````


      #### Client-side

      ##### Payment Processing

      Implement applePayContext:didCreatePaymentMethod:completion: to call the
      completion block with the client secret retrieved from the endpoint above.


      After you call the completion block, SPApplePayContext completes the
      payment, dismisses the Apple Pay sheet, and calls
      applePayContext:didCompleteWithStatus:error: with the status of the
      payment. Implement this method to show a receipt to your customer.


      #### Swift:

      ```swift
        CheckoutViewController.swift

        extension CheckoutViewController {
          func applePayContext(_ context: SPApplePayContext, didCreatePaymentMethod paymentMethod: SPPaymentMethod, paymentInformation: PKPayment, completion: @escaping SPIntentClientSecretCompletionBlock) {
              let clientSecret = ... // Retrieve the client secret from your backend (see Server-side step above)
              // Call the completion block with the client secret or an error
              completion(clientSecret, error);
          }

          func applePayContext(_ context: SPApplePayContext, didCompleteWith status: SPPaymentStatus, error: Error?) {
                switch status {
              case .success:
                  // Payment succeeded, show a receipt view
                  break
              case .error:
                  // Payment failed, show the error
                  break
              case .userCancellation:
                  // User cancelled the payment
                  break
              @unknown default:
                  fatalError()
              }
          }
        }
      ```

      #### Objective-C:

      ```javascript
        #pragma mark - SPApplePayContextDelegate

        - (void)applePayContext:(SPApplePayContext *)context didCreatePaymentMethod:(SPPaymentMethod *)paymentMethod paymentInformation:(PKPayment *)paymentInformation completion:(SPIntentClientSecretCompletionBlock)completion {
            NSString *clientSecret = ... // Call your backend to create a PaymentIntent (see Server-side step above) and get its client secret
            // Call the completion block with the client secret or an error
            completion(clientSecret, error);
        }

        - (void)applePayContext:(SPApplePayContext *)context didCompleteWithStatus:(SPPaymentStatus)status error:(NSError *)error {
            switch (status) {
                case SPPaymentStatusSuccess:
                    // Payment succeeded, show a receipt view
                    break;

                case SPPaymentStatusError:
                    // Payment failed, show the error
                    break;

                case SPPaymentStatusUserCancellation:
                    // User cancelled the payment
                    break;
            }
        }
      ```

      Finally, handle post-payment events to do things like sending an order
      confirmation email to your customer, logging the sale in a database, or
      starting a shipping workflow.


      #### Client-side

      ##### Payment Processing (Server-side confirmation)

      Implement applePayContext:didCreatePaymentMethod:completion: to send
      paymentMethod.seamlesspayId to your server and create and confirm the
      PaymentIntent. Next, call the completion block with the PaymentIntent
      client secret returned from your server.


      After you call the completion block, SPApplePayContext completes the
      payment, dismisses the Apple Pay sheet, and calls
      applePayContext:didCompleteWithStatus:error: with the status of the
      payment. Implement this method to show a receipt to your customer.


      #### Swift:

      ```swift
        CheckoutViewController.swift
        extension CheckoutViewController {
          func applePayContext(_ context: SPApplePayContext, didCreatePaymentMethod paymentMethod: SPPaymentMethod, paymentInformation: PKPayment, completion: @escaping SPIntentClientSecretCompletionBlock) {
              let clientSecret = ... // Call your backend to create and confirm a PaymentIntent and get its client secret
              // Call the completion block with the client secret or an error
              completion(clientSecret, error);
          }
          func applePayContext(_ context: SPApplePayContext, didCompleteWith status: SPPaymentStatus, error: Error?) {
                switch status {
              case .success:
                  // Payment succeeded, show a receipt view
                  break
              case .error:
                  // Payment failed, show the error
                  break
              case .userCancellation:
                  // User cancelled the payment
                  break
              @unknown default:
                  fatalError()
              }
          }
        }
      ```


      #### Objective-C:

      ```javascript
        CheckoutViewController.m
        #pragma mark - SPApplePayContextDelegate
        - (void)applePayContext:(SPApplePayContext *)context didCreatePaymentMethod:(SPPaymentMethod *)paymentMethod paymentInformation:(PKPayment *)paymentInformation completion:(SPIntentClientSecretCompletionBlock)completion {
            NSString *clientSecret = ... // Call your backend to create and confirm a PaymentIntent and get its client secret
            // Call the completion block with the client secret or an error
            completion(clientSecret, error);
        }
        - (void)applePayContext:(SPApplePayContext *)context didCompleteWithStatus:(SPPaymentStatus)status error:(NSError *)error {
            switch (status) {
                case SPPaymentStatusSuccess:
                    // Payment succeeded, show a receipt view
                    break;
                case SPPaymentStatusError:
                    // Payment failed, show the error
                    break;
                case SPPaymentStatusUserCancellation:
                    // User cancelled the payment
                    break;
            }
        }
      ```


      #### Troubleshooting

      If you see errors in the SeamlessPay API when you try to generate tokens,
      chances are you have a problem with your Apple Pay certificate. You will
      need to generate a new certificate and upload it to SeamlessPay as
      described on this page. Make sure you are using the CSR from your
      dashboard and not the one you created yourself. Xcode often caches old
      certificates incorrectly, so in addition to generating a new certificate,
      SeamlessPay also recommends creating a new Apple Merchant ID.


      If you get an error:

      ``
        You have not added your Apple Seller account to SeamlessPay.
      ``


      it is likely that your application is sending data encrypted with a
      previous (non-SeamlessPay) CSR / certificate. Make sure all
      non-SeamlessPay CSR generated certificates are revoked under your Apple
      Seller ID. If that doesn't fix the issue, please delete the Merchant ID
      from your Apple Account and recreate it. Then create a new certificate
      based on the same CSR that you used previously. You don't need to upload
      this new certificate to SeamlessPay. When finished, turn on and off Apple
      Pay credentials in your app so that they update as expected.


      ### Recurring payments

      You can use Apple Pay tokens to create one-time payments or subscriptions.
      For non-subscription repeat purchases, SeamlessPay recommends creating
      one-time tokens. Your customer must authenticate with Apple Pay every time
      - trying to reuse payment information without signing up may result in it
      being rejected.


      ### Testing

      SeamlessPay Test Card information cannot be saved to Wallet on iOS.
      Instead, SeamlessPay recognizes when you are using your test [API
      keys](https://docs.seamlesspay.com/2020-08-01#section/Authentication) and
      returns you a successful test card token. This allows you to make test
      payments with a valid card without being charged.
  - name: SeamlessPayCoreFrameworkAndroid
    x-displayName: API Client
    description: >

      Welcome to SeamlessPay Android SDK. This library will help you accept card
      and alternative payments in your Android app.


      SeamlessPay Android SDK is available for Android SDK >= 21.


      ### Adding It To Your Project


      Add the dependency in your build.gradle:

      ```swift
        dependencies {
          implementation 'com.seamlesspay.api:Client:1.0.5'
        }
      ```
  - name: Authentication
    x-displayName: Authentication
    description: |

      ```swift
        import com.seamlesspay.api.SeamlesspayFragment;
        import com.seamlesspay.api.Authorization;

        public class CardActivity ...

        Authorization authorization = Authorization.fromKeys(
                            "sandbox",
                            "pk_XXXXXXXXXXXXXXXXXXXXXXXXXX");

        mSeamlesspayFragment = SeamlesspayFragment.newInstance(this, authorization);
      ```
  - name: SingleField
    x-displayName: Single Field
    description: >
      Singlefield widget drop-in UI component provided by the SDK.


      ### Adding It To Your Project

      Add the dependency in your ```build.gradle```:

      ```swift
        dependencies {
            implementation 'com.seamlesspay.ui:Singlefield:1.0.1'
        }
      ```


      ### Usage

      Create an instance of the card component and a Pay button by adding the
      following to your checkout page’s layout:

      ```swift
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout
                xmlns:android="http://schemas.android.com/apk/res/android"
                xmlns:tools="http://schemas.android.com/tools"
                xmlns:app="http://schemas.android.com/apk/res-auto"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                app:layout_behavior="@string/appbar_scrolling_view_behavior"
                tools:showIn="@layout/activity_checkout"
                tools:context=".CardActivity">

            <!--  ...  -->

            <com.seamlesspay.ui.view.CardInputWidget
                    android:id="@+id/cardInputWidget"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginLeft="20dp"
                    android:layout_marginRight="20dp"/>

            <Button
                    android:text="Pay"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:id="@+id/payButton"
                    android:layout_marginTop="20dp"
                    app:layout_constraintTop_toBottomOf="@+id/cardInputWidget"
                    app:layout_constraintStart_toStartOf="@+id/cardInputWidget"
                    app:layout_constraintEnd_toEndOf="@+id/cardInputWidget"/>

            <!--  ...  -->

        </androidx.constraintlayout.widget.ConstraintLayout>
      ```

      ### To access the values in the form, there are getters for each field:

      ```swift
        @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);

                Button payButton = findViewById(R.id.payButton);
                mCardInputWidget = (CardInputWidget) findViewById(R.id.cardInputWidget);
                mCardInputWidget.configureForUs();

                payButton.setOnClickListener(new View.OnClickListener() {
                            public void onClick(View v) {
                                // Code here executes on main thread after user presses button
                                mCardInputWidget.clearFocus();

                                CardBuilder cardBuilder = new CardBuilder()
                                        .accountNumber(mCardInputWidget.getCardNumber())
                                        .expirationMonth(mCardInputWidget.getExpirationMonth())
                                        .expirationYear(mCardInputWidget.getExpirationYear())
                                        .setpaymentType(CardBuilder.Keys.CREDIT_CARD_TYPE)
                                        .postalCode(mCardInputWidget.getPostalCode())
                                        .cvv(mCardInputWidget.getCvv())
                                        .verification(true);

                                PanVault.tokenize(mSeamlesspayFragment, cardBuilder);
                            }
                        });
      ```


      ### Example

      <image aligin="center" src="/images/singlefield.gif" width=400> <br>

      Start with <a
      href="https://github.com/seamlesspay/seamlesspay-android/tree/master/DemoSingleField"
      target="_blank">'DemoSinglefield APP'</a> for sample on basic setup and
      usage.
  - name: CardForm
    x-displayName: Card Form
    description: >

      Card Form is a ready made card form layout that can be included in your
      app making it easy to accept credit and debit cards.


      ### Adding It To Your Project


      Add the dependency in your build.gradle:

      ```swift
        dependencies {
          implementation 'com.seamlesspay.sdk:CardForm:1.0.1'
        }
      ```

      ### Usage


      Card Form is a LinearLayout that you can add to your layout:

      ```swift
        <com.seamlesspay.cardform.view.CardForm
        android:id="@+id/card_form"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
      ```

      To initialize the view and change which fields are required for the user
      to enter, use the required field methods and
      ```CardForm#setup(AppCompatActivity activity)```.

      ```swift
        CardForm cardForm = (CardForm) findViewById(R.id.card_form);
        cardForm.cardRequired(true)
        .expirationRequired(true)
        .cvvRequired(true)
        .postalCodeRequired(true)
        .mobileNumberRequired(false)
        .actionLabel(getString(R.string.purchase))
        .setup(activity);
      ```

      To access the values in the form, there are getters for each field:

      ```swift
        cardForm.getCardNumber();
        cardForm.getExpirationMonth();
        cardForm.getExpirationYear();
        cardForm.getCvv();
        cardForm.getPostalCode();
      ```

      To check if ```CardForm``` is valid call ```CardForm#isValid()```. To
      validate each required field and show the user which fields are incorrect,
      call ```CardForm#validate()```.

      To set custom error messages on a field call
      ```CardForm#setCardNumberError(String)``` on the given field.


      Additionally ```CardForm``` has 4 available listeners:

      - ```CardForm#setOnCardFormValidListener``` called when the form changes
      state from valid to invalid or invalid to valid.

      - ```CardForm#setOnCardFormSubmitListener``` called when the form should
      be submitted.

      - ```CardForm#setOnFormFieldFocusedListener``` called when a field in the
      form is focused.

      - ```CardForm#setOnCardTypeChangedListener``` called when the CardType in
      the form changes.


      <image aligin="center" src="/images/androidSDK.png" width=400> <br>
  - name: CreateToken
    x-displayName: Create Token
    description: >
      Create the token of given payment data. To access the values in the form,
      there are getters for each field

      ```swift
        CardBuilder cardBuilder = new CardBuilder()
                          .accountNumber(mCardForm.getCardNumber())
                          .expirationMonth(mCardForm.getExpirationMonth())
                          .expirationYear(mCardForm.getExpirationYear())
                          .setpaymentType(CardBuilder.Keys.CREDIT_CARD_TYPE)
                          .postalCode(mCardForm.getPostalCode())
                          .cvv(mCardForm.getCvv())
                          .verification(true);

                    PanVault.tokenize(activity, cardBuilder);
      ```

      Available listener:

      - ```PaymentMethodTokenCreatedListener``` called when the
      ```PaymentMethodToken``` getting card token.
  - name: CreateCharge
    x-displayName: Create a Charge
    description: >
      ```swift
        CardChargeBulder chargeBulder = new CardChargeBulder()
                        .setAmount("1")
                        .setCurrency(CardChargeBulder.Keys.CURRENCY_USD)
                        .setCapture(true)
                        .setToken(token.getToken())
                        .setDescription("Demo Android Client Charge")
                        .setCvv(mCardForm.getCvv());

                  Charge.create(activity, chargeBulder);
      ```

      Available listener:

      - ```BaseChargeTokenCreatedListener``` called when the ```chargeToken```
      getting charge info.
  - name: CreateRefund
    x-displayName: Create a Refund
    description: >
      ```swift
        CardRefundBuilder refundBuilder = new CardRefundBuilder()
                        .setAmount("1")
                        .setCurrency(CardRefundBuilder.Keys.CURRENCY_USD)
                        .setToken(token.getToken())
                        .setDescription("Demo Android Client Refund");

                  Refund.create(activity, refundBuilder);
      ```

      Available listener:

      - ```BaseRefundTokenCreatedListener``` called when the ```refundToken```
      getting charge info.
  - name: ExamplesAndroid
    x-displayName: Examples
    description: >

      Start with <a
      href="https://github.com/seamlesspay/seamlesspay-android/tree/dev/Demo"
      target="_blank">Demo APP</a> for sample on basic setup and usage.
  - name: AccessTokens
    x-displayName: Access Tokens
x-tagGroups:
  - name: Pan Vault
    tags:
      - PanVault
  - name: Payments
    tags:
      - Charge
      - Refunds
      - Batches
      - Payouts
      - GiftCards
      - BinLookups
      - AccessTokens
  - name: Billing
    tags:
      - Invoices
      - Products
      - Plans
      - Subscriptions
      - TaxRates
      - UsageRecords
  - name: Other
    tags:
      - Customers
      - SubMerchant
      - ApplePay
      - Webhooks
servers:
  - url: https://api.seamlesspay.com
    description: Production
  - url: https://sandbox.seamlesspay.com
    description: Sandbox
paths:
  /charges:
    post:
      summary: Create a Charge
      operationId: createCharge
      tags:
        - Charge
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Charge'
      responses:
        '201':
          description: Result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Captured'
                  - $ref: '#/components/schemas/Auth'
                  - $ref: '#/components/schemas/Gift'
              examples:
                captured:
                  summary: CAPTURED
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    authCode: A11111
                    method: charge
                    order:
                      shipFromPostalCode: 99999-9999
                      shippingAddress:
                        line1: 400 Madison Ave
                        line2: 10th Fl
                        city: New York
                        state: NY
                        country: US
                        postalCode: 11111-1111
                      items:
                        - discountAmount: '20.00'
                          unitCost: '10.00'
                          unitOfMeasure: CS
                          lineNumber: '1'
                          description: DESCRIPTION-1
                          taxAmount: '5.00'
                          quantity: '12'
                          upc: UPC-1
                          lineTotal: '105.00'
                          taxExempt: false
                          taxRate: '0.05'
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    statusDescription: Transaction capture success
                    expDate: '0125'
                    paymentType: credit_card
                    paymentNetwork: Visa
                    lastFour: '1000'
                    businessCard: false
                    statusCode: captured
                    status: captured
                    batchId: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
                    surchargeFeeAmount: '1.00'
                    tip: '1.00'
                    accountType: Credit
                    transactionDate: '2020-02-24T19:43:12.730Z'
                    verification:
                      addressLine1: pass
                      addressPostalCode: pass
                      cvv: pass
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
                auth:
                  summary: AUTH
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    authCode: A11111
                    method: charge
                    order:
                      shipFromPostalCode: 99999-9999
                      shippingAddress:
                        line1: 400 Madison Ave
                        line2: 10th Fl
                        city: New York
                        state: NY
                        country: US
                        postalCode: 11111-1111
                      items:
                        - discountAmount: '20.00'
                          unitCost: '10.00'
                          unitOfMeasure: CS
                          lineNumber: '1'
                          description: DESCRIPTION-1
                          taxAmount: '5.00'
                          quantity: '12'
                          upc: UPC-1
                          lineTotal: '105.00'
                          taxExempt: false
                          taxRate: '0.05'
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    statusDescription: Transaction approved
                    expDate: '0125'
                    paymentType: credit_card
                    paymentNetwork: Visa
                    lastFour: '1000'
                    businessCard: false
                    statusCode: approved
                    status: authorized
                    surchargeFeeAmount: '1.00'
                    tip: '1.00'
                    accountType: Credit
                    transactionDate: '2020-02-24T19:43:12.730Z'
                    verification:
                      addressLine1: pass
                      addressPostalCode: pass
                      cvv: pass
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
                gift_card:
                  summary: GIFT CARD
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    authCode: A11111
                    method: charge
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    paymentType: gift_card
                    lastFour: '1000'
                    statusDescription: Transaction settled
                    statusCode: settled
                    status: settled
                    transactionDate: '2020-02-24T19:43:12.730Z'
                    verification:
                      addressLine1: pass
                      addressPostalCode: pass
                      cvv: pass
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Charges
      operationId: listCharges
      tags:
        - Charge
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCharges'
        '401':
          $ref: '#/components/responses/401'
  /charges/{transaction_id}:
    get:
      summary: Retrieve a Charge
      operationId: retrieveCharge
      tags:
        - Charge
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Charge'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Charge
      operationId: updateCharge
      tags:
        - Charge
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction for update
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/UpdateTransaction'
      responses:
        '200':
          $ref: '#/components/responses/Transaction'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Void a Charge
      description: Voids requires either `idempotency key` or `transactionID`
      operationId: voidCharge
      tags:
        - Charge
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction to delete
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/Void'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /apple-pay/domains:
    post:
      summary: Register Domain
      operationId: registerDomain
      tags:
        - ApplePay
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/ApplePayDomains'
      responses:
        '200':
          $ref: '#/components/responses/ApplePayDomains'
        '401':
          $ref: '#/components/responses/401'
    get:
      summary: List Domains
      operationId: listDomains
      tags:
        - ApplePay
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/ApplePayDomains'
        '401':
          $ref: '#/components/responses/401'
  /apple-pay/domains/{domain_name}:
    delete:
      summary: Unregister Domain
      operationId: unregisterDomain
      tags:
        - ApplePay
      parameters:
        - name: domain_name
          in: path
          schema:
            type: string
          description: Domain name
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  domains:
                    type: array
                    description: Domain names list.
                example:
                  domains:
                    - test2.domain.io
          description: Success
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /checkout-sessions:
    post:
      summary: Create a Checkout Session
      operationId: createCheckoutSession
      tags:
        - Checkout
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/CheckoutSession'
      responses:
        '201':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Checkout Session ID.
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/Amount'
                    description: String with 2 decimal places e.g “25.00”.
                  checkoutId:
                    type: string
                    description: Checkout Form ID.
                  checkoutFields:
                    type: string
                    description: Default Checkout Form values.
                  meta:
                    type: object
                    description: Data pushed with transaction. For reporting purposes only.
                  createdAt:
                    type: string
                    description: Date.
                example:
                  id: CHS_01DJNFZAA730Z5RM3YSKM2908V
                  checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
                  amount: '105.00'
                  checkoutFields:
                    company: Ledner, Toy and Roob
                    billing_name: Luella King
                    billing_state: California
                    billing_city: Sofiabury
                    billing_address: 626 Maggie Divide
                    billing_address2: Apt. 441
                  meta:
                    customField: customValue
                  createdAt: '2017-12-15T19:08:18.262Z'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
      x-code-samples:
        - lang: CURL
          source: |
            curl -X POST http://localhost:3030/checkout-sessions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer {SECRET_API_KEY}" \
              -d '{ "amount": "3", "checkoutId": "CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ", "meta": { "customField": "customValue" } }'
  /gift-cards/{accountNumber|token}/load:
    patch:
      summary: Load Gift Card
      description: Credit only apply to `gift_card` transactions
      operationId: createCredit
      tags:
        - GiftCards
      parameters:
        - name: accountNumber or token
          in: path
          description: Gift card account number or token
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Credit'
      responses:
        '201':
          $ref: '#/components/responses/Credit'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /refunds:
    post:
      summary: Create a Refund
      operationId: createRefund
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Refund'
      responses:
        '201':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Refunds
      operationId: listRefunds
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllRefund'
        '401':
          $ref: '#/components/responses/401'
  /refunds/{transaction_id}:
    get:
      summary: Retrieve a Refund
      operationId: retrieveRefund
      tags:
        - Refunds
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Refund
      operationId: updateRefund
      tags:
        - Refunds
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction for update
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRefund'
      responses:
        '200':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /capture:
    post:
      summary: Create a Capture
      operationId: createCapture
      tags:
        - Captures
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '201':
          $ref: '#/components/responses/Capture'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
      x-code-samples:
        - lang: JavaScript
          source: |
            var seamlesspay_rest_api = require('seamlesspay_rest_api');
            var defaultClient = seamlesspay_rest_api.ApiClient.instance;

            // Configure API key authorization: ApiKey
            var ApiKey = defaultClient.authentications['ApiKey'];
            ApiKey.apiKey = "YOUR API KEY";

            var api = new seamlesspay_rest_api.TransactionsApi();

            api.createCapture(CaptureBody).then(function(data) {
              console.log('API called successfully. Returned data: ' + data);
            }, function(error) {
              console.error(error);
            });
    get:
      summary: List Captures
      operationId: listCaptures
      tags:
        - Captures
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCaptures'
        '401':
          $ref: '#/components/responses/401'
      x-code-samples:
        - lang: JavaScript
          source: |
            var seamlesspay_rest_api = require('seamlesspay_rest_api');
            var defaultClient = seamlesspay_rest_api.ApiClient.instance;

            // Configure API key authorization: ApiKey
            var ApiKey = defaultClient.authentications['ApiKey'];
            ApiKey.apiKey = "YOUR API KEY";

            var api = new seamlesspay_rest_api.TransactionsApi();

            api.listCaptures().then(function(data) {
              console.log('API called successfully. Returned data: ' + data);
            }, function(error) {
              console.error(error);
            });
  /capture/{transaction_id}:
    get:
      summary: Retrieve a Capture
      operationId: retrieveCapture
      tags:
        - Captures
      parameters:
        - name: transaction_id
          in: path
          description: ID of Capture Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      x-code-samples:
        - lang: JavaScript
          source: |
            var seamlesspay_rest_api = require('seamlesspay_rest_api');
            var defaultClient = seamlesspay_rest_api.ApiClient.instance;

            // Configure API key authorization: ApiKey
            var ApiKey = defaultClient.authentications['ApiKey'];
            ApiKey.apiKey = "YOUR API KEY";

            var api = new seamlesspay_rest_api.TransactionsApi();

            api.retrieveCapture(captureId).then(function(data) {
              console.log('API called successfully. Returned data: ' + data);
            }, function(error) {
              console.error(error);
            });
  /void:
    post:
      summary: Create a Void
      operationId: createVoidTransaction
      tags:
        - Voids
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Void'
      responses:
        '201':
          $ref: '#/components/responses/Void'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Voids
      operationId: listVoids
      tags:
        - Voids
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllVoids'
        '401':
          $ref: '#/components/responses/401'
      x-code-samples:
        - lang: JavaScript
          source: |
            var seamlesspay_rest_api = require('seamlesspay_rest_api');
            var defaultClient = seamlesspay_rest_api.ApiClient.instance;

            // Configure API key authorization: ApiKey
            var ApiKey = defaultClient.authentications['ApiKey'];
            ApiKey.apiKey = "YOUR API KEY";

            var api = new seamlesspay_rest_api.TransactionsApi();

            api.listVoids().then(function(data) {
              console.log('API called successfully. Returned data: ' + data);
            }, function(error) {
              console.error(error);
            });
  /void/{transaction_id}:
    get:
      summary: Retrieve a Void
      operationId: retrieveVoid
      tags:
        - Voids
      parameters:
        - name: transaction_id
          in: path
          description: ID of Void Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Void'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      x-code-samples:
        - lang: JavaScript
          source: |
            var seamlesspay_rest_api = require('seamlesspay_rest_api');
            var defaultClient = seamlesspay_rest_api.ApiClient.instance;

            // Configure API key authorization: ApiKey
            var ApiKey = defaultClient.authentications['ApiKey'];
            ApiKey.apiKey = "YOUR API KEY";

            var api = new seamlesspay_rest_api.TransactionsApi();

            api.retrieveVoid(voidId).then(function(data) {
              console.log('API called successfully. Returned data: ' + data);
            }, function(error) {
              console.error(error);
            });
  /customers:
    post:
      summary: Create a Customer
      operationId: createCustomer
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '201':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Customers
      operationId: listCustomers
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCustomers'
        '401':
          $ref: '#/components/responses/401'
  /customers/{customer_id}:
    get:
      summary: Retrieve a Customer
      operationId: retrieveCustomer
      tags:
        - Customers
      parameters:
        - name: customer_id
          in: path
          schema:
            type: string
          description: ID of Customer to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Customer
      operationId: updateCustomer
      tags:
        - Customers
      parameters:
        - name: customer_id
          in: path
          schema:
            type: string
          description: ID of customer for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /submerchants:
    get:
      summary: List Sub-Merchants
      description: List Sub-Merchants
      operationId: listSubMerchants
      tags:
        - SubMerchant
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllSubMerchants'
        '401':
          $ref: '#/components/responses/401'
  /submerchants/{submerchant_id}:
    get:
      summary: Retrieve Sub-Merchant
      description: Retrieve Sub-Merchant
      operationId: retrieveSubMerchant
      tags:
        - SubMerchant
      parameters:
        - name: submerchant_id
          in: path
          schema:
            type: string
          description: ID of sub-merchant to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/SubMerchant'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /webhooks:
    get:
      summary: List Webhook Events
      description: Retrieves all Webhook Events
      operationId: listWebhooks
      tags:
        - WebhookEvents
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllWebhooksEvents'
        '401':
          $ref: '#/components/responses/401'
  /webhooks-endpoints:
    post:
      summary: Create Webhook
      description: Webhooks
      operationId: createWebhook
      tags:
        - Webhooks
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Webhook'
      responses:
        '201':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /webhooks/{webhook_id}:
    get:
      summary: Retrieve Webhook
      description: Retrieves the details of webhook
      operationId: retrieveWebhook
      tags:
        - Webhooks
      parameters:
        - name: webhook_id
          in: path
          schema:
            type: string
          description: ID of webhook to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/WebhookEvent'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /webhooks-endpoints/{webhook_endpoint_id}:
    put:
      summary: Update Webhook
      description: Update the details of webhook
      operationId: updateWebhook
      tags:
        - Webhooks
      parameters:
        - name: webhook_endpoint_id
          in: path
          schema:
            type: string
          description: ID of webhook-endpoint for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Webhook'
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /batches/{batch_id}/close:
    post:
      summary: Close a Batch
      description: Close Batch manually
      operationId: closeBatch
      tags:
        - Batches
      parameters:
        - name: batch_id
          in: path
          description: The batch ID
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/CloseBatch'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /batches:
    post:
      summary: Create a Batch
      operationId: createBatch
      tags:
        - Batches
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/BatchCreate'
        '401':
          $ref: '#/components/responses/401'
    get:
      summary: List Batches
      description: >-
        __Note__: The default response includes information about the batch. To
        include the batch\`s transactions in the response, use the `$include`
        directive in the URL, e.g.: `/batches?$include=transactions`.
      operationId: listBatches
      tags:
        - Batches
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllBatches'
        '401':
          $ref: '#/components/responses/401'
  /batches/{batch_id}:
    get:
      summary: Retrieve a Batch
      description: >-
        __Note__: The default response includes information about the batch. To
        include the batch\`s transactions in the response, use the `$include`
        directive in the URL, e.g.: `/batches/{batch_id}?$include=transactions`.
      operationId: retrieveBatch
      tags:
        - Batches
      parameters:
        - name: batch_id
          in: path
          description: ID of Batch to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Batch'
                  - $ref: '#/components/schemas/BatchIncludeTransactions'
              examples:
                default:
                  summary: default
                  value:
                    id: BCH_01BBC61W87JS2JTF2A6SZWM55K
                    batchStatus: BATCH_CLOSED
                    autoBatchTime: '10:00'
                    sales: '150.00'
                    refunds: '-30.00'
                    openedAt: '2017-12-15T19:08:18.262Z'
                    closedAt: '2017-12-15T19:08:18.262Z'
                include_transactions:
                  summary: $include=transactions
                  value:
                    id: BCH_01BBC61W87JS2JTF2A6SZWM55K
                    batchStatus: BATCH_CLOSED
                    autoBatchTime: '10:00'
                    sales: '150.00'
                    refunds: '-30.00'
                    openedAt: '2017-12-15T19:08:18.262Z'
                    closedAt: '2017-12-15T19:08:18.262Z'
                    transactions:
                      - id: TKN_01BMFGDTK30EYH9FWTXPYR50
                        accountType: Credit
                        amount: '105.00'
                        authCode: A11111
                        currency: USD
                        expDate: 01/25
                        ipAddress: 192.168.0.1
                        lastFour: '4242'
                        method: charge
                        paymentNetwork: Visa
                        statusCode: captured
                        status: captured
                        statusDescription: Transaction approved
                        surchargeFeeAmount: '1.00'
                        tip: '1.00'
                        token: TKN_01BMFGDTK30EYH9FWTXPYR50
                        transactionDate: '2020-02-24T19:43:12.730Z'
                        transactionType: sale
                        verification:
                          addressLine1: pass
                          addressPostalCode: pass
                          cvv: pass
                        createdAt: '2020-02-24T19:43:12.730Z'
                        updatedAt: '2020-02-24T19:43:12.730Z'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /payouts:
    get:
      summary: List Payouts
      description: Statistical data of payouts
      operationId: listPayouts
      tags:
        - Payouts
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllPayouts'
        '401':
          $ref: '#/components/responses/401'
  /invoices:
    post:
      summary: Create an Invoice
      operationId: createInvoice
      tags:
        - Invoices
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Invoice'
      responses:
        '201':
          $ref: '#/components/responses/Invoice'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Invoices
      description: You can list all invoices, or list the invoices for a specific customer.
      operationId: listInvoices
      tags:
        - Invoices
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllInvoices'
        '401':
          $ref: '#/components/responses/401'
  /invoices/{invoice_id}:
    get:
      summary: Retrieve an Invoice
      description: Retrieves the invoice with the given ID.
      operationId: retrieveInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Invoice'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update an Invoice
      description: >
        Draft invoices are fully editable. Once an invoice is finalized, values
        become uneditable.

        If you would like to stop the Seamlesspay from automatically finalizing
        invoice, sending reminders for, pass `autoAdvance=false`.
      operationId: updateInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of invoice for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/InvoiceUpdate'
      responses:
        '200':
          $ref: '#/components/responses/Invoice'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Delete a Draft Invoice
      description: >-
        Permanently deletes a one-off invoice draft. This cannot be undone.
        Attempts to delete invoices that are no longer in a draft state will
        fail; once an invoice has been finalized or if an invoice is for a
        subscription, it must be voided.
      operationId: deleteInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to delete
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceDraft'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /invoices/{invoice_id}/finalize:
    post:
      summary: Finalize an Invoice
      description: >
        Seamlesspay automatically finalizes drafts before sending and attempting
        payment on invoices.

        However, if you’d like to finalize a draft invoice manually, you can do
        so using this method.
      operationId: finalizeInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to finalize
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceOpen'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /invoices/{invoice_id}/pay:
    post:
      summary: Pay an Invoice
      description: Collects payment on invoice.
      operationId: payInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to pay
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/InvoicePay'
      responses:
        '201':
          $ref: '#/components/responses/Invoice'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /invoices/{invoice_id}/send:
    post:
      summary: Send an Invoice For Manual Payment
      description: >
        Send an invoice to your customer. When sending invoices that have
        already been paid, there will be no reference to the payment in the
        email.
      operationId: sendInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to send
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceOpen'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /invoices/{invoice_id}/void:
    post:
      summary: Void an Invoice
      description: >
        Mark a finalized invoice as void.

        This cannot be undone.

        Voiding an invoice is similar to deletion, however it only applies to
        finalized invoices.
      operationId: voidInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to void
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceVoided'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /invoices/{invoice_id}/mark-uncollectible:
    post:
      summary: Mark an Invoice as Uncollectible
      operationId: markUncollectibleInvoice
      tags:
        - Invoices
      parameters:
        - name: invoice_id
          in: path
          schema:
            type: string
          description: ID of Invoice to mark uncollectible
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceUncollectible'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /products:
    post:
      summary: Create a Product
      operationId: createProduct
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '201':
          $ref: '#/components/responses/Product'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Products
      operationId: listProducts
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllProducts'
        '401':
          $ref: '#/components/responses/401'
  /products/{product_id}:
    get:
      summary: Retrieve a Product
      operationId: retrieveProduct
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          schema:
            type: string
          description: ID of Product to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          schema:
            type: string
          description: ID of product for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Delete Product
      description: >-
        Remove product for the merchant associated with API key passed with the
        request. Deleting a product is only possible if it has no payment plans
        associated with it.
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          schema:
            type: string
          description: ID of Product to delete
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/Product'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /plans:
    post:
      summary: Create a Plan
      operationId: createPlan
      tags:
        - Plans
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Plan'
      responses:
        '201':
          $ref: '#/components/responses/Plan'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Plans
      operationId: listPlans
      tags:
        - Plans
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllPlans'
        '401':
          $ref: '#/components/responses/401'
  /plans/{plan_id}:
    get:
      summary: Retrieve a Plan
      operationId: retrievePlan
      tags:
        - Plans
      parameters:
        - name: plan_id
          in: path
          schema:
            type: string
          description: ID of plan to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Plan'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Plan
      operationId: updatePlan
      tags:
        - Plans
      parameters:
        - name: plan_id
          in: path
          schema:
            type: string
          description: ID of plan for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Plan'
      responses:
        '200':
          $ref: '#/components/responses/Plan'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Delete Plan
      description: >-
        Remove payment plan of product. Deleting a payment plans means new
        subscribers can’t be added. Existing subscribers aren’t affected.
      operationId: deletePlan
      tags:
        - Plans
      parameters:
        - name: plan_id
          in: path
          schema:
            type: string
          description: ID of plan to delete
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/Plan'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /subscriptions:
    post:
      summary: Create a Subscription
      operationId: createSubscription
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Subscription'
      responses:
        '201':
          $ref: '#/components/responses/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Subscriptions
      operationId: listSubscriptions
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllSubscriptions'
        '401':
          $ref: '#/components/responses/401'
  /subscriptions/{subscription_id}:
    get:
      summary: Retrieve a Subscription
      operationId: retrieveSubscription
      tags:
        - Subscriptions
      parameters:
        - name: subscription_id
          in: path
          schema:
            type: string
          description: ID of subscription to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Subscription
      operationId: updateSubscription
      tags:
        - Subscriptions
      parameters:
        - name: subscription_id
          in: path
          schema:
            type: string
          description: ID of subscription for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/UpdateSubscription'
      responses:
        '200':
          $ref: '#/components/responses/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Delete Subscription
      description: >-
        Delete and cancels a customer’s subscription immediately. The customer
        will not be charged again for the subscription.
      operationId: deleteSubscription
      tags:
        - Subscriptions
      parameters:
        - name: subscription_id
          in: path
          schema:
            type: string
          description: ID of subscription to delete
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /tax-rates:
    post:
      summary: Create a Tax Rate
      description: Creates a new tax rate.
      operationId: createTaxRate
      tags:
        - TaxRates
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/TaxRate'
      responses:
        '201':
          $ref: '#/components/responses/TaxRate'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Tax Rates
      description: Returns a list of your tax rates.
      operationId: listTaxRates
      tags:
        - TaxRates
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllTaxRates'
        '401':
          $ref: '#/components/responses/401'
  /tax-rates/{tax_rate_id}:
    get:
      summary: Retrieve a Tax Rate
      description: Retrieves a tax rate with the given ID.
      operationId: retrieveTaxRate
      tags:
        - TaxRates
      parameters:
        - name: tax_rate_id
          in: path
          schema:
            type: string
          description: ID of Tax Rate to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/TaxRate'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Tax Rate
      description: Updates an existing tax rate.
      operationId: updateTaxRate
      tags:
        - TaxRates
      parameters:
        - name: tax_rate_id
          in: path
          schema:
            type: string
          description: ID of Tax Rate for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/TaxRateUpdate'
      responses:
        '200':
          $ref: '#/components/responses/TaxRateInactive'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /subscription-item-usages:
    post:
      summary: Create a Usage Record
      description: >-
        Report customer usage and metrics for subscriptions. This action is only
        allowed for a subscription item that uses the payment plan of type
        `Metered`.
      operationId: createUsageRecord
      tags:
        - UsageRecords
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/UsageRecord'
      responses:
        '201':
          $ref: '#/components/responses/UsageRecord'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /subscription-item-usages/{usage_record_id}:
    put:
      summary: Update a Usage Record
      operationId: updateUsageRecord
      tags:
        - UsageRecords
      parameters:
        - name: usage_record_id
          in: path
          schema:
            type: string
          description: ID of usage record for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUsageRecord'
      responses:
        '200':
          $ref: '#/components/responses/UsageRecord'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /statements:
    get:
      summary: List Statements
      description: Statistical data of statements
      operationId: listStatements
      tags:
        - Statements
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllStatements'
        '401':
          $ref: '#/components/responses/401'
  /pci-audit-info:
    get:
      summary: List PCI Audit
      description: Statistical data of PCI Audit
      operationId: listPCIAudit
      tags:
        - PCIAudit
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllPCI'
        '401':
          $ref: '#/components/responses/401'
  /irs-info:
    get:
      summary: List IRS Reporting
      description: Statistical data of IRS Reporting
      operationId: listIRS
      tags:
        - IRSReporting
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllIRS'
        '401':
          $ref: '#/components/responses/401'
  /disputes:
    get:
      summary: List Disputes
      description: Statistical data of disputes
      operationId: listDisputes
      tags:
        - Disputes
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllDisputes'
        '401':
          $ref: '#/components/responses/401'
  /retrievals:
    get:
      summary: List Retrievals
      description: Retrieves all webhooks
      operationId: listRetrievals
      tags:
        - Retrievals
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllRetrievals'
        '401':
          $ref: '#/components/responses/401'
  /gift-cards:
    post:
      summary: Create Gift Card
      description: >-
        Creates a new stored value account (gift card) for the merchant
        associated with API key passed with the request.
      operationId: createGiftCard
      tags:
        - GiftCards
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/GiftCard'
      responses:
        '201':
          $ref: '#/components/responses/GiftCard'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /gift-cards/{accountNumber|token}:
    get:
      summary: Retrieve Gift Card
      description: >-
        For convenience we provide a dead simple endpoint for querying card
        information.
      operationId: retrieveGiftCard
      tags:
        - GiftCards
      parameters:
        - name: accountNumber|token
          in: path
          schema:
            type: string
          description: You must provide `accountNumber` or `token` for the requests.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/GiftCardInfo'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete Gift Card
      description: >-
        Remove stored value account (gift card) for the merchant associated with
        API key passed with the request.
      operationId: deleteGiftCard
      tags:
        - GiftCards
      parameters:
        - name: accountNumber|token
          in: path
          schema:
            type: string
          description: You must provide `accountNumber` or `token` for the requests.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '201':
          $ref: '#/components/responses/GiftCardRemove'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /bin-lookups/{BIN}:
    get:
      summary: BIN Lookups
      description: Retrieves the details of bin
      operationId: retrieveBinLookups
      tags:
        - BinLookups
      parameters:
        - name: BIN
          in: path
          schema:
            type: string
            maxLength: 6
          description: The BIN value.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      responses:
        '200':
          $ref: '#/components/responses/BinLookups'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /tokens:
    post:
      summary: Create Token
      description: >-
        Create the token of given payment data. Get token method require type of
        given object
      operationId: createToken
      servers:
        - url: https://pan-vault.seamlesspay.com
          description: Production
        - url: https://sandbox-pan-vault.seamlesspay.com
          description: Sandbox
      tags:
        - PanVault
      parameters:
        - $ref: '#/components/parameters/panVaultAuthorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/PanVault'
      responses:
        '201':
          $ref: '#/components/responses/PanVault'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /access-tokens:
    post:
      summary: Create an Access Token
      operationId: createAccessToken
      tags:
        - AccessTokens
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/AccessToken'
      responses:
        '201':
          $ref: '#/components/responses/AccessTokenCreate'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
      security:
        - ApiKey: []
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        className:
          type: string
        message:
          type: string
        name:
          type: string
    WithoutDataError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: object
    InvalidError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            data:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
                statusCode:
                  type: string
                statusDescription:
                  type: string
    Transaction:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            batchId:
              $ref: '#/components/schemas/BatchID'
            currency:
              $ref: '#/components/schemas/Currency'
            expDate:
              type: string
              description: Expiration Date
              example: '0125'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            paymentType:
              type: string
              description: Payment type
              example: credit_card
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
              example: authorized
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: approved
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction approved
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: Tip amount
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
        - $ref: '#/components/schemas/ModelsDate'
    Refund:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
              example: '{"customOption":"example"}'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            batchId:
              allOf:
                - $ref: '#/components/schemas/BatchID'
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - refund
              description: Transaction method
              example: refund
            status:
              type: string
              enum:
                - captured
                - declined
                - error
              description: Transaction status
              example: captured
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: captured
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction capture success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
    Capture:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            batchId:
              allOf:
                - $ref: '#/components/schemas/BatchID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
              example: street match
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            status:
              type: string
              enum:
                - captured
                - settled
                - declined
                - error
              description: Transaction status
              example: captured
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: captured
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction capture success
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Tip amount
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            taxAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
        - $ref: '#/components/schemas/ModelsDate'
    AdjustmentRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        surchargeFeeAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        transactionID:
          type: string
          maxLength: 31
          description: Transaction ID.
      required:
        - amount
        - transactionID
      example:
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
        transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    Adjustment:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/AdjustmentID'
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Adjustment amount
        tip:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tip amount
        taxAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tax amount
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
        transactionID:
          type: string
          description: Transaction ID.
      example:
        id: ADJ_01BBEBNMZ7VYYMADN9MJ3RDAJM
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
        transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    ChargeAdjustment:
      type: object
      properties:
        attemptedAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Adjustment amount
        status:
          type: string
          enum:
            - authorized
            - captured
            - declined
            - error
          description: Transaction status
        statusCode:
          type: string
          description: >-
            Transaction status code [(See all available transaction status
            codes)](#tag/TransactionStatus).
        statusDescription:
          type: string
          description: Transaction status description.
      example:
        attemptedAmount: '105.00'
        status: authorized
        statusCode: approved
        statusDescription: Transaction approved
    Credit:
      allOf:
        - type: object
          properties:
            balance:
              type: string
              description: String with 2 decimal places e.g “25.00”.
              example: '200.00'
            currency:
              $ref: '#/components/schemas/Currency'
            giftCardStatus:
              type: string
              description: Gift Card status
              example: active
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            previousBalance:
              type: string
              description: String with 2 decimal places e.g “25.00”.
              example: '150.00'
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
        - $ref: '#/components/schemas/ModelsDate'
    CreditRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
      example:
        amount: '105.00'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    ApplePayDomains:
      type: object
      properties:
        domains:
          type: array
          description: Domain names list.
      example:
        domains:
          - test-domain.com
          - test2.domain.io
    Void:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Transaction amount
            authCode:
              type: string
              description: Auth Code
              example: A11111
            batch:
              type: string
              description: Batch identifier
              example: BCH_01GSD9NDHHY0SVRV67PQH9XZF5
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
                - refund
              description: Transaction method
              example: charge
            status:
              type: string
              enum:
                - voided
                - declined
                - error
              description: Transaction status
              example: voided
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: voided
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction void success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            businessCard:
              type: boolean
              description: Flag determining credit card class
              example: false
        - $ref: '#/components/schemas/ModelsDate'
    CaptureRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        transactionID:
          allOf:
            - $ref: '#/components/schemas/TransactionID'
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
          description: Order(overwrite values on initial Charge).
      required:
        - transactionID
      example:
        amount: '105.00'
        order:
          shipFromPostalCode: 99999-9999
          shippingAddress:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            state: NY
            country: US
            postalCode: 11111-1111
          items:
            - discountAmount: '20.00'
              unitCost: '10.00'
              unitOfMeasure: CS
              lineNumber: '1'
              description: DESCRIPTION-1
              taxAmount: '5.00'
              quantity: '12'
              upc: UPC-1
              lineTotal: '105.00'
              taxExempt: false
              taxRate: '0.05'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    VoidRequest:
      type: object
      properties:
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        transactionID:
          allOf:
            - $ref: '#/components/schemas/TransactionID'
      example:
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    PaymentMethod:
      type: object
      xml:
        name: paymentMethod
      properties:
        billingAddress:
          type: object
          properties:
            line1:
              type: string
              description: Address.
            line2:
              type: string
              description: Additional address.
            city:
              type: string
              description: City.
            country:
              type: string
              description: Country.
            state:
              type: string
              description: State.
            postalCode:
              type: string
              description: Customer zip.
        lastFour:
          type: string
          description: Last four of account number.
          example: '1000'
        name:
          type: string
          description: The Account name.
          default: customer
        nickname:
          type: string
          description: The nickname.
        token:
          type: string
          description: The token.
        routingNumber:
          type: string
          description: The Routing Number.
        paymentType:
          type: string
          enum:
            - credit_card
            - ach
            - gift_card
            - pindebit_card
            - pldebit_card
    Customer:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            name:
              type: string
              description: The customer's name.
            email:
              type: string
              description: The customer's email.
            companyName:
              type: string
              description: The customer's company name.
            description:
              type: string
              description: The customer's notes.
            metadata:
              type: string
              description: Custom JSON.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            website:
              type: string
              description: The customer's website.
            address:
              type: object
              properties:
                line1:
                  type: string
                  description: The customer's address 1.
                line2:
                  type: string
                  description: The customer's address 2.
                city:
                  type: string
                  description: The customer's city.
                country:
                  type: string
                  pattern: ^$|^[0-9A-Za-z]{2,2}$
                  description: The customer's country.
                state:
                  type: string
                  pattern: ^$|^[0-9A-Za-z]{2,2}$
                  description: The customer's state.
                postalCode:
                  type: string
                  maxLength: 10
                  description: The customer's zip code.
              description: The customer's address.
            paymentMethods:
              type: array
              xml:
                name: paymentMethod
                wrapped: true
              items:
                $ref: '#/components/schemas/PaymentMethod'
              description: The customer's payment methods.
          example:
            id: CUS_01CR94R2JQR071FVF76XBGC3W4
            name: Michael Smith
            email: hello@seamlesspay.com
            companyName: ABC Business
            description: ABC Business
            metadata: '{"customOption":"example"}'
            phone: '2125555000'
            website: https://example.com
            address:
              line1: 400 Madison Ave
              line2: 10th Fl
              city: New York
              country: US
              state: NY
              postalCode: '10010'
            paymentMethods:
              - billingAddress:
                  line1: 400 Madison Ave
                  line2: 10th Fl
                  city: New York
                  country: USA
                  state: NY
                  postalCode: '10010'
                phone: '2125555000'
                email: hello@seamlesspay.com
                lastFour: '4242'
                name: Michael Smith
                nickname: Visa card
                token: TKN_01CBH0CKW6571SC337SWKSDCAE
                routingNumber: '123456789'
                paymentType: credit_card
        - $ref: '#/components/schemas/ModelsDate'
    TokenCustomerRequest:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            address:
              type: object
              properties:
                line1:
                  type: string
                  description: The customer's first address.
                line2:
                  type: string
                  description: The customer's second address.
                city:
                  type: string
                  description: The customer's city.
                country:
                  type: string
                  description: The customer's country.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The customer's state.
                postalCode:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The customer's postal code
            companyName:
              type: string
              description: The customer's company name.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            website:
              type: string
              description: The customer's website.
          required:
            - name
      example:
        customer:
          address:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            country: USA
            state: NY
            postalCode: '10010'
          companyName: ABC Business
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          website: https://example.com
    CustomerRequest:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            address:
              type: object
              properties:
                line1:
                  type: string
                  description: The customer's first address.
                line2:
                  type: string
                  description: The customer's second address.
                city:
                  type: string
                  description: The customer's city.
                country:
                  type: string
                  description: The customer's country.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The customer's state.
                postalCode:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The customer's postal code
            companyName:
              type: string
              description: The customer's company name.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            website:
              type: string
              description: The customer's website.
          required:
            - name
      example:
        customer:
          address:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            country: USA
            state: NY
            postalCode: '10010'
          companyName: ABC Business
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          website: https://example.com
    TokenCustomer:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            address:
              type: object
              properties:
                line1:
                  type: string
                  description: The customer's first address.
                line2:
                  type: string
                  description: The customer's second address.
                city:
                  type: string
                  description: The customer's city.
                country:
                  type: string
                  description: The customer's country.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The customer's state.
                postalCode:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The customer's postal code
            companyName:
              type: string
              description: The customer's company name.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            website:
              type: string
              description: The customer's website.
            updatedAt:
              type: string
              format: date-time
              description: Date of update data
            createdAt:
              type: string
              format: date-time
              description: Date of create data
      example:
        customer:
          id: CUS_01CBVZHCFCYQD84QS5V2323HB6
          address:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            country: USA
            state: NY
            postalCode: '10010'
          companyName: ABC Business
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          website: https://example.com
          updatedAt: '2017-12-15T19:08:18.262Z'
          createdAt: '2017-12-15T19:08:18.262Z'
    GiftCard:
      allOf:
        - type: object
          properties:
            balance:
              type: string
              description: String with 2 decimal places e.g “25.00”.
              example: '200.00'
            currency:
              $ref: '#/components/schemas/Currency'
            previousBalance:
              type: string
              description: String with 2 decimal places e.g “25.00”.
              example: '150.00'
            giftCardStatus:
              type: string
              description: Gift Card status
              example: active
            lastFour:
              type: string
              description: Last four of account number.
          example:
            balance: '200.00'
            currency: USD
            previousBalance: '150.00'
            giftCardStatus: active
            lastFour: '0018'
        - $ref: '#/components/schemas/ModelsDate'
    BinLookups:
      type: object
      properties:
        bin:
          type: string
          description: The BIN value.
        paymentNetwork:
          type: string
          enum:
            - Visa
            - MasterCard
            - American Express
            - Discover
          description: Detail Card Product - Visa, MasterCard, American Express, Discover.
        cardClass:
          type: string
          description: >-
            Categorizes the BIN as a Business card, Corporate T&E card, Purchase
            card or Consumer card. Assists the POS device with prompting
            decisions – to collect addenda or not.
        cardDetail:
          type: string
          description: Determines the card usage (pin, signature etc.).
        accountType:
          type: string
          enum:
            - Credit
            - Debit
            - Prepaid
          description: >-
            Determines the card type (credit, debit, prepaid) and usage (pin,
            signature etc.).
        country:
          type: string
          description: Three character alpha country code.
        debitNetwork:
          type: string
          description: Debit Network/PINless value.
        debitSignatureNetworkParticipant:
          type: string
          description: S = STAR Access.
        fsa:
          type: string
          enum:
            - 'Yes'
            - 'No'
          description: FSA Indicator (Yes/No).
        issuingBank:
          type: string
          description: This is the Issuer Bank name for the BIN.
        regulatorIndicator:
          type: string
          description: Applies to US issued cards only (Visa, MasterCard, and Discover).
        prepaidIndicator:
          type: string
          enum:
            - 'Yes'
            - 'No'
          description: Prepaid Card (Yes/No).
        productID:
          type: string
          description: >-
            These values indicate card product sub categories (Purchase Card,
            Business Card, etc.) for Visa, MasterCard, and Discover.
      example:
        bin: '411111'
        issuingBank: Bank Name
        country: USA
        paymentNetwork: Visa
        accountType: Credit
        cardDetail: True credit (No PIN/Signature capability)
        debitNetwork: ACCEL FISERV – Pinned POS
        debitSignatureNetworkParticipant: ''
        fsa: 'No'
        prepaidIndicator: 'No'
        productID: Visa Classic
        regulatorIndicator: 'N'
        cardClass: Consumer
    GiftCardReload:
      allOf:
        - type: object
          properties:
            amount:
              type: string
              description: Gift card amount.
            authCode:
              type: string
              description: Auth code.
            currency:
              type: string
              description: Currency.
            status:
              type: string
              description: Status.
            statusDescription:
              type: string
              description: Status descriptions.
            txnMethod:
              type: string
              enum:
                - refund
              description: Transaction type.
            transactionID:
              type: string
              maxLength: 31
              description: Transaction ID.
          example:
            amount: '105.00'
            currency: USD
            status: SETTLED
            statusDescription: Transaction settled
            txnMethod: refund
            transactionID: TXN_01BXA5RCMCMRES01JA2D6HE08H
    GiftCardInfo:
      allOf:
        - $ref: '#/components/schemas/GiftCard'
        - type: object
          properties:
            currency:
              type: string
              description: Currency.
          example:
            currency: USD
    PanVault:
      allOf:
        - type: object
          discriminator:
            propertyName: paymentType
            mapping:
              credit_card: '#/components/schemas/PanVaultCreditResponse'
              pldebit_card: '#/components/schemas/PanVaultPlDebitResponse'
              ach: '#/components/schemas/PanVaultAchRespon'
              gift_card: '#/components/schemas/PanVaultGiftResponse'
          properties:
            token:
              type: string
              description: Token of given payment data.
            name:
              type: string
              description: Name as it appears on card.
            billingAddress:
              type: object
              properties:
                line1:
                  type: string
                  description: The billing first address.
                line2:
                  type: string
                  description: The billing second address.
                city:
                  type: string
                  description: The billing city.
                country:
                  type: string
                  description: The billing country.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The billing state.
                postalCode:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The billing postal code.
          example:
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            name: Michael Smith
            billingAddress:
              line1: 400 Madison Ave
              line2: 10th Fl
              city: New York
              country: USA
              state: NY
              postalCode: '10010'
    Batch:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            autoBatchTime:
              type: string
              format: date-time
              description: Time for batch to close
            batchStatus:
              type: string
              enum:
                - BATCH_OPEN
                - BATCH_CLOSED
                - BATCH_CLOSED_AUTO
                - BATCH_CLOSED_ERROR
              description: The batches status
            sales:
              type: string
              maxLength: 12
              description: The sale's amount.
            refunds:
              type: string
              maxLength: 12
              description: The refund's amount.
            openedAt:
              type: string
              format: date-time
              description: Date of open data
            closedAt:
              type: string
              format: date-time
              description: Date of close data
          example:
            id: BCH_01BBC61W87JS2JTF2A6SZWM55K
            batchStatus: BATCH_CLOSED
            autoBatchTime: '10:00'
            sales: '150.00'
            refunds: '-30.00'
            openedAt: '2017-12-15T19:08:18.262Z'
            closedAt: '2017-12-15T19:08:18.262Z'
    BatchIncludeTransactions:
      allOf:
        - $ref: '#/components/schemas/Batch'
        - type: object
          properties:
            transactions:
              type: array
              items:
                type: object
                properties:
                  id:
                    allOf:
                      - $ref: '#/components/schemas/TransactionID'
                  accountType:
                    type: string
                    enum:
                      - Credit
                      - Debit
                      - Prepaid
                    description: >-
                      Determines the card type (credit, debit, prepaid) and
                      usage (pin, signature etc.).
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/Amount'
                    description: String with 2 decimal places e.g “25.00”.
                  authCode:
                    type: string
                    description: Auth Code
                    example: A11111
                  currency:
                    $ref: '#/components/schemas/Currency'
                  expDate:
                    type: string
                    description: Expiration Date.
                  ipAddress:
                    type: string
                    description: IP Address
                    format: ipv4
                  lastFour:
                    type: string
                    description: Last four of account number.
                    example: '1000'
                  method:
                    type: string
                    enum:
                      - charge
                    description: Transaction method
                  paymentNetwork:
                    type: string
                    enum:
                      - Visa
                      - MasterCard
                      - American Express
                      - Discover
                    description: >-
                      Detail Card Product - Visa, MasterCard, American Express,
                      Discover.
                  statusCode:
                    type: string
                    description: >-
                      Transaction status code [(See all available transaction
                      status codes)](#tag/TransactionStatus).
                    example: approved
                  status:
                    type: string
                    enum:
                      - authorized
                      - captured
                      - declined
                      - error
                    description: Transaction status
                    example: authorized
                  statusDescription:
                    type: string
                    description: Transaction status description.
                    example: Transaction approved
                  surchargeFeeAmount:
                    allOf:
                      - $ref: '#/components/schemas/Amount'
                    description: Surcharge fee amount
                  tip:
                    type: string
                    description: Tip amount
                  token:
                    allOf:
                      - $ref: '#/components/schemas/Token'
                  transactionDate:
                    type: string
                    format: date-time
                    description: Transaction date
                  transactionType:
                    type: string
                  verification:
                    type: object
                    properties:
                      addressLine1:
                        type: string
                        enum:
                          - pass
                          - fail
                          - unchecked
                          - unsupported
                          - retry
                        description: >-
                          AVS Verification Code [(See all AVS verification
                          codes)](#section/AVS-and-CVV-Verification-Codes)
                      addressPostalCode:
                        type: string
                        description: >-
                          AVS Verification Code [(See all AVS verification
                          codes)](#section/AVS-and-CVV-Verification-Codes)
                        enum:
                          - pass
                          - fail
                          - unchecked
                          - unsupported
                          - retry
                      cvv:
                        type: string
                        enum:
                          - pass
                          - fail
                          - unchecked
                          - unsupported
                          - retry
                        description: >-
                          CVV Verification Code [(See all CVV verification
                          codes)](#section/AVS-and-CVV-Verification-Codes)
    WebhookEvent:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            event:
              type: string
              description: The webhook event type.
            endpointID:
              type: string
              description: The endpoint identifier.
            response:
              type: object
              properties:
                success:
                  type: boolean
              description: The webhook's response.
            service:
              type: string
              description: The endpoint service.
            status:
              type: string
              description: The webhook's status.
            sentAttempts:
              type: integer
              description: The webhook's sent at attempts.
          example:
            id: WBE_01C56BV08MX9ACFFN84GQEKEGH
            service: tickets
            event: created
            endpointID: WBH_01C569BBWRP1KSDDDN098Y3127
            status: '200'
            sentAttempts: 1
            response:
              success: true
        - $ref: '#/components/schemas/ModelsDate'
    Webhook:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            endpointType:
              type: string
              enum:
                - Standard
                - Connected
              description: The endpoint type.
            payloadUrl:
              type: string
              pattern: ^(https:\/\/).*
              description: The webhook url.
            secret:
              type: string
              description: The secret key.
            webhookSubscriptions:
              type: array
              items:
                $ref: '#/components/schemas/Subscription'
              description: The webhook's subscriptions.
          example:
            id: WBH_01BBC61W87JS2JTF2A6SGTM50X
            endpointType: Standard
            payloadUrl: https://www.example.com/webhook
            secret: '50991311'
            webhookSubscriptions:
              - id: WBS_01FFC61W87JS2JTF3A8SGTM70T
                event: created
                service: customers
        - $ref: '#/components/schemas/ModelsDate'
    CloseBatch:
      type: object
      properties:
        data:
          type: object
          properties:
            transactions:
              type: number
              description: Count of affected transactions.
            batchId:
              type: string
              description: The batch unique identifier.
          description: Transaction data.
        message:
          type: string
          description: Result message.
        input:
          type: object
          properties:
            batchId:
              type: string
              description: The batch's unique identifier.
            env:
              type: string
              enum:
                - live
                - sandbox
            merchantId:
              type: string
              description: The merchant's unique identifier.
      example:
        data:
          transactions: 1
          batchId: BCH_01EHSX8WQP0KYJCCK9B80PX3M1
        message: Batch closure initiated!
        input:
          batchId: BCH_01EHSX8WQP0KYJCCK9B80PX3M1
          env: live
          merchantId: MRT_01D6K7PCCH4YDAPENGVBRPK861
    CreateBatch:
      type: object
      properties:
        batchId:
          type: string
          description: Batch ID.
      example:
        batchId: BCH_01BPH7PHBE8EHYAJRGGMN94DD5
    Retrieval:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            amount:
              type: string
              maxLength: 12
              description: Amount.
            caseNumber:
              type: string
              description: Case number.
            lastFour:
              type: string
              description: Last four of account number.
            merchantID:
              type: string
              description: Merchant ID.
            retrievalCode:
              type: string
              description: Retrieval code.
            retrievalDate:
              type: string
              description: Retrieval date.
            transactionDate:
              type: string
              description: Transaction date.
            transactionID:
              type: string
              description: Transaction ID.
          example:
            id: RTL_01BBC61W87JS2JTF2A6SZWM33Y
            amount: '105.00'
            caseNumber: '34643'
            lastFour: '6773'
            merchantID: '2142314234231412'
            retrievalCode: '6021'
            retrievalDate: 01/16/2017
            transactionDate: '2020-02-24T19:43:12.730Z'
            transactionID: 004-463436346543643643
        - $ref: '#/components/schemas/ModelsDate'
    Dispute:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            amount:
              type: string
              maxLength: 12
              description: Amount.
            caseNumber:
              type: string
              description: Case Number.
            cbCode:
              type: string
              description: CB code.
            cbdetail:
              type: array
              items:
                type: object
              description: CB detail.
            disputeDate:
              type: string
              description: Dispute date.
            lastFour:
              type: string
              description: Last four of account number.
            merchantID:
              type: string
              description: Dispute date.
            repeatCb:
              type: string
              description: Repeat flag.
            transactionDate:
              type: string
              description: Transactions date.
            transactionID:
              type: string
              maxLength: 31
              description: Transactions ID.
          example:
            id: CHK_01BBC61W87JS2JTF2A6SZWM11Y
            amount: 211.15
            caseNumber: 043 345 34534
            cbCode: '430'
            cbdetail: []
            disputeDate: 01/30/2017
            lastFour: '7982'
            merchantID: '3425423542523523245424'
            repeatCb: '1'
            transactionDate: '2020-02-24T19:43:12.730Z'
            transactionID: 004-463436346543643643
        - $ref: '#/components/schemas/ModelsDate'
    PCI:
      allOf:
        - type: object
          properties:
            assessor:
              type: string
              description: Assessor.
            companyName:
              type: string
              description: Company name.
            complianceProgram:
              type: string
              description: Compliance Program.
            customerID:
              type: string
              description: The customer's ID.
            dateAdded:
              type: string
              description: The Date of added.
            dateRegistered:
              type: string
              description: The Date of registrered.
            firstCertDate:
              type: string
              description: First Certification Date.
            lastLoginDate:
              type: string
              description: Last login date.
            merchantStatus:
              type: string
              description: Merchant status.
            merchantType:
              type: string
              description: Merchant type.
            mostRecentSaqDate:
              type: string
            mostRecentScanDate:
              type: string
            pciExpiry:
              type: string
              description: PCI expire date.
            pciLevel:
              type: integer
              description: PCI level.
            pciStatus:
              type: string
              description: PCI status.
            primaryMerchantID:
              type: string
              description: Primary merchant ID.
            primaryPocEmail:
              type: string
            primaryPocLastName:
              type: string
            saqExpiry:
              type: string
            saqStatus:
              type: string
            saqType:
              type: string
            scanExpiry:
              type: string
            scanStatus:
              type: string
          example:
            assessor: Trustwave
            companyName: ABC Business
            complianceProgram: SAQ_AND_SCAN
            customerID: '3425324'
            dateAdded: 07/02/2014
            dateRegistered: 08/27/2014
            firstCertDate: 08/26/2014
            lastLoginDate: 08/27/2014
            merchantStatus: ACTIVE
            merchantType: INET-PA
            mostRecentSaqDate: 08/27/2014
            mostRecentScanDate: 10/27/2016
            pciExpiry: 08/26/2015
            pciLevel: 4
            pciStatus: EXPIRED
            primaryMerchantID: '3544325243543232'
            primaryPocEmail: email@merchant.com
            primaryPocLastName: Gaon
            saqExpiry: 08/26/2015
            saqStatus: EXPIRED
            saqType: SAQ_C
            scanExpiry: 01/26/2017
            scanStatus: PASS
    IRS:
      allOf:
        - type: object
          properties:
            irsMatch:
              type: boolean
              description: IRS match on Tax ID number.
            lastChangeDate:
              type: string
              description: Last change date.
          example:
            lastChangeDate: 03/02/2017
            irsMatch: true
    Payout:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            payoutTotal:
              type: string
              maxLength: 12
              description: The payout's amount.
            payoutBankAccount:
              type: string
              description: The payout's bank account number.
            merchantID:
              type: string
              description: The merchant ID.
            fundingDate:
              type: string
              description: Transmit date.
            transferType:
              type: string
              description: The transfer type.
            batchTotal:
              type: string
              maxLength: 12
              description: The batches total amount.
            fees:
              type: string
              maxLength: 12
              description: The fee's amount.
            disputes:
              type: string
              maxLength: 12
              description: The dispute's amount.
            thirdPartyPayouts:
              type: string
              maxLength: 12
              description: The third party payout's amount.
            adjustments:
              type: string
              maxLength: 12
              description: The adjustment's amount.
            batches:
              type: array
              description: Payout's batches.
              items:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        description: The batch unique id.
                      autoBatchTime:
                        type: string
                        format: date-time
                        description: Time for batch to close
                      batchStatus:
                        type: string
                        enum:
                          - BATCH_OPEN
                          - BATCH_CLOSED
                          - BATCH_CLOSED_AUTO
                          - BATCH_CLOSED_ERROR
                        description: The batches status
                      sales:
                        type: string
                        maxLength: 12
                        description: The sale's amount.
                      refunds:
                        type: string
                        maxLength: 12
                        description: The refund's amount.
                      openedAt:
                        type: string
                        format: date-time
                        description: Date of open data
                      transaction_ids:
                        type: array
                        description: Unique identifiers for the batch's transactions.
                        items:
                          type: string
                      closedAt:
                        type: string
                        format: date-time
                        description: Date of close data
          example:
            id: DPT_01BBC61W87JS2JTF2A6SZWM77K
            payoutBankAccount: '****152296'
            merchantID: '3463465436543653'
            fundingDate: 03-08-2017
            transferType: Credit
            batchTotal: '120.00'
            fees: '-10.00'
            disputes: '0.00'
            thirdPartyPayouts: '0.00'
            adjustments: '-5.00'
            payoutTotal: '105.00'
            batches:
              - id: BCH_01BBC61W87JS2JTF2A6SZWM55K
                autoBatchTime: '10:00'
                batchStatus: BATCH_CLOSED
                sales: '150.00'
                refunds: '-30.00'
                openedAt: '2017-12-15T19:08:18.262Z'
                closedAt: '2017-12-15T19:08:18.262Z'
                transaction_ids:
                  - TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                  - TR_02XCFZFGT8NQSKLAP2CW0DDOIU
    Statement:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            merchantID:
              type: string
              description: The merchant ID
            month:
              type: string
              description: Month
            pdfBase64:
              type: string
              description: PDF file in Base64
            year:
              type: string
              description: Year
          example:
            id: ST_01BBC61W87JS2JTF2A6SZWM99Y
            merchantID: '5342543254235324'
            month: '04'
            pdfBase64: JVBERi0xLjMKJ...
            year: '2016'
        - $ref: '#/components/schemas/ModelsDate'
    Subscription:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            event:
              type: string
              description: The event name.
            service:
              type: string
              description: The service name.
          example:
            id: WBS_01FFC61W87JS2JTF3A8SGTM70T
            event: created
            service: customers
    SubMerchant:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            subMID:
              type: string
              description: The sub-merchants id.
            masterMID:
              type: string
              description: The Master Merchant id.
            subMerchantEntityName:
              type: string
              description: The sub-merchant's bussiness name
            subMerchantEmail:
              type: string
              description: The sub-merchant email.
          example:
            id: SMT_01C5KKZEAM92FB2ZM3XJTKDEPP
            subMID: '54648651'
            masterMID: '32462476'
            subMerchantEntityName: TEST
            subMerchantEmail: test@test.com
        - $ref: '#/components/schemas/ModelsDate'
    RefundRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        currency:
          $ref: '#/components/schemas/Currency'
        descriptor:
          type: string
          description: >-
            This field contains the merchant name/product/service to be used in
            lieu of the DBA name.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        transactionID:
          maxLength: 31
          description: >
            The ID of base transaction <p style='color: #e53935'>This field is
            required if `token` not specified.</p>
        token:
          type: string
          description: >
            The payment method (token) from pan-vault. Is used for headless
            refunds. <p style='color: #e53935'>This field is required if
            `transactionID` not specified.</p> <p style='color:
            #e53935'>Headless refunds require special approval by
            SeamlessPay.</p>
      required:
        - transactionID
        - token
      example:
        amount: '105.00'
        currency: USD
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        metadata: '{"customOption":"example"}'
        transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
        token: TKN_01BMFGDTK30EYH9FWTXPYR50
    Charge:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            adjustmentResult:
              $ref: '#/components/schemas/ChargeAdjustment'
              description: The charge adjustments.
            currency:
              $ref: '#/components/schemas/Currency'
            fullyRefunded:
              type: boolean
              description: Flag of fully refunded charge.
              example: 'true'
            paymentType:
              type: string
              description: Payment type
              example: credit_card
            businessCard:
              type: boolean
              example: false
              description: Flag determining credit card class
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
              example: '0125'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            refunds:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Refund'
              description: List of refunds associated with the charge.
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
              example: authorized
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: approved
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction approved
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Tip amount
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
        - $ref: '#/components/schemas/ModelsDate'
    ChargeCreate:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            currency:
              $ref: '#/components/schemas/Currency'
            paymentType:
              type: string
              description: Payment type
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            paymentType: credit_card
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: captured
            status: captured
            batchId: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            accountType: Credit
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutSession:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Checkout Session ID.
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            checkoutId:
              type: string
              description: Checkout Form ID.
            meta:
              type: object
              description: Optional.
            createdAt:
              type: string
              description: Date.
          example:
            id: CHS_01DJNFZAA730Z5RM3YSKM2908V
            merchantId: '3544325243543232'
            checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
            amount: '105.00'
            meta:
              customField: customValue
            createdAt: '2017-12-15T19:08:18.262Z'
    CheckoutCharge:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            currency: USD
            ipAddress: 192.168.0.1
            method: charge
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Transaction capture success
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: captured
            status: captured
            batchId: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            accountType: Credit
            emvData: >-
              8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreate:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            currency: USD
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            transactionDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        capture:
          type: boolean
          description: Create a capture transaction.
        currency:
          $ref: '#/components/schemas/Currency'
        cvv:
          type: string
          maxLength: 4
          description: >-
            CVV2, CVC2 and CID are, Visa, MasterCard, MaestroInt, American
            Express and Discover card verification tools designed to reduce
            fraud losses primarily on transactions when the card is not present.
            With the exception of American Express, this is a three character
            value printed on the back of the card in the signature panel, after
            the card number. For American Express, it is a four character value
            printed on the face of the card.
        description:
          type: string
          description: Payment Description.
        descriptor:
          type: string
          description: >-
            This field contains the merchant name/product/service to be used in
            lieu of the DBA name.
        digitalWalletProgramType:
          type: string
          description: Optional, digital wallet program type.
          enum:
            - APPLE_PAY
            - ANDROID_PAY
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        poNumber:
          type: string
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
          description: Order.
        orderID:
          type: string
          description: A number assigned to uniquely reference a transaction.
        token:
          allOf:
            - $ref: '#/components/schemas/Token'
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        entryType:
          type: string
          enum:
            - card_on_file
            - keyed
            - recurring
            - ecommerce
        taxExempt:
          type: boolean
      required:
        - token
      example:
        amount: '105.00'
        capture: false
        cvv: '123'
        order:
          shipFromPostalCode: 99999-9999
          shippingAddress:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            state: NY
            country: US
            postalCode: 11111-1111
          items:
            - discountAmount: '20.00'
              unitCost: '10.00'
              unitOfMeasure: CS
              lineNumber: '1'
              description: DESCRIPTION-1
              taxAmount: '5.00'
              quantity: '12'
              upc: UPC-1
              lineTotal: '105.00'
              taxExempt: false
              taxRate: '0.05'
        currency: USD
        token: TKN_01BMFGDTK30EYH9FWTXPYR50
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    CheckoutSessionRequest:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            checkoutId:
              type: string
              description: Checkout Form ID
            checkoutFields:
              type: object
              description: Default Checkout Form values
              properties:
                company:
                  type: string
                  description: Company name.
                billing_name:
                  type: string
                  description: Name.
                billing_state:
                  type: string
                  description: State.
                billing_city:
                  type: string
                  description: City.
                billing_address:
                  type: string
                  description: Address.
                billing_address2:
                  type: string
                  description: Apt/Suite.
                billing_zip:
                  type: string
                  description: Zip.
                phone_number:
                  type: string
                  description: Phone.
                email:
                  type: string
                  description: Email.
                customFields:
                  type: object
                  description: Additional fields.
                  properties:
                    custom_field1:
                      type: string
                      description: Custom Field.
                    custom_field2:
                      type: string
                      description: Custom Field.
            meta:
              type: object
              description: Data pushed with transaction. For reporting purposes only.
          required:
            - amount
            - checkoutId
          example:
            checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
            amount: '105.00'
            checkoutFields:
              company: Ledner, Toy and Roob
              billing_name: Luella King
              billing_state: California
              billing_city: Sofiabury
              billing_address: 626 Maggie Divide
              billing_address2: Apt. 441
            meta:
              customField: customValue
    CheckoutChargeRequest:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            accountNumber:
              type: string
              description: Account Number
            routingNumber:
              type: string
              description: Routing Number (required if paymentType `ach`)
            billingName:
              type: string
              description: Name.
            billingAddress:
              type: string
              description: Address.
            billingAddress2:
              type: string
              description: Additional address.
            billingCity:
              type: string
              description: City.
            billingCountry:
              type: string
              description: Country.
            billingState:
              type: string
              description: State.
            billingZip:
              type: string
              description: Customer zip.
            capture:
              type: boolean
              description: Create a capture transaction
            cvv:
              type: string
              maxLength: 4
              description: >-
                CVV2, CVC2 and CID are, Visa, MasterCard, MaestroInt, American
                Express and Discover card verification tools designed to reduce
                fraud losses primarily on transactions when the card is not
                present. With the exception of American Express, this is a three
                character value printed on the back of the card in the signature
                panel, after the card number. For American Express, it is a four
                character value printed on the face of the card.
            description:
              type: string
              description: Payment Description.
            descriptor:
              type: string
              description: >-
                This field contains the merchant name/product/service to be used
                in lieu of the DBA name
            expDate:
              type: string
              minLength: 4
              maxLength: 4
              description: Card expiration date (required if card number is provided).
            email:
              type: string
              description: Email.
            idempotencyKey:
              type: string
              description: Optional, see section [above](#section/Idempotent-Requests).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
            name:
              type: string
              description: Name.
            phone:
              type: string
              minLength: 10
              maxLength: 10
              description: Phone number.
            poNumber:
              type: string
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            orderID:
              type: string
              description: A number assigned to uniquely reference a transaction.
            paymentType:
              type: string
              enum:
                - credit_card
                - ach
            entryType:
              type: string
              enum:
                - card_on_file
                - keyed
                - recurring
                - ecommerce
            taxExempt:
              type: boolean
          required:
            - accountNumber
            - routingNumber
            - amount
            - paymentType
          example:
            amount: '105.00'
            accountNumber: '4242424242424242'
            capture: true
            currency: USD
            expDate: '0125'
            paymentType: credit_card
            idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
            order:
              shipFromPostalCode: 99999-9999
              shippingAddress:
                line1: 400 Madison Ave
                line2: 10th Fl
                city: New York
                state: NY
                country: US
                postalCode: 11111-1111
              items:
                - discountAmount: '20.00'
                  unitCost: '10.00'
                  unitOfMeasure: CS
                  lineNumber: '1'
                  description: DESCRIPTION-1
                  taxAmount: '5.00'
                  quantity: '12'
                  upc: UPC-1
                  lineTotal: '105.00'
                  taxExempt: false
                  taxRate: '0.05'
    RefundUpdateRequest:
      type: object
      properties:
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
      required:
        - metadata
      example:
        metadata: '{"customOption":"example"}'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    ChargeUpdateRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        surchargeFeeAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        capture:
          type: boolean
          description: Capture transaction
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
          description: Order(overwrite values on initial Charge).
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
      example:
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
        capture: false
        order:
          shipFromPostalCode: 99999-9999
          shippingAddress:
            line1: 400 Madison Ave
            line2: 10th Fl
            city: New York
            state: NY
            country: US
            postalCode: 11111-1111
          items:
            - discountAmount: '20.00'
              unitCost: '10.00'
              unitOfMeasure: CS
              lineNumber: '1'
              description: DESCRIPTION-1
              taxAmount: '5.00'
              quantity: '12'
              upc: UPC-1
              lineTotal: '105.00'
              taxExempt: false
              taxRate: '0.05'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b53
    PanVaultRequest:
      allOf:
        - type: object
          discriminator:
            propertyName: paymentType
            mapping:
              credit_card: '#/components/schemas/PanVaultCREDIT'
              pldebit_card: '#/components/schemas/PanVaultPLDEBIT'
              ach: '#/components/schemas/PanVaultACH'
              gift_card: '#/components/schemas/PanVaultGIFT'
          properties:
            paymentType:
              type: string
              enum:
                - credit_card
                - pldebit_card
                - ach
                - gift_card
              description: >-
                PAN Vault support five types of payments "Credit Card", "PINLess
                Debit Card", "ACH", "Gift Card"
            billingAddress:
              type: object
              properties:
                line1:
                  type: string
                  description: The billing first address.
                line2:
                  type: string
                  description: The billing second address.
                city:
                  type: string
                  description: The billing city.
                country:
                  type: string
                  description: The billing country.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The billing state.
                postalCode:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The billing postal code.
            name:
              type: string
              description: Name as it appears on card.
          example:
            billingAddress:
              line1: 400 Madison Ave
              line2: 10th Fl
              city: New York
              country: USA
              state: NY
              postalCode: '10010'
            name: Michael Smith
          required:
            - paymentType
    OpenBatches:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Batch ID.
            batchStatus:
              type: string
              enum:
                - BATCH_OPEN
                - BATCH_CLOSED
                - BATCH_CLOSED_AUTO
                - BATCH_CLOSED_ERROR
              description: Batch status.
            sales:
              type: string
              maxLength: 12
              description: The sale's amount.
            refunds:
              type: string
              maxLength: 12
              description: The refund's amount.
            openedAt:
              type: string
              format: date-time
              description: Date of open data
            closedAt:
              type: string
              format: date-time
              description: Date of close data
          example:
            id: BCH_01BPH7PHBE8EHYAJRGGMN94DD5
            batchStatus: BATCH_OPEN
            sales: '150.00'
            refunds: '-30.00'
            openedAt: '2017-12-15T19:08:18.262Z'
    PanVaultCREDIT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account Number. ``Skip this field if "appleToken" is defined``.
            expDate:
              type: string
              description: Expiration Date. ``Skip this field if "appleToken" is defined``.
            cvv:
              type: string
              description: >-
                cvv data to verify (not storing). ``Skip this field if
                "appleToken" is defined``.
            merchantIdentifier:
              type: string
              description: >-
                Apple Merchant Identifier. It's required if you're using own
                Apple merchant account to perform apple pay in iOS application.
            appleToken:
              type: object
              description: >-
                Provides payment via Apple Pay services. Contains [the user's
                payment
                credentials](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken).
          required:
            - accountNumber
            - expDate
          example:
            paymentType: credit_card
            accountNumber: '4242424242424242'
            expDate: 01/25
    PanVaultPLDEBIT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account Number. ``Skip this field if "appleToken" is defined``.
            expDate:
              type: string
              description: Expiration Date. ``Skip this field if "appleToken" is defined``.
            merchantIdentifier:
              type: string
              description: >-
                Apple Merchant Identifier. It's required if you're using own
                Apple merchant account to perform apple pay in iOS application.
            appleToken:
              type: object
              description: >-
                Provides payment via Apple Pay services. Contains [the user's
                payment
                credentials](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken).
          required:
            - accountNumber
            - expDate
          example:
            paymentType: pldebit_card
            accountNumber: '4242424242424242'
            expDate: 01/25
    PanVaultACH:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account number.
            bankAccountType:
              type: string
              enum:
                - Checking
                - Savings
              description: Bank account type.
            routingNumber:
              type: string
              minLength: 9
              maxLength: 9
              description: Bank routing number.
          required:
            - accountNumber
            - bankAccountType
            - routingNumber
          example:
            paymentType: ach
            accountNumber: '99211226789'
            bankAccountType: Savings
            routingNumber: '999999992'
    PanVaultGIFT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              pattern: ^[0-9]{1,23}$
              description: Account Number.
            pinNumber:
              type: string
              maxLength: 6
              description: Gift card PIN.
          required:
            - accountNumber
          example:
            paymentType: gift_card
            accountNumber: '1238990000000018'
            pinNumber: '000000'
    Data:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'
        total:
          type: number
    Pagination:
      type: object
      properties:
        count:
          type: integer
          description: Results returned per page
        page:
          type: integer
          description: Page number
        pages:
          type: integer
          description: Total number of pages
        size:
          type: integer
          description: Total results from query
      example:
        count: 10
        page: 1
        pages: 2
        size: 19
    Currency:
      type: string
      enum:
        - USD
        - CAD
      description: |
        Currency:
         - `USD` - United States dollar.
         - `CAD` - Canadian dollar.
    Amount:
      type: string
      maxLength: 12
      description: String with 2 decimal places e.g “25.00”.
      example: '1.00'
    Method:
      type: string
      enum:
        - AUTH
        - CAPTURE
        - SALE
        - VOID
        - REFUND
    MethodCapture:
      type: string
      enum:
        - CAPTURE
        - SALE
    MethodVoid:
      type: string
      enum:
        - VOID
    Token:
      type: string
      maxLength: 31
      description: The payment method (token) from pan-vault
      example: TKN_01BMFGDTK30EYH9FWTXPYR50
    TransactionID:
      type: string
      maxLength: 31
      description: The ID of base transaction
      example: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    BatchID:
      type: string
      maxLength: 31
      description: The ID of batch
      example: BCH_01BJE0H947B53D3JRRSJ4W6R9T
    AdjustmentID:
      type: string
      maxLength: 31
      description: The ID of adjustment
      example: ADJ_01BBEBNMZ7VYYMADN9MJ3RDAJM
    Card:
      type: string
      maxLength: 16
      minLength: 16
      description: The card
      example: 411111******1111
    EmvData:
      type: string
      description: EMV Data for EMV transactions.
      example: >-
        8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
    ModelsDate:
      type: object
      properties:
        updatedAt:
          type: string
          format: date-time
          description: Date of update data
        createdAt:
          type: string
          format: date-time
          description: Date of create data
      example:
        updatedAt: '2017-12-15T19:08:18.262Z'
        createdAt: '2017-12-15T19:08:18.262Z'
    PanVaultCreditResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            paymentType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
            expDate:
              type: string
              description: Expiration Date.
            paymentNetwork:
              type: string
              description: Payment Network.
            verificationResults:
              type: object
              properties:
                avsStreetAddress:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                avsPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            paymentType: credit_card
            lastfour: '4242'
            expDate: '0125'
            paymentNetwork: Visa
            verificationResults:
              avsStreetAddress: pass
              avsPostalCode: pass
              cvv: pass
    PanVaultPlDebitResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            paymentType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
            expDate:
              type: string
              description: Expiration Date.
          example:
            paymentType: pldebit_card
            lastfour: '4242'
            expDate: '0125'
    PanVaultAchRespon:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            paymentType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
            bankAccountType:
              type: string
              enum:
                - Checking
                - Savings
              description: Bank account type.
            routingNumber:
              type: string
              minLength: 9
              maxLength: 9
              description: Bank routing number.
          example:
            paymentType: ach
            lastfour: '6789'
            bankAccountType: Savings
            routingNumber: '999999992'
    PanVaultGiftResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            paymentType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
          example:
            paymentType: gift_card
            lastfour: '0018'
    Auth:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            businessCard:
              type: boolean
              description: Flag determining credit card class
            currency:
              $ref: '#/components/schemas/Currency'
            paymentType:
              type: string
              description: Payment type
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            businessCard: false
            method: charge
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction approved
            paymentType: credit_card
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: approved
            status: authorized
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            accountType: Credit
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Captured:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            batchId:
              $ref: '#/components/schemas/BatchID'
            businessCard:
              type: boolean
              description: Flag determining credit card class
            currency:
              $ref: '#/components/schemas/Currency'
            paymentType:
              type: string
              description: Payment type
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            businessCard: false
            method: charge
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            paymentType: credit_card
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: captured
            status: captured
            batchId: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            accountType: Credit
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Gift:
      allOf:
        - type: object
          description: Example of a successful response22
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            currency:
              $ref: '#/components/schemas/Currency'
            paymentType:
              type: string
              description: Payment type
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
            verification:
              type: object
              properties:
                addressLine1:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                addressPostalCode:
                  type: string
                  description: >-
                    AVS Verification Code [(See all AVS verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                cvv:
                  type: string
                  enum:
                    - pass
                    - fail
                    - unchecked
                    - unsupported
                    - retry
                  description: >-
                    CVV Verification Code [(See all CVV verification
                    codes)](#section/AVS-and-CVV-Verification-Codes)
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction settled
            statusCode: settled
            status: settled
            paymentType: gift_card
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreateAuth:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction approved
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: approved
            status: authorized
            surchargeFeeAmount: '1.00'
            accountType: Credit
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreateCaptured:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            currency:
              $ref: '#/components/schemas/Currency'
            paymentNetwork:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            accountType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - authorized
                - captured
                - declined
                - error
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            transactionDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            paymentNetwork: Visa
            lastFour: '1000'
            statusCode: captured
            status: captured
            batchId: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            accountType: Credit
            transactionDate: '2020-02-24T19:43:12.730Z'
            verification:
              addressLine1: pass
              addressPostalCode: pass
              cvv: pass
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Order:
      type: object
      properties:
        shipFromPostalCode:
          type: string
          description: Ship From postal code.
          example: 99999-9999
        shippingAddress:
          type: object
          properties:
            line1:
              type: string
              description: Shipping address.
            line2:
              type: string
              description: Shipping second address.
            city:
              type: string
              description: Shipping city.
            country:
              type: string
              description: Shipping country.
            state:
              type: string
              maxLength: 2
              minLength: 2
              description: Shipping state.
            postalCode:
              type: string
              description: Shipping postal code.
              example: 11111-1111
        items:
          type: array
          items:
            type: object
            properties:
              discountAmount:
                type: string
                description: String with 2 decimal places e.g “25.00”.
              unitCost:
                type: string
                description: String with 2 decimal places e.g “25.00”.
              unitOfMeasure:
                type: string
                description: >-
                  Please be sure to provide a <a href="/unitMeasureCodes.pdf"
                  target="_blank">Standard Unit of Measure</a> in order to
                  qualify for Level 3 Interchange pricing.
              lineNumber:
                type: string
                description: Line number.
              description:
                type: string
                description: Description.
              taxAmount:
                type: string
                description: String with 2 decimal places e.g “25.00”.
              quantity:
                type: string
                description: Quantity.
              upc:
                type: string
                description: Universal product code.
              lineTotal:
                type: string
                description: String with 2 decimal places e.g “25.00”.
              taxExempt:
                type: boolean
              taxRate:
                type: string
                description: >-
                  Tax rate expressed as a string with decimal value e.g. for
                  2.5%, taxRate should be "0.025".
          description: Items.
      example:
        shipFromPostalCode: 99999-9999
        shippingAddress:
          line1: 400 Madison Ave
          line2: 10th Fl
          city: New York
          state: NY
          country: US
          postalCode: 11111-1111
        items:
          - discountAmount: '20.00'
            unitCost: '10.00'
            unitOfMeasure: CS
            lineNumber: '1'
            description: DESCRIPTION-1
            taxAmount: '5.00'
            quantity: '12'
            upc: UPC-1
            lineTotal: '105.00'
            taxExempt: false
            taxRate: '0.05'
    Product:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            name:
              type: string
              description: The product's name.
            unit:
              type: string
              description: A label that represents units of this product.
            descriptor:
              type: string
              description: The product’s descriptor.
          example:
            id: PDT_01E8YHM3PX9YBXAJT57Z5MSXJ0
            name: Product Name
            unit: seats
            descriptor: Descriptor
        - $ref: '#/components/schemas/ModelsDate'
    Plan:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            planName:
              type: string
              description: Plan Name
            productID:
              type: string
              description: The product ID.
            paymentPlanType:
              type: string
              enum:
                - Recurring
                - Metered
              description: Payment Plan Type
            price:
              type: object
              properties:
                amount:
                  type: string
                  description: Amount
                numberOfUnit:
                  type: integer
                  description: Number of unit
            billing:
              type: object
              properties:
                intervalPeriod:
                  type: string
                  enum:
                    - days
                    - weeks
                    - months
                    - years
                  description: Payment plan billing interval period
                intervalCount:
                  type: integer
                  description: Payment plan billing interval count
            trial:
              type: object
              properties:
                trialInterval:
                  type: string
                  enum:
                    - days
                    - weeks
                    - months
                  description: Trial Interval
                trialCount:
                  type: integer
                  description: Trial Count
          example:
            id: PDP_01E98MGXDPM4CMYT1XYVFFWQ8C
            planName: Product payment plan name
            productID: PDT_01E8Q215A4SXTH4Z47G97MD70S
            paymentPlanType: Recurring
            price:
              amount: '52.97'
              numberOfUnit: 1
            billing:
              intervalPeriod: months
              intervalCount: 3
            trial:
              trialInterval: days
              trialCount: 2
        - $ref: '#/components/schemas/ModelsDate'
    UsageRecord:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            subscriptionItemID:
              type: string
              description: Subscription item ID.
            subscriptionID:
              type: string
              description: Subscription ID.
            quantity:
              type: integer
              description: >-
                The quantity of good/services used for the current billing
                period for a specific subscription item.
          example:
            id: SIU_01E98PHWQ3KEE1MXDPK43B6GZ4
            subscriptionItemID: SIM_01E8W5PCSC037FYT0GQJ851492
            subscriptionID: SBN_01E8W5PCSCXAXZZK6SYVKFC6DQ
            quantity: 1
        - $ref: '#/components/schemas/ModelsDate'
    CustomerSubscription:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            token:
              type: string
              description: The customer's payment method ID
            reminderDays:
              type: string
              enum:
                - 1
                - 3
                - 7
                - 15
                - 30
                - 45
              description: >-
                Amount of days before the billing due date the invoice is
                generated and sent to the customer.
            status:
              type: string
              enum:
                - Active
                - Cancelled
              description: Subscription status
            customerID:
              type: string
              description: Customer ID
            billingType:
              type: string
              enum:
                - automatic
                - manual
              description: Billing type
            currentBillingPeriod:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                  description: Date of start
                end:
                  type: string
                  format: date-time
                  description: Date of end
                reminder:
                  type: string
                  format: date-time
                  description: Date of reminder
              description: Current billing period
            overrideTrialLength:
              type: object
              properties:
                intervalPeriod:
                  type: string
                  enum:
                    - days
                    - weeks
                    - months
                  description: Trial interval
                intervalCount:
                  type: integer
                  description: Trial count
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Subscription item id
                  numberOfUnit:
                    type: integer
                    description: Number of unit
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Product ID
                      name:
                        type: string
                        description: Product Name
                      descriptor:
                        type: string
                        description: Product descriptor
                      unit:
                        type: string
                        description: Product unit
                      paymentPlan:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Payment plan ID
                          planName:
                            type: string
                            description: Payment plan name
                          paymentPlanType:
                            type: string
                            enum:
                              - Recurring
                              - Metered
                            description: Payment plan type
                          price:
                            type: object
                            properties:
                              amount:
                                type: string
                                description: Amount
                              numberOfUnit:
                                type: integer
                                description: Number of unit
                          billing:
                            type: object
                            properties:
                              intervalPeriod:
                                type: string
                                enum:
                                  - days
                                  - weeks
                                  - months
                                  - years
                                description: Payment plan billing interval period
                              intervalCount:
                                type: integer
                                description: Payment plan billing interval count
                        description: Payment Plan
                    description: Product
                description: Subscription Item
              description: Subscription Items
          example:
            id: SBN_01E98VH0P6XG9KNQSHQYG66RYQ
            token: TKN_01DYSXWH64DX25DCMENHTCQ00N
            reminderDays: '7'
            status: Active
            customerID: CUS_01DZ3W8RDWRJ0KNGEGSFATVBSJ
            billingType: automatic
            currentBillingPeriod:
              start: '2020-07-26T19:08:18.262Z'
              end: '2020-08-26T19:08:18.262Z'
              reminder: '2020-08-19T19:08:18.262Z'
            overrideTrialLength:
              intervalPeriod: months
              intervalCount: 2
            items:
              - numberOfUnit: 1
                id: SIM_01E98VH0P5D5FZS24NAVR37P7V
                product:
                  id: PDT_01E8Q215A4SXTH4Z47G97MD70S
                  name: Product name
                  descriptor: Product descriptor
                  unit: Product unit
                  paymentPlan:
                    id: PDP_01E8S1R4XAF6DW0CG3T48P1B57
                    planName: Payment plan name
                    paymentPlanType: Recurring
                    price:
                      amount: '1.34'
                      numberOfUnit: 1
                    billing:
                      intervalPeriod: months
                      intervalCount: 1
              - numberOfUnit: 2
                id: SIM_01E98VH0P5JS095Y4EP2YCMMMY
                product:
                  id: PDT_01E8Q215A4SXTH4Z47G97MD70S
                  name: Product name
                  descriptor: Product descriptor
                  unit: Product unit
                  paymentPlan:
                    id: PDP_01E8S02XRT1XP2TQXX0EZDSDKF
                    planName: Payment plan name
                    paymentPlanType: Recurring
                    price:
                      amount: '1.34'
                      numberOfUnit: 1
                    billing:
                      intervalPeriod: months
                      intervalCount: 1
                    trial:
                      trialInterval: days
                      trialCount: 3
        - $ref: '#/components/schemas/ModelsDate'
    LogID:
      type: string
      maxLength: 31
      description: The ID of log
      example: APL_01EMZ1344B4STX5QD13CCZ0MRG
    InvoiceBase:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            customerID:
              type: string
              description: Customer ID
            token:
              type: string
              description: The customer's token
            subscriptionID:
              type: string
              description: The subscription ID that this invoice was prepared for, if any.
            invoiceNumber:
              type: string
              description: >-
                A unique, identifying string that appears on emails sent to the
                customer for this invoice.
            transactionId:
              type: string
              description: >-
                ID of the payment transaction generated for this invoice, if
                any.
            status:
              type: string
              enum:
                - Draft
                - Open
                - PastDue
                - Voided
                - Paid
                - Uncollectible
              description: |
                The status of the invoice.

                Invoices can take on the following statuses:
                  - `Draft` - Starting status for all invoices; at this point, the invoice can still be edited.
                  - `Open` - The invoice has been finalized, and is now awaiting payment from the customer. It can no longer be edited.
                  - `PastDue` - The invoice payment due date has been expired.
                  - `Voided` - This invoice was a mistake, and has been canceled.
                  - `Paid` - This invoice was paid.
                  - `Uncollectible` - It’s unlikely that this invoice will be paid.
            paymentDueDate:
              type: string
              format: date-time
              description: >
                The date on which payment for this invoice is due.

                This value will be `null` for invoices where
                `collectionMethod=charge_automatically` or `terms=dueOnReceipt`.
            paymentProcessing:
              type: boolean
              description: Indicates if invoice payment is processing now.
            amounts:
              type: object
              properties:
                total:
                  type: number
                  description: Total amount after discounts and taxes.
                discount:
                  type: number
                  description: Discount amount applied to this invoice, if there is one.
                tax:
                  type: number
                  description: >-
                    The amount of tax on this invoice. This is the sum of all
                    the tax amounts on this invoice.
              description: Invoice amounts object.
            defaultTaxRates:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: The display name of the tax rate.
                  percentage:
                    type: number
                    description: This represents the tax rate percent out of 100.
                  taxRateId:
                    type: string
                    description: The tax rate ID.
              description: The tax rates applied to this invoice, if any.
            autoAdvance:
              type: boolean
              description: >-
                Controls whether Seamlesspay will perform automatic collection
                of the invoice.
            collectionMethod:
              type: string
              enum:
                - charge_automatically
                - send_invoice
              description: >
                When `charge_automatically`, Seamlesspay will attempt to pay
                this invoice using the default payment method attached to the
                customer.

                When `send_invoice`, Seamlesspay will email this invoice to the
                customer with payment instructions.
            sendVia:
              type: array
              items:
                type: string
                enum:
                  - sms
                  - email
              description: A list of invoice send methods.
            memo:
              type: string
              description: An arbitrary string. Often useful for displaying to users.
            footer:
              type: string
              description: Footer to be displayed on the invoice.
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
            terms:
              type: string
              enum:
                - dueOnReceipt
                - net5days
                - net7days
                - net14days
                - net21days
                - net30days
                - net45days
                - net60days
                - net90days
              description: Invoice terms before it becomes past due.
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the object.
                  productID:
                    type: string
                    description: Product ID
                  name:
                    type: string
                    description: Invoice item name
                  quantity:
                    type: integer
                    description: >-
                      Non-negative integer. The quantity of units for the
                      invoice item.
                  price:
                    type: number
                    description: Item price (per 1 unit)
                  amount:
                    type: number
                    description: >-
                      Amount of the invoice item. This should always be equal to
                      `price` * `quantity`.
                  taxRates:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The display name of the tax rate.
                        amount:
                          type: number
                          description: Amount of the invoice item tax rate.
                        percentage:
                          type: number
                          description: This represents the tax rate percent out of 100.
                        taxRateId:
                          type: string
                          description: The tax rate ID.
                    description: The tax rates applied to this invoice item, if any.
                description: Invoice item
              description: Invoice items
          example:
            id: INV_01E8YHM3PX9YBXAJT57Z5MSXJ0
            customerID: CUS_01DZ3W8RDWRJ0KNGEGSFATVBSJ
            token: TKN_01DYSXWH64DX25DCMENHTCQ00N
            subscriptionID: null
            invoiceNumber: '1002003'
            transactionID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            status: Paid
            paymentDueDate: '2020-07-15T19:43:12.730Z'
            paymentProcessing: false
            amounts:
              total: 47.02
              discount: 0
              tax: 10
            defaultTaxRates:
              - name: Default Tax Rate
                percentage: 7
                taxRateId: TXR_01SPWOKJ11FC15MVVABHIRP41Z
            autoAdvance: true
            collectionMethod: send_invoice
            sendVia:
              - email
            memo: Thanks for your business!
            footer: Invoice footer
            metadata: '{"customOption":"example"}'
            terms: net7days
            items:
              - id: IIM_01E8YHM3PX9YBXAJT57Z5MSGQ1
                productID: PDT_01ED40377ZB8ZMZ2XBRTMRC9T5
                name: Product Name
                quantity: 3
                price: 12.34
                amount: 37.02
                taxRates:
                  - amount: 1.85
                    name: Tax Rate
                    percentage: 5
                    taxRateId: TXR_01BNGK1GAKJQ2K0CB313GX95QF
        - $ref: '#/components/schemas/ModelsDate'
    Invoice:
      allOf:
        - $ref: '#/components/schemas/InvoiceBase'
    InvoiceDraft:
      allOf:
        - $ref: '#/components/schemas/InvoiceBase'
        - type: object
          example:
            subscriptionID: null
            transactionID: null
            status: Draft
    InvoiceOpen:
      allOf:
        - $ref: '#/components/schemas/InvoiceBase'
        - type: object
          example:
            subscriptionID: null
            transactionID: null
            status: Open
    InvoiceVoided:
      allOf:
        - $ref: '#/components/schemas/InvoiceBase'
        - type: object
          example:
            subscriptionID: null
            transactionID: null
            status: Voided
    InvoiceUncollectible:
      allOf:
        - $ref: '#/components/schemas/InvoiceBase'
        - type: object
          example:
            subscriptionID: null
            transactionID: null
            status: Uncollectible
    TaxRate:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            name:
              type: string
              description: The display name of the tax rate.
            inclusive:
              type: boolean
              description: This specifies if the tax rate is inclusive or exclusive.
            percentage:
              type: number
              description: This represents the tax rate percent out of 100.
            active:
              type: boolean
              description: >-
                Flag determining whether the tax rate is active or inactive
                (archived). Inactive tax rates continue to work where they are
                currently applied however they cannot be used for new
                applications.
            description:
              type: string
              description: >-
                An arbitrary string attached to the tax rate for your internal
                use only. It will not be visible to your customers.
          example:
            id: TXR_01E8YHM3PX9YBXAJT57Z5VSX25
            name: VAT
            inclusive: true
            active: true
            percentage: 7
            description: VAT US
        - $ref: '#/components/schemas/ModelsDate'
    TaxRateInactive:
      allOf:
        - $ref: '#/components/schemas/TaxRate'
        - type: object
          example:
            active: false
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
        expiresAt:
          type: string
          description: Unix timestamp representing the expiration time
      example:
        accessToken: OTP_e297f371-6125-48ed-a01d-0bbac00033f5
        expiresAt: '1667332966'
    AccessTokenRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - one_time_password
          description: Access token type
      example:
        type: one_time_password
  parameters:
    authorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: '``Bearer {SECRET_API_KEY}``'
      required: true
    panVaultAuthorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: '``Bearer {PUBLISHABLE_API_KEY}``'
      required: true
    sessionAuthorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: >-
        Authorization header containing your base_64 encoded [Session
        ID](/#operation/createCheckoutSession).
      required: true
    apiVersion:
      name: API-Version
      in: header
      schema:
        type: string
      description: >-
        API-Version parameter switches the version used by API calls. Calls with
        no API-Version parameter use the latest version of the API by default.
      required: false
    platformVersion:
      name: SeamlessPay-Account
      in: header
      schema:
        type: string
      description: >-
        The SeamlessPay-Account parameter contains the Sub Merchant Account ID.
        This allows you to call the API with the master merchant API key.
      required: false
    client:
      name: client
      in: query
      schema:
        type: string
      description: Client ID - issued when you created your app.
      required: true
    merchant:
      name: merchant
      in: query
      schema:
        type: string
      description: The merchant's identifier.
      required: true
    groupBy:
      name: groupBy
      in: query
      schema:
        type: string
      description: Group data by field
    accountNumber:
      name: accountNumber
      in: query
      schema:
        type: string
      required: true
      description: Account Number
    limit:
      name: $limit
      in: query
      schema:
        type: integer
      example: 2
      description: >-
        $limit will return only the number of results you specify.
        <br><br>`?$limit=2`
    skip:
      name: $skip
      in: query
      schema:
        type: integer
      example: 2
      description: $skip will skip the specified number of results. <br><br>`?$skip=2`
    sort:
      name: $sort
      in: query
      schema:
        type: string
      description: >-
        $sort will sort based on the object you provide. It can contain a list
        of properties by which to sort mapped to the order (1 ascending, -1
        descending). <br><br>`?$sort[fieldName]=-1`
    select:
      name: $select
      in: query
      schema:
        type: string
      description: >-
        $select allows to pick which fields to include in the result. This will
        work for any service method. <br><br>`?$select[fieldName]=text`
    in:
      name: $in
      in: query
      schema:
        type: string
      description: >-
        Find all records where the property does ($in) or does not ($nin) match
        any of the given values. <br><br>`?fieldName[$in]=2`
    nin:
      name: $nin
      in: query
      schema:
        type: string
      description: >-
        Find all records where the property does ($in) or does not ($nin) match
        any of the given values. <br><br>`?fieldName[$nin]=2`
    lt:
      name: $lt
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is less ($lt) or less and equal ($lte)
        to a given value. <br><br>`?fieldName[$lt]=1479664146607`
    lte:
      name: $lte
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is less ($lt) or less and equal ($lte)
        to a given value. <br><br>`?fieldName[$lte]=1479664146607`
    gt:
      name: $gt
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is more ($gt) or more and equal ($gte)
        to a given value. <br><br>`?fieldName[$gt]=1479664146607`
    gte:
      name: $gte
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is more ($gt) or more and equal ($gte)
        to a given value. <br><br>`?fieldName[$gte]=1479664146607`
    ne:
      name: $ne
      in: query
      schema:
        type: string
      description: >-
        Find all records that do not equal the given property value.
        <br><br>`?fieldName[$ne]=false`
    or:
      name: $or
      in: query
      schema:
        type: string
      description: >-
        Find all records that match any of the given criteria.
        <br><br>`?$or[0][fieldName][$ne]=false&$or[1][fieldName][$gte]=0`
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Authorization
    Session:
      type: session
      in: header
      name: Authorization
  requestBodies:
    Charge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeRequest'
      required: true
    CheckoutSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutSessionRequest'
      required: true
    CheckoutCharge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutChargeRequest'
      required: true
    Adjustment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdjustmentRequest'
      required: true
    Refund:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundRequest'
      required: true
    Capture:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CaptureRequest'
      required: true
    Void:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoidRequest'
      required: true
    Credit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreditRequest'
      required: true
    ApplePayDomains:
      content:
        application/json:
          schema:
            type: object
            properties:
              domainName:
                type: string
                description: Domain name.
            required:
              - domainName
            example:
              domainName: test-domain.com
      required: true
    UpdateTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeUpdateRequest'
      required: true
    UpdateRefund:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundUpdateRequest'
      required: true
    Customer:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The customer's name.
              email:
                type: string
                description: The customer's email.
              companyName:
                type: string
                description: The customer's company name.
              description:
                type: string
                description: The customer's notes.
              metadata:
                type: string
                description: >-
                  Optional, for JSON object with up to 8 fields and 64 chars
                  limit.
              phone:
                type: string
                pattern: ^$|^[0-9]{10,10}$
                description: The customer's phone number.
              website:
                type: string
                description: The customer's website.
              address:
                type: object
                properties:
                  line1:
                    type: string
                    description: The customer's address 1.
                  line2:
                    type: string
                    description: The customer's address 2.
                  city:
                    type: string
                    description: The customer's city.
                  country:
                    type: string
                    pattern: ^$|^[0-9A-Za-z]{2,2}$
                    description: The customer's country.
                  state:
                    type: string
                    pattern: ^$|^[0-9A-Za-z]{2,2}$
                    description: The customer's state.
                  postalCode:
                    type: string
                    maxLength: 10
                    description: The customer's postal code.
                description: The customer's address.
              paymentMethods:
                type: array
                xml:
                  name: paymentMethod
                  wrapped: true
                items:
                  type: object
                  xml:
                    name: paymentMethod
                  properties:
                    nickname:
                      type: string
                      description: The payment method's name.
                    token:
                      type: string
                      description: The token.
                  required:
                    - token
                description: The customer's payment methods.
            required:
              - name
              - email
            example:
              name: Michael Smith
              email: hello@seamlesspay.com
              companyName: ABC Business
              description: ABC Business
              metadata: '{"customOption":"example"}'
              phone: '2125555000'
              website: https://example.com
              address:
                line1: 400 Madison Ave
                line2: 10th Fl
                city: New York
                country: US
                state: NY
                postalCode: '10010'
              paymentMethods:
                - nickname: Visa card
                  token: TKN_01CBH0CKW6571SC337SWKSDCAE
    SubMerchant:
      content:
        application/json:
          schema:
            type: object
            properties:
              address1:
                type: string
                description: The primary address.
              address2:
                type: string
                description: The second address.
              businessName:
                type: string
                description: DBA.
              city:
                type: string
                description: City.
              country:
                type: string
                description: The customer's country.
              DDAnumber:
                type: string
                description: Bank account.
              dateOfBirth:
                type: string
                description: Date of birth.
              email:
                type: string
                description: Email.
              firstName:
                type: string
                description: The customer's name.
              lastName:
                type: string
                description: The customer's last name.
              phone:
                type: string
                maxLength: 10
                minLength: 10
                description: Phone.
              routingNumber:
                type: string
                maxLength: 9
                minLength: 9
                description: Routing number.
              subMerchantEntityName:
                type: string
                description: Business name.
              state:
                type: string
                maxLength: 2
                minLength: 2
                description: The merchant's state.
              ssn:
                type: string
                description: SSN.
              taxID:
                type: string
                description: The merchant's tax.
              zip:
                type: string
                maxLength: 5
                minLength: 5
                description: The merchant's zip.
            required:
              - DDAnumber
              - businessName
              - dateOfBirth
              - firstName
              - lastName
              - email
              - routingNumber
              - state
              - city
              - taxID
              - zip
            example:
              address1: 400 Madison Ave
              address2: 10th Fl
              businessName: '123'
              city: New York
              dateOfBirth: '1960-01-02'
              DDAnumber: '0000000000'
              email: xyz@business.com
              firstName: Michael
              lastName: Smith
              phone: '2125555000'
              routingNumber: '123456789'
              ssn: '123457890'
              state: NY
              subMerchantEntityName: XYZ Business
              taxID: '271234567'
              zip: '10010'
      required: true
    Webhook:
      content:
        application/json:
          schema:
            type: object
            properties:
              endpointType:
                type: string
                enum:
                  - Standard
                  - Connected
                description: >-
                  The webhook's type (Standard/Connected). When using
                  "Connected", you can also receive notifications of events that
                  occur in connected accounts.
              payloadUrl:
                type: string
                pattern: ^(https:\/\/).*
                description: The webhook's url.
              secret:
                type: string
                description: The webhook's header token.
              webhookSubscriptions:
                type: array
                items:
                  type: object
                  properties:
                    event:
                      type: string
                    service:
                      type: string
                description: The webhook's events.
            required:
              - endpointType
              - payloadUrl
              - secret
              - webhookSubscriptions
            example:
              endpointType: Standard
              payloadUrl: https://www.example.com/webhook
              secret: '50991311'
              webhookSubscriptions:
                - event: created
                  service: customers
      required: true
    CloseBatch:
      content:
        application/json:
          schema:
            type: object
            properties:
              batchID:
                type: string
                description: The batch ID.
            required:
              - batchID
            example:
              batchID: BCH_01C6ZF2MB6K61AYM63AX89NCS5
      required: true
    Batch:
      content:
        application/json:
          schema:
            type: object
            properties:
              batchId:
                type: string
                description: The batch ID.
            required:
              - batchId
            example:
              batchId: BCH_01C6ZF2MB6K61AYM63AX89NCS5
      required: true
    GiftCard:
      content:
        application/json:
          schema:
            properties:
              accountNumber:
                type: string
                description: A gift card account number (if not using token).
              token:
                type: string
                description: An existing token representing the gift card account.
              amount:
                type: string
                maxLength: 12
                description: >-
                  Amount to add to stored value account, as String with 2
                  decimal places e.g “25.00”.
              idempotencyKey:
                type: string
                description: Optional, see section [above](#section/Idempotent-Requests).
            required:
              - amount
              - accountNumber
              - token
            example:
              accountNumber: '1238990000000018'
              token: tok_gift_card
              amount: '105.00'
              idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
      required: true
    GiftCardUpdate:
      content:
        application/json:
          schema:
            properties:
              amount:
                type: string
                maxLength: 12
                description: >-
                  Amount to add to stored value account, as String with 2
                  decimal places e.g “25.00”.
              idempotencyKey:
                type: string
                description: Optional, see section [above](#section/Idempotent-Requests).
            required:
              - amount
            example:
              amount: '105.00'
              idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
      required: true
    GiftCardInfo:
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  accountNumber:
                    type: string
            type: object
            properties:
              currency:
                type: string
                description: Card currency.
              pinNumber:
                type: string
                maxLength: 6
                description: ' Optional, value used to restrict access to gift card. A value used to restrict access to gift card. This field is divided into two subfields; the first 4 digits are the secondary security code (SSC) to be used with bar coded accounts. The second subfield is a 4 digit PIN number used for any card not present transaction or when the magnetic strip is not available to add extra security for the card account. Each Sub-field should be right justified left zero filled.'
            required:
              - accountNumber
            example:
              accountNumber: '1238990000000018'
      required: true
    PanVault:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PanVaultRequest'
      required: true
    GiftCardCancel:
      content:
        application/json:
          schema:
            type: object
            properties:
              transactionID:
                type: string
                maxLength: 31
                description: Transaction ID to cancel.
            required:
              - transactionID
            example:
              transactionID: TXN_01ARZ3NDEKTSV4RRFFQ69G5FAV
      required: true
    Product:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                maxLength: 140
                description: The product's name.
              unit:
                type: string
                maxLength: 30
                description: A label that represents units of this product.
              descriptor:
                type: string
                description: The product’s descriptor.
            required:
              - name
              - unit
            example:
              name: Product Name
              unit: seats
              descriptor: Descriptor
    Plan:
      content:
        application/json:
          schema:
            type: object
            properties:
              planName:
                type: string
                maxLength: 140
                description: Plan Name
              productID:
                type: string
                maxLength: 30
                description: The product ID.
              paymentPlanType:
                type: string
                enum:
                  - Recurring
                  - Metered
                description: Payment Plan Type
              price:
                type: object
                properties:
                  amount:
                    type: number
                    description: Amount
                  numberOfUnit:
                    type: integer
                    description: Number of unit
                required:
                  - amount
              billing:
                type: object
                properties:
                  intervalPeriod:
                    type: string
                    enum:
                      - days
                      - weeks
                      - months
                      - years
                    description: Payment plan billing interval period
                  intervalCount:
                    type: integer
                    description: Payment plan billing interval count
                required:
                  - intervalPeriod
                  - intervalCount
              trial:
                type: object
                properties:
                  trialInterval:
                    type: string
                    enum:
                      - days
                      - weeks
                      - months
                    description: Trial Interval
                  trialCount:
                    type: integer
                    description: Trial Count
                required:
                  - trialInterval
                  - trialCount
            required:
              - planName
              - productID
              - paymentPlanType
              - price
              - billing
            example:
              planName: Product payment plan name
              productID: PDT_01E8Q215A4SXTH4Z47G97MD70S
              paymentPlanType: Recurring
              price:
                amount: 52.97
                numberOfUnit: 1
              billing:
                intervalPeriod: months
                intervalCount: 3
              trial:
                trialInterval: days
                trialCount: 2
    UsageRecord:
      content:
        application/json:
          schema:
            type: object
            properties:
              subscriptionItemID:
                type: string
                maxLength: 30
                description: Subscription item ID.
              quantity:
                type: integer
                description: >-
                  The quantity of good/services used for the current billing
                  period for a specific subscription item.
            required:
              - subscriptionItemID
              - quantity
            example:
              subscriptionItemID: SIM_01E8W5PCSC037FYT0GQJ851492
              quantity: 1
    UpdateUsageRecord:
      content:
        application/json:
          schema:
            type: object
            properties:
              quantity:
                type: integer
                description: >-
                  The quantity of good/services used for the current billing
                  period for a specific subscription item.
            required:
              - quantity
            example:
              quantity: 1
    Subscription:
      content:
        application/json:
          schema:
            type: object
            properties:
              customerID:
                type: string
                maxLength: 30
                description: Customer ID
              token:
                type: string
                maxLength: 30
                description: The customer's token
              items:
                type: array
                items:
                  type: object
                  properties:
                    paymentPlanID:
                      type: string
                      maxLength: 30
                      description: Payment plan ID
                    numberOfUnit:
                      type: integer
                      description: Number of unit
                  description: Subscription Item
                  required:
                    - paymentPlanID
                description: Subscription Items
              reminderDays:
                type: string
                enum:
                  - 1
                  - 3
                  - 7
                  - 15
                  - 30
                  - 45
                description: >-
                  Amount of days before the billing due date the invoice is
                  generated and sent to the customer.
              billingType:
                type: string
                enum:
                  - automatic
                  - manual
                description: Billing type
              discountAmount:
                type: number
                description: Discount amount
              taxAmount:
                type: number
                description: Tax amount
              overrideTrialLength:
                type: object
                properties:
                  trialInterval:
                    type: string
                    enum:
                      - days
                      - weeks
                      - months
                    description: Trial interval
                  trialCount:
                    type: integer
                    description: Trial count
                required:
                  - trialInterval
                  - trialCount
            required:
              - customerID
              - token
              - items
              - billingType
              - reminderDays
            example:
              customerID: CUS_01DZ3W8RDWRJ0KNGEGSFATVBSJ
              token: TKN_01DYSXWH64DX25DCMENHTCQ00N
              items:
                - paymentPlanID: PDP_01E8S1R4XAF6DW0CG3T48P1B57
                  numberOfUnit: 1
                - paymentPlanID: PDP_01E8S02XRT1XP2TQXX0EZDSDKF
                  numberOfUnit: 2
              reminderDays: '7'
              billingType: automatic
              discountAmount: 1.5
              taxAmount: 2.05
              overrideTrialLength:
                trialInterval: months
                trialCount: 2
    UpdateSubscription:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                maxLength: 30
                description: The customer's token
              items:
                type: array
                items:
                  type: object
                  properties:
                    paymentPlanID:
                      type: string
                      maxLength: 30
                      description: Payment plan ID
                    numberOfUnit:
                      type: integer
                      description: Number of unit
                  description: Subscription item
                  required:
                    - paymentPlanID
                description: Subscription items
              billingType:
                type: string
                enum:
                  - automatic
                  - manual
                description: Billing type
              discountAmount:
                type: number
                description: Discount amount
              taxAmount:
                type: number
                description: Tax amount
              status:
                type: string
                enum:
                  - Active
                  - Cancelled
                description: Subscription status
            required:
              - token
            example:
              token: TKN_01DYSXWH64DX25DCMENHTCQ00N
              items:
                - paymentPlanID: PDP_01E8S1R4XAF6DW0CG3T48P1B57
                  numberOfUnit: 1
                - paymentPlanID: PDP_01E8S02XRT1XP2TQXX0EZDSDKF
                  numberOfUnit: 2
              billingType: automatic
              discountAmount: 1.5
              taxAmount: 2.05
              status: Active
    Invoice:
      content:
        application/json:
          schema:
            type: object
            properties:
              customerID:
                type: string
                maxLength: 30
                description: Customer ID
              token:
                type: string
                maxLength: 30
                description: The customer's token
              autoAdvance:
                type: boolean
                default: false
                description: >
                  Controls whether Seamlesspay will perform automatic collection
                  of the invoice:
                    - Automatically finalizing invoice (Approximately an hour later. This delay provides an opportunity for 3rd party tools to update the invoice).
                    - Automatically attempting to collect payment.
                    - Emailing invoice and receipt.

                  When `false`, the invoice’s state will not automatically
                  advance without an explicit action.


                  One-off invoices created via the API will not automatically be
                  advanced unless autoAdvance is explicitly set to `true`.
              collectionMethod:
                type: string
                default: charge_automatically
                enum:
                  - charge_automatically
                  - send_invoice
                description: >
                  When `charge_automatically`, Seamlesspay will attempt to pay
                  this invoice using the default payment method attached to the
                  customer.

                  When `send_invoice`, Seamlesspay will email this invoice to
                  the customer with payment instructions.
              sendVia:
                type: array
                items:
                  type: string
                  enum:
                    - sms
                    - email
                description: >-
                  Accepts a list of invoice send methods. This value is required
                  for invoices where collectionMethod=send_invoice.
              memo:
                type: string
                description: An arbitrary string. Often useful for displaying to users.
              footer:
                type: string
                description: Footer to be displayed on the invoice.
              metadata:
                type: string
                description: >-
                  Optional, for JSON object with up to 8 fields and 64 chars
                  limit.
              terms:
                type: string
                enum:
                  - dueOnReceipt
                  - net5days
                  - net7days
                  - net14days
                  - net21days
                  - net30days
                  - net45days
                  - net60days
                  - net90days
                description: >-
                  Invoice terms before it becomes past due. This value is
                  required for invoices where collectionMethod=send_invoice.
              defaultTaxRates:
                type: array
                items:
                  type: string
                  maxLength: 30
                  description: The tax rate ID
                description: The tax rates applied to this invoice, if any.
              items:
                type: array
                items:
                  type: object
                  properties:
                    productID:
                      type: string
                      maxLength: 30
                      description: Product ID (required if item name is not provided)
                    name:
                      type: string
                      maxLength: 140
                      description: >-
                        Invoice item name (use as one-off item, required if
                        productID is not provided)
                    quantity:
                      type: integer
                      default: 1
                      description: >-
                        Non-negative integer. The quantity of units for the
                        invoice item.
                    price:
                      type: number
                      default: 0
                      description: Item price (per 1 unit)
                    taxRates:
                      type: array
                      items:
                        type: string
                        maxLength: 30
                        description: The tax rate ID
                      description: The tax rates applied to this invoice item.
                  description: Invoice item
                  required:
                    - productID
                description: Invoice items
            required:
              - customerID
              - terms
            example:
              customerID: CUS_01DZ3W8RDWRJ0KNGEGSFATVBSJ
              token: TKN_01DYSXWH64DX25DCMENHTCQ00N
              autoAdvance: true
              collectionMethod: send_invoice
              sendVia:
                - email
              memo: Thanks for your business!
              footer: Invoice footer
              metadata: '{"customOption":"example"}'
              terms: net7days
              defaultTaxRates:
                - TXR_01SPWOKJ11FC15MVVABHIRP41Z
              items:
                - productID: PDT_01ED40377ZB8ZMZ2XBRTMRC9T5
                  quantity: 3
                  price: 12.34
                  taxRates:
                    - TXR_01BNGK1GAKJQ2K0CB313GX95QF
    InvoiceUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                maxLength: 30
                description: The customer's token
              collectionMethod:
                type: string
                default: charge_automatically
                enum:
                  - charge_automatically
                  - send_invoice
                description: >
                  When `charge_automatically`, Seamlesspay will attempt to pay
                  this invoice using the default payment method attached to the
                  customer.

                  When `send_invoice`, Seamlesspay will email this invoice to
                  the customer with payment instructions.
              memo:
                type: string
                description: An arbitrary string. Often useful for displaying to users.
              footer:
                type: string
                description: Footer to be displayed on the invoice.
              metadata:
                type: string
                description: >-
                  Optional, for JSON object with up to 8 fields and 64 chars
                  limit.
              terms:
                type: string
                enum:
                  - dueOnReceipt
                  - net5days
                  - net7days
                  - net14days
                  - net21days
                  - net30days
                  - net45days
                  - net60days
                  - net90days
                description: >-
                  Invoice terms before it becomes past due. This value is
                  required for invoices where collectionMethod=send_invoice.
              defaultTaxRates:
                type: array
                items:
                  type: string
                  maxLength: 30
                  description: The tax rate ID
                description: The tax rates applied to this invoice, if any.
              items:
                type: array
                items:
                  type: object
                  properties:
                    productID:
                      type: string
                      maxLength: 30
                      description: Product ID (required if item name is not provided)
                    name:
                      type: string
                      maxLength: 140
                      description: >-
                        Invoice item name (use as one-off item, required if
                        productID is not provided)
                    quantity:
                      type: integer
                      default: 1
                      description: >-
                        Non-negative integer. The quantity of units for the
                        invoice item.
                    price:
                      type: number
                      default: 0
                      description: Item price (per 1 unit)
                    taxRates:
                      type: array
                      items:
                        type: string
                        maxLength: 30
                        description: The tax rate ID
                      description: The tax rates applied to this invoice item.
                  description: Invoice item
                  required:
                    - productID
                description: Invoice items
            example:
              token: TKN_01DYSXWH64DX25DCMENHTCQ00N
              autoAdvance: true
              collectionMethod: send_invoice
              memo: Thanks for your business!
              footer: Invoice footer
              metadata: '{"customOption":"example"}'
              terms: net7days
              defaultTaxRates:
                - TXR_01SPWOKJ11FC15MVVABHIRP41Z
              items:
                - productID: PDT_01ED40377ZB8ZMZ2XBRTMRC9T5
                  quantity: 3
                  price: 12.34
                  taxRates:
                    - TXR_01BNGK1GAKJQ2K0CB313GX95QF
    InvoicePay:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                maxLength: 30
                description: The invoice customer's token
              paidOutOfBand:
                type: boolean
                default: false
                description: >
                  Boolean representing whether an invoice is paid outside of
                  Seamlesspay.

                  This will result in no charge being made.
            example:
              token: TKN_01DYSXWH64DX25DCMENHTCQ00N
    TaxRate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The display name of the tax rate.
              inclusive:
                type: boolean
                description: This specifies if the tax rate is inclusive or exclusive.
              percentage:
                type: number
                description: This represents the tax rate percent out of 100.
              active:
                type: boolean
                default: true
                description: >-
                  Flag determining whether the tax rate is active or inactive
                  (archived). Inactive tax rates continue to work where they are
                  currently applied however they cannot be used for new
                  applications.
              description:
                type: string
                description: >-
                  An arbitrary string attached to the tax rate for your internal
                  use only. It will not be visible to your customers.
            required:
              - name
              - inclusive
              - percentage
            example:
              name: VAT
              inclusive: true
              percentage: 7
              description: VAT US
    TaxRateUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The display name of the tax rate.
              active:
                type: boolean
                default: true
                description: >-
                  Flag determining whether the tax rate is active or inactive
                  (archived). Inactive tax rates continue to work where they are
                  currently applied however they cannot be used for new
                  applications.
              description:
                type: string
                description: >-
                  An arbitrary string attached to the tax rate for your internal
                  use only. It will not be visible to your customers.
            example:
              active: false
    AccessToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessTokenRequest'
      required: true
  responses:
    '401':
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  errors:
                    type: object
          example:
            name: NotAuthenticated
            code: 401
            className: not-authenticated
            data:
              statusCode: 401
              statusDescription: Authentication failed
              errors:
                - null
      description: Not Authenticated
    '404':
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              className:
                type: string
              message:
                type: string
              name:
                type: string
          example:
            name: NotFound
            message: Item not found.
            code: 404
            className: not-found
            errors: null
      description: Item not found
    '422':
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: string
                      statusCode:
                        type: string
                      statusDescription:
                        type: string
          example:
            name: Unprocessable
            message: Validation error
            code: 422
            className: unprocessable
            data:
              statusCode: '110'
              statusDescription: Validation error
              errors:
                - error
      description: Unprocessable
    AllRefund:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Refund'
      description: Success
    AllCaptures:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Capture'
      description: Success
    AllVoids:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Void'
      description: Success
    Transaction:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
    Charge:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Charge'
    ChargeCreate:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeCreate'
    AllCharges:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Charge'
      description: Success
    Credit:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credit'
    Adjustment:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Adjustment'
    Refund:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    Capture:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    Void:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Void'
    AllCustomers:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
      description: Success
    Customer:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    AllSubMerchants:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubMerchant'
      description: Success
    SubMerchant:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubMerchant'
      description: Success
    OpenBatches:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OpenBatches'
      description: Success
    AllWebhooksEvents:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookEvent'
      description: Success
    Webhook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
      description: Success
    WebhookEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
      description: Success
    AllBatches:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OpenBatches'
      description: Success
    CloseBatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloseBatch'
      description: Success
    BatchCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBatch'
      description: Success
    Batch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Batch'
      description: Success
    AllPayouts:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payout'
      description: Success
    AllStatements:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Statement'
      description: Success
    AllPCI:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PCI'
      description: Success
    AllIRS:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/IRS'
      description: Success
    AllDisputes:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dispute'
      description: Success
    AllRetrievals:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Retrieval'
      description: Success
    BinLookups:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BinLookups'
      description: Success
    GiftCard:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  token:
                    type: string
                    description: The gift card account token.
                  balance:
                    type: string
                    description: String with 2 decimal places e.g “25.00”.
                    example: '200.00'
                  currency:
                    $ref: '#/components/schemas/Currency'
                  giftCardStatus:
                    type: string
                    description: Gift Card status
                    example: active
                  lastFour:
                    type: string
                    description: Last four of account number.
                example:
                  token: tok_gift_card
                  balance: '200.00'
                  currency: USD
                  giftCardStatus: active
                  lastFour: '0018'
              - $ref: '#/components/schemas/ModelsDate'
      description: Success
    GiftCardReload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardReload'
      description: Success
    GiftCardRemove:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  balance:
                    type: string
                    description: String with 2 decimal places e.g “25.00”.
                    example: '200.00'
                  currency:
                    $ref: '#/components/schemas/Currency'
                  giftCardStatus:
                    type: string
                    description: Gift Card status
                    example: active
                  lastFour:
                    type: string
                    description: Last four of account number.
                example:
                  balance: '200.00'
                  currency: USD
                  giftCardStatus: active
                  lastFour: '0018'
              - $ref: '#/components/schemas/ModelsDate'
      description: Success
    GiftCardInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardInfo'
      description: Success
    PanVault:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PanVault'
      description: Success
    Product:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    AllProducts:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
      description: Success
    Plan:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plan'
    AllPlans:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
      description: Success
    UsageRecord:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsageRecord'
    Subscription:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerSubscription'
    AllSubscriptions:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomerSubscription'
      description: Success
    Invoice:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
    InvoiceDraft:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvoiceDraft'
    InvoiceOpen:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvoiceOpen'
    InvoiceVoided:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvoiceVoided'
    InvoiceUncollectible:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvoiceUncollectible'
    AllInvoices:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invoice'
      description: Success
    TaxRate:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaxRate'
    TaxRateInactive:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaxRateInactive'
    AllTaxRates:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaxRate'
      description: Success
    ApplePayDomains:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApplePayDomains'
      description: Success
    AccessTokenCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessToken'
      description: Success
