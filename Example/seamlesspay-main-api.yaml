openapi: 3.1.0
info:
  version: v2019
  title: Main API
  description: >
    # Overview


    The Seamless Payments API is organized around REST, and responses are sent
    using JSON. Our API is designed to have predictable, resource-oriented URLs
    and to use HTTP response codes to indicate API errors. Use our API to
    integrate your website, software application, mobile app and more. This
    documentation is a work in progress.


    ### API Endpoints:


    - Sandbox: `https://sandbox.seamlesspay.com`


    - Production: `https://api.seamlesspay.com`


    ### PAN Vault Endpoints:


    - Sandbox: `https://sandbox-pan-vault.seamlesspay.com`


    - Production: `https://pan-vault.seamlesspay.com`


    # Authentication


    In order to authenticate your account, you must first generate an API Key.
    Once you've created an account, generating an API key is simple:


    1. Login to your Seamless Payments account Dashboard


    2. Select 'API Keys' in left side bar


    3. Click on 'Reveal Secret Key' button



    Your secret API key should never be shared publicly or accessible, such as
    committed code on GitHub, client-side code, etc.



    Authentication to the API is performed via [bearer
    tokens](https://tools.ietf.org/html/rfc6750). Provide your API key as the
    bearer token value in the Authorization header.



    For API endpoints, use your **secret** key (prefixed with ``sk``). For PAN
    Vault, use your **publishable** key (prefixed with ``pk``).



    All API requests must be made using HTTPS. Calls made using plain HTTP will
    timeout. API requests without authentication will also timeout.



    ![alt text](/images/api-keys.png 'API Keys')


    # Idempotent Requests


    Network failures and integration logic can potentially result in the same
    API request being sent multiple times. The SeamlessPay API supports
    idempotent requests to prevent any requested operation from being
    inadvertently duplicated. To perform an idempotent request, assign a
    universally unique value to the idempotencyKey parameter in the request
    body. This is only necessary for API requests that create side effects (i.e.
    it's not necessary for API requests that just read data).


    Because the idempotencyKey is a unique external identifier associated with a
    specific transaction, it can also be used to reference a previous
    transaction when the system-generated transaction ID is not known. For
    example, a void can be requested using the idempotency key (instead of the
    transaction ID) of the original charge request.


    # Querying


    The Seamless Payments API support a common way for querying, sorting,
    limiting and selecting resources with REST `GET` method calls using URL
    query parameters and the following operators:


    ### Equality


    All fields that do not contain special query parameters are compared
    directly for equality.


    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?amount=10&currency=USD -H
    'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Limit `$limit`


    `$limit` will return only the number of results you specify:



    #### Example Request


    ````

    $ curl https://sandbox.seamlesspay.com/v1/transactions?currency=USD&$limit=2
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Skip `$skip`


    `$skip` will skip the specified number of results:



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?$limit=2&$skip=2&currency=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Sort `$sort`


    `$sort` will sort based on the object you provide. It can contain a list of
    properties by which to sort mapped to the order ( `1` ascending, `-1`
    descending).



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?$limit=10&$sort[createdAt]=-1
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Select `$select`


    `$select` allows to pick which fields to include in the result. This will
    work for any service method.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?$select[]=accountNumber&$select[]=date&$select[]=_id
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### In, Not In `$in`, `$nin`


    Find all records where the property does ( `$in`) or does not ( `$nin`)
    match any of the given values.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?currency[$in]=CAD&currency[$in]=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Less Than Range `$lt`, `$lte`


    Find all records where the value is less ( `$lt`) or less and equal (
    `$lte`) to a given value.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?txnDate[$lt]=1479664146607
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Greater Than Range `$gt`, `$gte`


    Find all records where the value is more ( `$gt`) or more and equal (
    `$gte`) to a given value.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?txnDate[$gt]=1479664146607
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Inequality `$ne`


    Find all records that do not equal the given property value.



    #### Example Request


    ````

    $ curl https://sandbox.seamlesspay.com/v1/transactions?processed[$ne]=true
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````



    ### Or `$or`


    Find all records that match any of the given criteria.



    #### Example Request


    ````

    $ curl
    https://sandbox.seamlesspay.com/v1/transactions?$or[0][status][$ne]=01&$or[1][currency]=USD
    -H 'Authorization: Bearer {SECRET_API_KEY}'

    ````


    # Test Cards


    ### Credit Cards


    |       Number       |            Token           |  Card Brand  
    |            Test Case            |

    |--------------------|----------------------------|---------------|---------------------------------|

    | `4242424242424242` | `tok_visa`                 | Visa          |
    Approval                        |

    | `5555555555554444` | `tok_mastercard`           | Mastercard    |
    Approval                        |

    | `378282246310005`  | `tok_amex`                 | Amex          |
    Approval                        |

    | `6011361000000000` | `tok_discover`             | Discover      |
    Approval                        |

    | `30569309025904`   | `tok_diners`               | Diners Club   |
    Approval                        |

    | `3566002020360505` | `tok_jcb`                  | JCB           |
    Approval                        |

    | `6200000000000005` | `tok_unionpay`             | Union Pay     |
    Approval                        |

    | `5105105105105100` | `tok_mastercard_prepaid`   | Mastercard    | Approval
    (Prepaid)              |

    | `4024007132771824` | `tok_successful_avs`       | Visa          | Approval
    (Successful AVS)       |

    | `4485245870307367` | `tok_successful_cvc`       | Visa          | Approval
    (Successful CVC)       |

    | `4716407216838809` | `tok_incorrect_street`     | Visa          | Decline
    (Incorrect Street)      |

    | `4539797450485720` | `tok_incorrect_zip`        | Visa          | Decline
    (Incorrect Postal Code) |

    | `4716280826204823` | `tok_incorrect_avs`        | Visa          | Decline
    (Incorrect AVS)         |

    | `4539690071186258` | `tok_incorrect_cvc`        | Visa          | Decline
    (Incorrect CVC)         |

    | `6011111111111117` | `tok_incorrect_cardnumber` | Discover      | Decline
    (Incorrect Card Number)
    |                                                                                                                                             
    |


    ### Gift Cards


    |       Number       |      Token      |  Test Case  |

    |--------------------|-----------------|-------------|

    | `1238990000000018` | `tok_gift_card` | Approval    |


    # Transaction Statuses


    ### AUTHORIZED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `approved` | Transaction approved | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`
     `authorized_token_updated` | Token data was updated | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `new_account_information_avail` | Updated bank routing and/or account information | `ACH`

    ### CAPTURED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `captured` | Transaction capture success | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `captured_token_updated` | Token data was updated | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`

    ### DECLINED

     statusCode                    | statusDescription   | txnType
      -------------------------------|---------------------|-------------
     `account_activated` | Account is already activated | `GIFT_CARD`
     `account_already_issued` | Account is already in use | `GIFT_CARD`
     `account_compromised` | Card reported compromised, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `account_not_issued` | Account hasn't been activated | `GIFT_CARD`
     `call_for_authorization` | Contact issuer for authorization | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `contact_issuer` | Cardholder should contact issuer for support | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `declined_account_update` | Issuer provided updated account number, new token provided | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `declined_token_updated` | Token was declined | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `do_not_honor` | Card has been declined for unknown reason | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `duplicate_transaction` | Duplicate transaction detected | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `expired_card` | Card is expired | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `fee_txn_decline` | Transaction Decline (invalid fee) | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`
     `generic_decline` | Generic decline, customer should contact issuer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `inactive_account` | Customer should contact their issuer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_account_number` | Incorrect account number | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_amount` | Incorrect amount | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `incorrect_authorization` | Authorization data incorrect | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `incorrect_avs` | Address verification failed by card issuer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_currency` | The currency provided was incorrect | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_cvc` | The CVC/CVV information provided was incorrect | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_expiration` | The expiration provided was incorrect | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_parameters` | Data provided is incorrect, update transaction information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `incorrect_pin` | The PIN number provided was incorrect | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_routing_number` | Routing number is incorrect | `ACH`
     `incorrect_street` | Street address failed card issuer verification | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `incorrect_zip` | Zip code failed card issuer verification | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `insufficient_funds` | Insufficient funds | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `issuer_not_available` | Issuer system is unavailable, please try again | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `limit_exceeded` | Merchant threshold exceeded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `lost_card` | Card reported lost, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `merchant_block` | Card number blocked by merchant | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `payment_type_not_supported` | Merchant doesn't support payment type | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `payment_velocity_exceeded` | Too many attempts, please wait and retry later | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `pin_required` | Transaction requires PIN entry | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `pin_try_exceeded` | Too many PIN attempts, please wait and retry | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `refund_not_supported` | Transaction does not support refunds | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `restricted_payment` | Account restrictions in place, please contact issuer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `revocation_of_authorization` | Your card was declined | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `risk_acquirer_detected` | Acquirer has detected fraud, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `risk_fraudulent` | Seamless has flagged this transaction as fraudulent, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `risk_issuer_detected` | Issuer has detected fraud, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `risk_processor_detected` | Seamless risk issue detected, contact support, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `risk_review` | Merchants risk thresholds exceeded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `risk_score_exceeded` | Risk score exceeded thresholds, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `risk_table` | Prior transaction created risk issue | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `stolen_card` | Card reported stolen, return generic decline to customer | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `test_mode_decline` | Test card used in live mode | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `transaction_not_allowed` | Transaction type is not allowed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `try_again_later` | The card has been declined for an unknown reason, please try again later | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `withdrawal_amount_exceeded` | Account withdrawal amount exceeded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `withdrawal_count_exceeded` | Account withdrawal count exceeded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`

    ### ERROR

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `account_affiliation_failed` | There is no affiliation between accounts | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `account_denied` | The merchant application has been denied. please contact support for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `account_email_already_exists` | The email address provided for the creation account already has an account associated with it | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `account_number_exchanged` | Account number has been exchanged for a new number | `GIFT_CARD`
     `account_pended` | The merchant application has been pended. please contact support for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `account_signup_error` | Please check new application details for errors | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `account_under_review` | The merchant application is under review. please contact support for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `already_reversed` | Transaction has already been reversed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `api_key_expired` | Your API key has expired, please update key | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `authentication_failed` | Authentication of the provided credientials has failed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `balance_insufficient` | The transfer or payout could not be completed because the associated account does not have a sufficient balance available | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `batch_error` | Batch closure has failed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `character_limit_exceeded` | Character limit was exceeded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `charge_already_captured` | The transaction you’re attempting to capture has already been captured | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `charge_already_refunded` | The transaction you’re attempting to refund has already been refunded | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `charge_already_settled` | The transaction you’re attempting to capture/void has already been settled | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`
     `charge_already_voided` | The transaction you’re attempting to void has already been voided | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `charge_disputed` | The charge you’re attempting to refund has been charged back | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `charge_expired_for_capture` | The transaction cannot be captured as the authorization has expired | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `country_unsupported` | Country is not yet supported | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `coupon_expired` | The coupon provided for a subscription or order has expired | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `emv_error` | EMV error, contact processor for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `encryption_error` | Encryption issue, contact processor for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `external_account_setup_error` | Incorrect third party account configuration | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `general_error` | General error, please try again | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `idempotency_key_in_use` | The idempotency key provided is currently being used in another request | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `incorrect_account_range` | Account range of numbers isn't supported at location | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `invalid_account_number` | The account number provided is invalid (e.g., missing digits) | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `invalid_email` | The email address is invalid (e.g., not properly formatted) | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `invalid_expiration` | The card has expired. Check the expiration date or use a different card | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `invalid_mcc` | The merchant category code provided is invalid | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `invalid_merchant` | Merchant account is closed and/or inactive, contact support | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `invalid_parameter_provided` | One or more values provided contains a validation error | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `invalid_tax_id` | The tax ID number provided is invalid (e.g., missing digits) | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `issuance_error` | Account creation error | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`
     `issuer_error` | Issuer error, contact issuer for more details | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `magstripe_error` | Magstripe error, contact processor for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `pin_encryption_error` | PIN encryption issue, contact processor for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `refund_exceeds_original_transaction` | The refund amount is greater than the original transaction amount | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `request_previously_completed` | Transaction has already been reversed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`
     `request_timed_out` | The system can't be reached, please try again | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `settlement_error` | Settlement error, contact support for more information | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`
     `testmode_charges_only` | Your account has not been activated and can only make test charges | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `transaction_already_completed` | The transaction has already been completed | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `transfer_denied` | The transfer of funds between accounts has been denied | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `transfer_successful` | The transfer of funds between accounts was successful | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `txn_type_not_supported` | The payment method selected needs to be activated | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`GIFT_CARD`<br/>`ACH`
     `unable_to_deactivate` | Account is unable to be deactivated, may contain value | `GIFT_CARD`
     `unable_to_reference` | Associated transactions details are missing | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `unsupported_program_type` | Gift / Loyalty program isn't supported | `GIFT_CARD`
     `url_invalid` | The URL provided is invalid | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`

    ### REFUNDED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `refunded` | Transaction refund success | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`

    ### RETURNED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `account_closed` | The bank account has been closed | `ACH`
     `bank_returned` | Transaction rejected by bank, funds returned | `ACH`
     `incorrect_bank_account` | Incorrect bank account | `ACH`
     `incorrect_routing` | Incorrect routing number | `ACH`
     `insufficient_bank_funds` | Insufficient funds in account | `ACH`
     `non_transactional_account` | Bank account doesn't support ACH | `ACH`
     `stopped_payment` | Payment has been stopped by customer | `ACH`
     `unable_to_locate_account` | Bank was unable to locate account, verify with account holder | `ACH`

    ### SETTLED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `settled` | Transaction settled | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`

    ### VERIFICATION

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `verification_successful` | The account successfully verified | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`
     `verification_failed` | The account failed verification | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`

    ### VOIDED

     statusCode                    | statusDescription   | txnType
    -------------------------------|---------------------|-------------
     `voided` | Transaction void success | `CREDIT_CARD`<br/>`PINDEBIT_CARD`<br/>`PLDEBIT_CARD`<br/>`ACH`<br/>`GIFT_CARD`

    # AVS Verification Codes



    Status Code         | Status Description

    --------------------|----------------------------------

    SM                  | Street Match

    ZD                  | Zip Decline

    SD                  | Street Decline

    ZM                  | Zip Match

    NS                  | AVS Not Supported

    SE                  | System Error - retry

    GN                  | Global Non-AVS participant

    NV                  | No verification performed


    # CVV Verification Codes


    Status Code         | Status Description

    --------------------|----------------------------------

    M                   | CVV2/CVC2/CID Match

    N                   | CVV2/CVC2/CID No Match

    P                   | Not Processed

    S                   | CVV2 expected, merchant indicates not present

    U                   | Unknown/Issuer does not participate

    X                   | Server provider did not respond (Default)


    # Error Status Codes


    Status Code         | Status Description

    --------------------|----------------------------------

    21                  | Card Already Issued

    31                  | Invalid currency statusCode

    100                 | Card number or Track Two required

    101                 | Merchant not found

    102                 | Gift Card Processor not configured

    104                 | Transaction type required

    106                 | Gift Card Processor not supported

    107                 | Transaction cancelled

    108                 | Transaction not found

    110                 | Validation error

    111                 | Request timed out. Please try again

    911                 | Unknown Error
tags:
  - name: Charge
    x-displayName: Charge
  - name: Adjustments
    x-displayName: Adjustments
  - name: Captures
  - name: Voids
  - name: Refunds
  - name: Checkout
  - name: WebhookEvents
    x-displayName: Webhook Events
  - name: PCIAudit
    x-displayName: PCI Audit
  - name: IRSReporting
    x-displayName: IRS Reporting
  - name: GiftCards
    x-displayName: Gift Cards
  - name: SubMerchant
    x-displayName: Sub-Merchant
  - name: PanVault
    x-displayName: Tokens
    description: >2-
       Our stored value API can be used to create a variety of integrated applications, such as gift card and rewards programs.
      A stored-value card is a payments card with a monetary value stored on the
      card itself, not in an external account maintained by a financial
      institution. Our API makes it simple to create accounts and manage their
      value programmatically.

      For your convenience, we provide JSON Schema definitions for testing and
      validating your raw requests. There are validator implementations in all
      major languages.


      ### Test Cards

      See [Test Cards](#tag/TestCards) for a comprehensive list of available
      tokens to test with.  
  - name: GettingStartedSDK
    x-displayName: Getting Started
    description: >
      The SDK lets you accept payments from credit cards, and other payment
      methods.

      Each of these payment methods is its own component, so you only need to
      pull in the files you need.


      #### Loading the SDK

      ```html

      <!-- Load the required client component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>


      <!-- Load additional components when required. -->


      <!-- Use the components. We'll see usage instructions next. -->

      <script>

      seamlesspay.client.create(/* ... */);

      </script>

      ```


      To start up, the JavaScript SDK needs a Publishable Key (you can get it on
      the [API Keys](https://portal.seamlesspay.com/api-keys) page).

      Once you've received Publishable Key, embed it into your template and
      create [client instance](#tag/Client).


      #### Using a Publishable Key to start up with SDK

      ```javascript

      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        function(error, clientInstance) {
          /* ... */
        }
      );

      ```
  - name: Client
    x-displayName: Client
    description: >
      This class is required by many other Seamlesspay components. It serves as
      the base API layer that communicates with our servers. It is also capable
      of being used to formulate direct calls to our servers, such as direct
      credit card tokenization.
  - name: ClientMethods
    x-displayName: Client Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type            | Description

      ------------|-----------------|--------------

      `*options`  | `ClientOptions` | Object containing `Client`
      [options](#tag/ClientTypeDefinitions).

      `callback`  | `callback`      | The second argument, is the Client
      instance. If no callback is provided, create returns a promise that
      resolves with the Client instance.


      `* required` <br />


      #### Example of client object creation

      ```javascript

      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: 'pk_0123456789ABCDEFGHIJKLMNOP'
        },
        function(error, clientInstance) {
          /* ... */
        }
      );

      ```
  - name: ClientTypeDefinitions
    x-displayName: Client Types
    description: >
      ### `ClientOptions`


      PROPERTIES:


      Name             | Type     | Description

      -----------------|----------|---------------

      `*authorization` | `String` | Merchant Publishable Key

      `environment`    | `String` | API environment - `production` value for
      live mode and `sandbox` for test mode (default value `production`).


      #### Example `ClientOptions`

      ```javascript

      var ClientOptions = {
        environment: 'sandbox',
        authorization: 'pk_0123456789ABCDEFGHIJKLMNOP'
      };

      ````
  - name: ClientErrorCodes
    x-displayName: Client Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                         | Type\t      | Description\n-------------------------------------------------|------------|---------------------------------\n`CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN`    | `MERCHANT` | Occurs when client used is not Seamlesspay whitelisted domain.\n`CLIENT_OPTION_REQUIRED`                         | `MERCHANT` | An option required in the request method was not provided. Usually `options.method` or `options.endpoint`\n`CLIENT_OPTION_INVALID`                          | `MERCHANT` | The request option provided is invalid.\n`CLIENT_INVALID_AUTHORIZATION`                   | `MERCHANT` | Occurs when client token cannot be parsed.\n`CLIENT_GATEWAY_NETWORK`                         | `NETWORK`  | The Seamlesspay gateway could not be contacted.\n`CLIENT_REQUEST_TIMEOUT`                         | `NETWORK`  | The request took too long to complete and timed out.\n`CLIENT_REQUEST_ERROR`                           | `NETWORK`  | The response from a request had status 400 or greater.\n`CLIENT_RATE_LIMITED`                            | `MERCHANT` | The response from a request had a status of 429, indicating rate limiting.\n`CLIENT_AUTHORIZATION_INSUFFICIENT`              | `MERCHANT` | The user assocaited with the client token or tokenization key does not have permissions to make the request.\n"
  - name: HostedFields
    x-displayName: Hosted Fields
    description: >
      In order to be eligible for the easiest level of PCI compliance, certain
      payment fields on the checkout page must be hosted securely. This requires
      you to host the information on an external payment gateway's domain and
      present the fields to your users in a frame or with a redirect.

      Our Hosted Fields solution accomplishes this by rendering an iframe to
      handle input of the various [payment
      fields](#tag/HostedFieldsTypeDefinitions) (regarding to payment method) on
      your checkout page.


      This provides you with the ability to customize the look and feel of your
      web page while ensuring that you are compliant with PCI requirements.


      To start using Hosted Fields, you need to create a basic HTML checkout
      form. You will need to define `<div>` containers in place of the `<input>`
      elements that would normally comprise your credit card input fields (card
      number, expiration date, CVV and others).


      #### Loading

      ```html

      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/hosted-fields.min.js"></script>

      ```


      #### Checkout Form

      ```html

      <form action="/" id="my-sample-form" method="post">
        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="cvv">CVV</label>
        <div id="cvv"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <input type="submit" value="Pay" disabled />
      </form>

      ```


      Then [set up the SDK](#tag/GettingStartedSDK), create a
      [`client`](#tag/Client) and pass it to the
      [`seamlesspay.hostedFields.create`](#tag/HostedFieldsMethods) within the
      [`options`](#tag/HostedFieldsTypeDefinitions) object.


      #### Passing the client to the `seamlesspay.hostedFields.create`

      ```javascript

      var options = {
        txnType: 'CREDIT_CARD',
        client: clientInstance,
        styles: {
          /* ... */
        },
        fields: {
          /* ... */
        }
      };


      seamlesspay.hostedFields.create(options, function(
        hostedFieldsError,
        hostedFieldsInstance
      ) {
        if (hostedFieldsErr) {
          // Handle error in Hosted Fields creation
          return;
        }

        // Use the Hosted Fields instance here to tokenize a card
      });

      ```


      Look for examples [here](#tag/Examples).


      #### Content Security Policy

      If you have deployed a
      [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP), the full
      set of required directives for `production` environment are:


      * `connect-src` https://pan-vault.seamlesspay.com
      https://api.seamlesspay.com

      * `frame-src` https://pan-vault.seamlesspay.com

      * `script-src` 'unsafe-inline' https://web-sdk.seamlesspay.com


      ```html

      <meta http-equiv="Content-Security-Policy" content="default-src
      'self';connect-src https://pan-vault.seamlesspay.com
      https://api.seamlesspay.com;frame-src
      https://pan-vault.seamlesspay.com;script-src 'unsafe-inline'
      https://web-sdk.seamlesspay.com;">

      ```

      Set of required directives for `sandbox` environment are:


      * `connect-src` https://sandbox-pan-vault.seamlesspay.com
      https://sandbox.seamlesspay.com

      * `frame-src` https://sandbox-pan-vault.seamlesspay.com

      * `script-src` 'unsafe-inline' https://web-sdk.seamlesspay.com


      ```html

      <meta http-equiv="Content-Security-Policy" content="default-src
      'self';connect-src https://sandbox-pan-vault.seamlesspay.com
      https://sandbox.seamlesspay.com;frame-src
      https://sandbox-pan-vault.seamlesspay.com;script-src 'unsafe-inline'
      https://web-sdk.seamlesspay.com;">

      ```
  - name: HostedFieldsMethods
    x-displayName: Hosted Fields Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name       | Type                   | Description

      -----------|------------------------|---------------

      `*options` | `HostedFieldsOptions`  | Creation
      [options](#tag/HostedFieldsTypeDefinitions).

      `callback` | `callback`             | The second argument, is the
      HostedFields instance. If no callback is provided, create returns a
      promise that resolves with the HostedFields instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.hostedFields.create(
        {
          txnType: 'CREDIT_CARD',
          client: clientInstance,
          styles: {
            input: {
              'font-size': '16pt',
              color: '#3A3A3A'
            },
            '.valid': {
              color: 'green'
            }
          },
          fields: {
            txnMethod: {
              selector: '#txn-method',
              defaultValue: 'sale'
            },
            accountNumber: {
              selector: '#account-number'
            },
            expDate: {
              selector: '#exp-date'
            }
          }
        },
        function(error, hostedFieldsInstance) {
          // call `hostedFieldsInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `options`   | `object`    | All tokenization options for the Hosted Fields
      component (e.g: `{ phoneNumber: '1234567890' }`).

      `callback`  | `callback`  | The second argument, is a tokenizePayload. If
      no callback is provided, tokenize returns a function that resolves with a
      tokenizePayload.


      #### Example Method

      ```javascript

      hostedFieldsInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125"
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "txnType": "CREDIT_CARD"
      }

      ```


      ### `instance.on`


      `on(eventName, callback)` → `{void}`


      You can subscribe to Hosted Fields events using an event listener. This
      allows you to update the UI of your form based on the state of the fields.


      EVENTS:


      Name      | Description

      ----------|---------------

      `change`  | Emitted when field changes.

      `focus`   | Emitted when a field gains focus.

      `blur`    | Emitted when a field loses focus.


      The event payload sent from `on`:


      Name          | Type      | Description

      --------------|-----------|---------

      `cards`       | `Array`   | This will return an array of potential cards.
      If the card type has been determined, the array will contain only one
      card.

      `emittedBy`   | `string`  | The name of the field associated with an
      event. It will be one of the following strings: <br/>`accountNumber`
      <br/>`billingZip` <br/>`expDate` <br/>`cvv` <br/>`txnMethod`
      <br/>`achType` <br/>`pinNumber`

      `fields`      | `object`  | Properties: <table
      class='nested-table'><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>`accountNumber`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the number field, if it is
      present.</td></tr><tr><td>`billingZip`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the postal code field, if it is
      present.</td></tr><tr><td>`expDate`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the expiration date field, if it is
      present.</td></tr><tr><td>`cvv`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the CVV field, if it is
      present.</td></tr><tr><td>`txnMethod`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the transaction method field, if it is
      present.</td></tr><tr><td>`achType`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the ACH type field, if it is
      present.</td></tr><tr><td>`pinNumber`</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)</td><td>[hostedFieldsFieldData](#hostedFieldsFieldData)
      for the PIN number field, if it is present.</td></tr></tbody></table>


      #### Example `hostedFieldsInstance.on`

      ```javascript

      hostedFieldsInstance.on('change', function(event) {
        console.log('"change" event emitted by field "' + event.emittedBy + '"')
      });

      ```


      #### <a name="hostedFieldsFieldData"></a>Hosted Fields field data object
      properties:


      Name                 | Type          | Description

      ---------------------|---------------|--------------

      `container`          | `HTMLElement` | Reference to the container DOM
      element on your page associated with the current event.

      `disabled`           | `boolean`     | Whether or not the input is
      currently disabled.

      `isEmpty`            | `boolean`     | Whether or not the user has entered
      a value in the input.

      `isFocused`          | `boolean`     | Whether or not the input is
      currently focused.

      `isPotentiallyValid` | `boolean`     | A determination based on the future
      validity of the input value. This is helpful when a user is entering a
      card number and types "41". While that value is not valid for submission,
      it is still possible for it to become a fully qualified entry. However, if
      the user enters "4x" it is clear that the card number can never become
      valid and isPotentiallyValid will return false.

      `isTokenized`        | `boolean`     | Whether or not card details is
      tokenized.

      `isValid`            | `boolean`     | Whether or not the value of the
      associated input is fully qualified for submission.


      #### Example card fields validation using `hostedFieldsInstance.on`

      ```javascript

      hostedFieldsInstance.on('blur', function(event) {
        // Get access to field data
        var hostedFieldData = event.fields[event.emittedBy];
        console.log('Hosted Field data: ', hostedFieldData);

        // Check field validity
        var valid = hostedFieldData.isValid && hostedFieldData.isPotentiallyValid;
        if (!valid) alert('Some payment input fields are invalid');
      });

      ```


      ### `instance.teardown`


      `teardown(callback)` → `{Promise|void}`


      Cleanly remove anything set up by [create](#tag/HostedFieldsMethods).


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `callback`  | `callback`  | Called on completion, containing an error if
      one occurred. No data is returned if teardown completes successfully. If
      no callback is provided, `teardown` returns a promise.


      #### Example

      ```javascript

      hostedFieldsInstance.teardown(function(teardownError) {
        if (teardownError) {
          console.error('Could not tear down Hosted Fields!');
        } else {
          console.info('Hosted Fields has been torn down!');
        }
      });

      ```
  - name: HostedFieldsTypeDefinitions
    x-displayName: Hosted Fields Types
    description: >
      ### `HostedFieldsOptions`


      PROPERTIES:


      Name      | Type            | Description

      ----------|-----------------|----------------

      `txnType` | `String`        | Payment Type (eligible values:
      `CREDIT_CARD`, `PINDEBIT_CARD`, `PLDEBIT_CARD`, `ACH`, `GIFT_CARD`)

      `client`  | `Client`        | A [Client instance](#tag/Client).

      `fields`  | `fieldOptions`  | A set of options for each field.

      `styles`  | `styleOptions`  | Styles applied to each field.


      #### Example Options

      ```javascript

      var options = {
        txnType: 'CREDIT_CARD',
        client: clientInstance,
        styles: {
          /* ... */
        }, // styleOptions
        fields: {
          /* ... */
        } // fieldOptions
      };

      ```


      ### `fieldOptions`


      An object that has `field` objects for each field. Used in create.


      PROPERTIES:


      Name              | Payment Types                 | Applicable
      Methods             | Description

      ------------------|-------------------------------|--------------------------------|----------------

      `*accountNumber`  | Any                           | `tokenize` | Bank
      account number or card number.

      `billingZip`      | Any                           | `tokenize` | Customer
      zip code.

      `cvv`             | `CREDIT_CARD` `PINDEBIT_CARD`
      `PLDEBIT_CARD`            | CVV2, CVC2 and CID are, Visa, MasterCard,
      MaestroInt, American Express and Discover card verification tools designed
      to reduce fraud losses primarily on transactions when the card is not
      present. With the exception of American Express, this is a three character
      value printed on the back of the card in the signature panel, after the
      card number. For American Express, it is a four character value printed on
      the face of the card.

      `*expDate`        | `CREDIT_CARD` `PINDEBIT_CARD` `PLDEBIT_CARD` |
      `tokenize` | Card expiration date.

      `pinNumber`       | `GIFT_CARD` `PINDEBIT_CARD`   | `tokenize` | Card PIN.


      `* required` <br />


      #### Example Options (for payment type `CREDIT_CARD`)

      ```javascript

      var options = {
        accountNumber: {
          selector: '#account-number'
        },
        expDate: {
          selector: '#exp-date'
        }
      };

      ```


      ### `styleOptions`


      An object that represents CSS that will be applied in each hosted field.
      This object looks similar to CSS. Typically, these styles involve fonts
      (such as `font-family` or `color`).


      These are the CSS properties that Hosted Fields supports. Any other CSS
      should be specified on your page and outside of any Seamlesspay
      configuration. Trying to set unsupported properties will fail and put a
      warning in the console.


      Supported CSS properties are:

      `-moz-osx-font-smoothing`

      `-moz-tap-highlight-color`

      `-moz-transition`

      `-webkit-font-smoothing`

      `-webkit-tap-highlight-color`

      `-webkit-transition`

      `color`

      `direction`

      `font`

      `font-family`

      `font-size`

      `font-size-adjust`

      `font-stretch`

      `font-style`

      `font-variant`

      `font-variant-alternates`

      `font-variant-caps`

      `font-variant-east-asian`

      `font-variant-ligatures`

      `font-variant-numeric`

      `font-weight`

      `letter-spacing`

      `line-height`

      `opacity`

      `outline`

      `text-shadow`

      `transition`


      #### Example Options

      ```javascript

      var options = {
        input: {
          'font-size': '16pt',
          color: '#3A3A3A'
        },
        '.valid': {
          color: 'green'
        }
      };

      ```


      ### `field`


      Fields used in `fieldOptions`


      PROPERTIES:

       Name          | Type               | Description
      ---------------|--------------------|--------------

      `*selector`    | `String`           | A CSS selector to find the container
      where the hosted field will be inserted.

      `placeholder`  | `String`           | Will be used as the placeholder
      attribute of the input.

      `maskInput`    | `object` `boolean` | Enable or disable input masking when
      input is not focused. If set to true instead of an object, the defaults
      for the maskInput parameters will be used. (e.g: `{ character: '*' }`)

      `formatInput`  | `boolean`          | Enable or disable automatic
      formatting on this field.

      `defaultValue` | `String`           | Default value for fields with
      selectable values (e.g `txnMethod`).


      `* required` <br />


      #### Example field

      ```javascript

      var field = {
        selector: '#account-number',
        placeholder: '4242 4242 4242 4242'
      };

      ```
  - name: HostedFieldsReact
    x-displayName: Hosted Fields React
    description: >
      React components for Seamlesspay Hosted Fields integration.


      ### `CardPayments`


      PROPS:


      Name                | Type                  | Description

      --------------------|-----------------------|---

      `*authorization`    | `String`              | Merchant Publishable Key.

      `*children`         | `Array<HostedField>`  | Hosted Fields components.

      `environment`       | `String`              | API environment -
      `production` value for live mode and `sandbox` for test mode (default
      value `production`).

      `onCardTypeChange`  | `callback`            | Called on Hosted Fields card
      type changed. The first argument is an event.

      `*onError`          | `callback`            | Called on Hosted Fields
      Instance creation failed. The first argument is an error.

      `*onReady`          | `callback`            | Called on Hosted Fields
      Instance created. The first argument is a `hostedFieldsInstance`.

      `onValidityChange`  | `callback`            | Called on Hosted Fields
      validity changed. The first argument is an event.

      `*txnType`          | `String`              | A Payment Type
      (`CREDIT_CARD` `PINDEBIT_CARD` `PLDEBIT_CARD` `ACH` `GIFT_CARD`).

      `*seamless`         | `object`              | A seamlesspay library
      (`client` and `hostedFields` should be loaded).

      `styles`            | `styleOptions`        | Hosted Fields styles
      options.


      `* required` <br />


      #### Example

      ```html

      <CardPayments
        seamless={seamlesspay}
        environment="sandbox"
        txnType="CREDIT_CARD"
        styles={{
          input: {
            'font-size': '12px',
            'font-family': 'helvetica, tahoma, calibri, sans-serif',
            color: '#3a3a3a'
          },
          'input.invalid': {
            color: 'red'
          },
          'input.valid': {
            color: 'green'
          },
          ':focus': {
            color: 'black'
          }
        }}
        authorization={CLIENT_AUTHORIZATION}
        onReady={function (hostedFieldsInstance) {
          // call hostedFieldsInstance.tokenize here
        }}
        onError={function (error) {
          // handle error here
        }}
      >
        <HostedField name="accountNumber" placeholder="4242 4242 4242 4242" />
        <HostedField name="expDate" placeholder="MM / YY" />
      </CardPayments>

      ```


      ### `HostedField`


      PROPS:


      Name          | Type        | Description

      --------------|-------------|---------------

      `*name`       | `String`    | Field Name.

      `className`   | `String`    | A DOM element class definitions.

      `placeholder` | `String`    | Will be used as the placeholder attribute of
      the input.

      `instance`    | `object`    | A Hosted Fields Instance.

      `onChange`    | `callback`  | Called on Hosted Field changed (workable if
      `instance` property is set).


      `* required` <br />


      #### Example

      ```html

      <HostedField
        name="accountNumber"
        className="container-account-number"
        placeholder="4242 4242 4242 4242"
        instance={hostedFieldsInstance}
      />

      ```
  - name: HostedFieldsErrorCodes
    x-displayName: Hosted Fields Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                       | Type\t  | Description\n-----------------------------------------------|----------|--------------------------------------\n`HOSTED_FIELDS_INVALID_FIELD_KEY`              | `MERCHANT` | Occurs when Hosted Fields is instantiated with an invalid Field option.\n`HOSTED_FIELDS_INVALID_FIELD_DEFAULT_VALUE`    | `MERCHANT` | Occurs when Hosted Fields is instantiated with an invalid default value option.\n`HOSTED_FIELDS_INVALID_FIELD_SELECTOR`         | `MERCHANT` | Occurs when Hosted Fields given a field selector that is not valid.\n`HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME`         | `MERCHANT` | Occurs when Hosted Fields given a field selector that already contains an iframe.\n`HOSTED_FIELDS_FIELD_INVALID`                  | `MERCHANT` | Occurs when attempting to modify a field that is not a valid Hosted Fields option.\n`HOSTED_FIELDS_FIELD_NOT_PRESENT`              | `MERCHANT` | Occurs when attempting to modify a field that is not configured with Hosted Fields.\n`HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR`     | `NETWORK`  | Occurs when the Seamlesspay gateway cannot be contacted.\n`HOSTED_FIELDS_FAILED_TOKENIZATION`            | `CUSTOMER` | Occurs when the credit card details were sent to Seamlesspay, but failed to tokenize.\n`HOSTED_FIELDS_FIELDS_EMPTY`                   | `CUSTOMER` | Occurs when all the Hosted Fields inputs are empty.\n`HOSTED_FIELDS_FIELDS_INVALID`                 | `CUSTOMER` | Occurs when one ore more fields are invalid.\n`HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED`        | `MERCHANT` | Occurs when trying to set an attribtue that is not supported to be set.\n`HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED`    | `MERCHANT` | Occurs when the type of value for an attribue is not allowed to be set.\n`HOSTED_FIELDS_INCOMPATIBLE_FIELDS_SET`        | `MERCHANT` | Occurs when Hosted Fields is trying to be instantiated with an incompatible fields set\n"
  - name: CheckoutButton
    x-displayName: Checkout Button
    description: >
      A Seamless Pay Checkout button is the simple way to integrate Checkout
      Form to your site.


      Our Checkout Button solution accomplishes this by rendering an iframe on
      your checkout page.



      This provides you with the ability to customize the look and feel of your

      web page while ensuring that you are compliant with PCI requirements.



      To start integration Checkout Button, you need to define `<div>`
      container.



      #### Loading


      ```html


      <!-- Load the required checkoutButton component. -->


      <script

      src="https://web-sdk.seamlesspay.com/3.0.5/js/index.min.js"></script>


      ```



      #### Button


      ```html


      <div id="seamlesspay-button"></div>


      ```



      Then [set up the SDK](#tag/GettingStartedSDK), create a

      [`client`](#tag/Client) and pass it to the

      [`seamlesspay.checkoutButton.create`](#tag/CheckoutButtonMethods) within
      the

      [`options`](#tag/CheckoutButtonTypeDefinitions) object.



      #### Passing the client to the `seamlesspay.checkoutButton.create`


      ```javascript


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        function(clientError, clientInstance) {
          if (clientError) {
            // Handle error in Client Instance creation
            return;
          }
          var options = {
            client: clientInstance,
            selector: '#seamlesspay-button',
            formPath: 'merchant-form-path',
            text: 'Pay Now',
            amount: '105.00',
            styles: {
              /* ... */
            },
          };

          seamlesspay.checkoutButton.create(options, function(
            error,
            instance
          ) {
            if (error) {
              // Handle error in Checkout Button creation
              return;
            }
          });
        }
      );


      ```

      PROPERTIES:


      Name          | Type        | Description

      --------------|-------------|---------------

      `*instance`   | `object`    | Checkout Button Instance.

      `*selector`   | `String`    | Selector.

      `*formPath`   | `String`    | Path from Checkout Form settings.

      `*amount`     | `callback`  | Amount.

      `text`        | `String`    | Button text (default value `Pay Now`).

      `styles`      | `callback`  | Styles applied to button.


      `* required` <br />
  - name: CheckoutButtonErrorCodes
    x-displayName: Checkout Button Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                       | Type   \t| Description\n-----------------------------------------------|------------|--------------------------------------\n`CHECKOUT_BUTTON_INVALID_FIELD_SELECTOR`       | `MERCHANT` | Occurs when Checkout Button given a field selector that is not valid.\n"
  - name: PaymentRequest
    x-displayName: Payment Request API
    description: >
      The Payment Request API is a W3C standard candidate that enables customers
      using supported browsers to provide payment information without filling
      out a checkout form. Instead, the customer clicks a button to initiate a
      payment request, which opens a window provided by the browser where they
      can select a saved payment method or enter a new one.


      Seamlesspay's Payment Request component can be used as an alternative (or
      in addition) to Hosted Fields. As with Hosted Fields, the credit card
      details are all securely captured and tokenized within a Seamlesspay
      iframe, so the raw credit card details are never exposed on your website.


      Look for examples [here](#tag/Examples).


      #### Loading

      ```html

      <!-- Load the required paymentRequest component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/payment-request.min.js"></script>

      ```


      #### Check browser capabilities

      ```javascript

      if (window.PaymentRequest) {
        // This browser supports Payment Request
        // Display your Payment Request button
      } else {
        // Browser does not support Payment Request
        // Set up Hosted Fields, etc.
      }

      ```


      #### Passing the client to the `seamlesspay.paymentRequest.create`

      ```javascript

      var options = {
        client: clientInstance
      };


      seamlesspay.paymentRequest.create(options, function(
        paymentRequestError,
        paymentRequestInstance
      ) {
        if (paymentRequestError) {
          // Handle Payment Request errors here
          return;
        }

        // Use the Payment Request instance here to tokenize a card
      });

      ```
  - name: PaymentRequestMethods
    x-displayName: Payment Request Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `*options`  | `object`    | Creation options `{ client: clientInstance }`.

      `callback`  | `callback`  | The second argument is the
      PaymentRequestComponent instance. If no callback is provided, create
      returns a promise that resolves with the PaymentRequestComponent instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.paymentRequest.create(
        {
          client: clientInstance
        },
        function(error, paymentRequestInstance) {
          // call `paymentRequestInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type                  | Description

      ------------|-----------------------|----------------

      `options`   | `tokenizationOptions` | All tokenization options for the
      Payment Request component.

      `callback`  | `callback`            | The second argument, is a
      tokenizePayload. If no callback is provided, tokenize returns a function
      that resolves with a tokenizePayload.


      #### Example Options

      ```javascript

      var options = {
        details: {
          total: {
            label: 'Total Amount',
            amount: {
              currency: 'USD',
              value: '1.00'
            }
          }
        },
        options: {
          requestPayerName: true,
          requestPayerPhone: true,
          requestPayerEmail: true
        }
      };

      ```


      #### Example Method

      ```javascript

      paymentRequestInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125",
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "txnType": "CREDIT_CARD"
      }

      ```


      ### `instance.teardown`

      The same as for [hosted fields](#tag/HostedFieldsMethods)
  - name: PaymentRequestTypeDefinitions
    x-displayName: Payment Request Types
    description: |
      ### tokenizationOptions

      PROPERTIES:

      Name      | Type     | Description
      ----------|----------|---------------
      `details` | `object` | Payment Request details.
      `options` | `object` | Payment Request options.

      #### Example `options.details`
      ```javascript
      options.details = {
        total: {
          label: 'Total Amount',
          amount: {
            currency: 'USD',
            value: '1.00'
          }
        }
      };
      ```

      #### Example `options.options`
      ```javascript
      options.options = {
        requestPayerName: true,
        requestPayerPhone: true,
        requestPayerEmail: true
      };
      ```
  - name: PaymentRequestErrorCodes
    x-displayName: Payment Request Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                              | Type\t   | Description\n------------------------------------------------------|------------|---------------------------------\n`PAYMENT_REQUEST_NO_VALID_SUPPORTED_PAYMENT_METHODS`  | `MERCHANT` | Occurs when there are no valid payment methods configured.\n`PAYMENT_REQUEST_CANCELED`                            | `CUSTOMER` | Occurs when customer cancels the Payment Request.\n`PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED`        | `MERCHANT` | Occurs when failed on configuring the payment request.\n`PAYMENT_REQUEST_PAY_WITH_GOOGLE_FAILED_TO_TOKENIZE`  | `MERCHANT` | Occurs when google card tokenization failed.\n`PAYMENT_REQUEST_PAY_WITH_GOOGLE_PARSING_ERROR`       | `UNKNOWN`  | Occurs when google card parsing failed.\n`PAYMENT_REQUEST_NOT_COMPLETED`                       | `CUSTOMER` | Occurs when an error prevented the Payment Request from being completed.\n`PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_MUST_INCLUDE_TYPE` | `MERCHANT` | Occurs when no type is supplied for method.\n`PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_TYPE_NOT_ENABLED`  | `MERCHANT` | Occurs when configured type is not enabled.\n"
  - name: CardElement
    x-displayName: Card Element
    description: >
      The Card Element lets you collect card information all within one Element.
      It includes a dynamically-updating card brand icon as well as inputs for
      account number, expiration date, CVV, and billing zip.


      Look for examples [here](#tag/Examples).


      #### Loading

      ```html

      <!-- Load the required cardElement component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/card-element.min.js"></script>

      ```


      #### Passing the client to the `seamlesspay.cardElement.create`

      ```javascript

      var options = {
        client: clientInstance,
        styles: {
          '.ElementsApp .InputElement': {
            color: '#007725'
          }
        },
        selector: '#card-element'
      };


      seamlesspay.cardElement.create(options, function(
        cardElementError,
        cardElementInstance
      ) {
        if (cardElementError) {
          // Handle card element errors here
          return;
        }

        // Use the card element instance here to tokenize a card
      });

      ```
  - name: CardElementMethods
    x-displayName: Card Element Methods
    description: >
      ### `create`


      `create(options, callback)` → `{Promise|void}`


      ARGUMENTS:


      Name        | Type        | Description

      ------------|-------------|---------------

      `*options`  | `object`    | Creation options `{ client: clientInstance,
      selector: '#card-element-selector' }`.

      `callback`  | `callback`  | The second argument is the
      CardElementComponent instance. If no callback is provided, create returns
      a promise that resolves with the CardElementComponent instance.


      `* required` <br />


      #### Example

      ```javascript

      seamlesspay.cardElement.create(
        {
          client: clientInstance,
          selector: '#card-element-selector'
        },
        function(error, cardElementInstance) {
          // call `cardElementInstance.tokenize` here
        }
      );

      ```


      ### `instance.tokenize`


      `tokenize(options, callback)` → `{Promise|void}`


      Tokenizes fields and returns a token payload.


      ARGUMENTS:


      Name        | Type                  | Description

      ------------|-----------------------|----------------

      `options`   | `tokenizationOptions` | All tokenization options for the
      Card Element component.

      `callback`  | `callback`            | The second argument, is a
      tokenizePayload. If no callback is provided, tokenize returns a function
      that resolves with a tokenizePayload.


      #### Example Options

      ```javascript

      var options = {
        billingAddress: '400 Madison Ave',
        billingAddress2: '10th Fl',
        billingCity: 'New York',
        billingCountry: 'USA',
        billingState: 'NY',
        email: 'hello@seamlesspay.com',
        name: 'Michael Smith'
      };

      ```


      #### Example Method

      ```javascript

      cardElementInstance.tokenize(function(error, payload) {
        // Send payload.token to your server here
      });

      ```


      #### Example Payload

      ```json

      {
        "expDate": "0125",
        "lastFour": "4242",
        "name": "Michael Smith",
        "token": "TKN_0123456789ABCDEFGHIJ",
        "txnType": "CREDIT_CARD"
      }

      ```


      ### `instance.on`

      The same as for [hosted fields](#tag/HostedFieldsMethods)


      ### `instance.teardown`

      The same as for [hosted fields](#tag/HostedFieldsMethods)
  - name: CardElementTypeDefinitions
    x-displayName: Card Element Types
    description: >
      ### `CardElementOptions`


      PROPERTIES:


      Name        | Type            | Description

      ------------|-----------------|----------------

      `*client`   | `Client`        | A [Client instance](#tag/Client).

      `*selector` | `String`        | A CSS selector to find the container where
      the card element will be inserted.

      `styles`    | `styleOptions`  | Styles applied to each field.


      `* required` <br />


      #### Example Options

      ```javascript

      var options = {
        client: clientInstance,
        selector: '#card-element',
        styles: {
          /* ... */
        } // styleOptions
      };

      ```


      ### `styleOptions`


      An object that represents CSS that will be applied in card element. This
      object looks similar to CSS. Typically, these styles involve fonts (such
      as `font-family` or `color`).


      These are the CSS properties that Card Element supports. Any other CSS
      should be specified on your page and outside of any Seamlesspay
      configuration. Trying to set unsupported properties will fail and put a
      warning in the console.


      Supported CSS properties are:

      `-moz-appearance`

      `-moz-osx-font-smoothing`

      `-moz-tap-highlight-color`

      `-moz-transition`

      `-webkit-appearance`

      `-webkit-font-smoothing`

      `-webkit-tap-highlight-color`

      `-webkit-transition`

      `appearance`

      `color`

      `direction`

      `font`

      `font-family`

      `font-size`

      `font-size-adjust`

      `font-stretch`

      `font-style`

      `font-variant`

      `font-variant-alternates`

      `font-variant-caps`

      `font-variant-east-asian`

      `font-variant-ligatures`

      `font-variant-numeric`

      `font-weight`

      `letter-spacing`

      `line-height`

      `margin`

      `opacity`

      `outline`

      `padding`

      `text-shadow`

      `transition`


      #### Example Options

      ```javascript

      var options = {
        '.ElementsApp .InputElement': {
          'font-size': '16pt',
          color: '#007725'
        },
        '.ElementsApp .InputElement.is-invalid': {
          color: '#ff8401'
        }
      };

      ```
  - name: CardElementErrorCodes
    x-displayName: Card Element Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                    | Type\t     | Description\n--------------------------------------------|------------|---------------------------------\n`CARD_ELEMENT_INVALID_FIELD_SELECTOR`       | `MERCHANT` | Occurs when Card Element given a field selector that is not valid.\n`CARD_ELEMENT_FIELD_INVALID`                | `MERCHANT` | Occurs when attempting to modify a field that is not a valid Card Element option.\n`CARD_ELEMENT_TOKENIZATION_NETWORK_ERROR`   | `NETWORK`  | Occurs when the Seamlesspay gateway cannot be contacted.\n`CARD_ELEMENT_FAILED_TOKENIZATION`          | `CUSTOMER` | Occurs when the credit card details were sent to Seamlesspay, but failed to tokenize.\n`CARD_ELEMENT_FIELDS_EMPTY`                 | `CUSTOMER` | Occurs when all the Card Element inputs are empty.\n`CARD_ELEMENT_FIELDS_INVALID`               | `CUSTOMER` | Occurs when one ore more fields are invalid.\n`CARD_ELEMENT_ATTRIBUTE_NOT_SUPPORTED`      | `MERCHANT` | Occurs when trying to set an attribtue that is not supported to be set.\n`CARD_ELEMENT_ATTRIBUTE_VALUE_NOT_ALLOWED`  | `MERCHANT` | Occurs when the type of value for an attribue is not allowed to be set.\n"
  - name: Examples
    x-displayName: Examples
    description: >
      ### Hosted Fields


      #### Example integration


      ```html

      <form action="/" id="my-sample-form">
        <input type="hidden" name="payment_method_id">

        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <input id="my-submit" type="submit" value="Pay" disabled/>
      </form>


      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/hosted-fields.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var submitBtn = document.getElementById('my-submit');

      var form = document.getElementById('my-sample-form');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        seamlesspay.hostedFields.create(
          {
            txnType: 'CREDIT_CARD',
            client: client,
            styles: {
              input: {
                'font-size': '16pt',
                color: '#3A3A3A'
              },
              '.valid': {
                color: 'green'
              }
            },
            fields: {
              accountNumber: {
                selector: '#account-number'
              },
              expDate: {
                selector: '#exp-date'
              }
            }
          },
          hostedFieldsDidCreate
        );
      }


      function hostedFieldsDidCreate(error, hostedFields) {
        submitBtn.addEventListener('click', submitHandler.bind(null, hostedFields));
        submitBtn.removeAttribute('disabled');
      }


      function submitHandler(hostedFields, event) {
        event.preventDefault();
        submitBtn.setAttribute('disabled', 'disabled');

        hostedFields.tokenize({ phoneNumber: '1234567890' }, function(error, payload) {
          if (error) {
            submitBtn.removeAttribute('disabled');
            console.error(error);
          } else {
            form['payment_method_id'].value = payload.token;
            form.submit();
          }
        });
      }

      ```


      #### Example advanced integration


      ```html

      <form action="/" id="my-sample-form">

        <label for="txn-method">Transaction Type</label>
        <div id="txn-method"></div>

        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <label for="amount">Amount</label>
        <input id="amount" type="text" value="1" />

        <label for="cvv">CVV</label>
        <div id="cvv"></div>

        <label for="invoice">Invoice</label>
        <input id="invoice" type="text" value="123456789" />

        <input id="transaction" type="hidden" />
        <input id="my-submit" type="submit" value="Pay" disabled/>
      </form>


      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/hosted-fields.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var submitBtn = document.getElementById('my-submit');

      var form = document.getElementById('my-sample-form');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        seamlesspay.hostedFields.create(
          {
            txnType: 'CREDIT_CARD',
            client: client,
            styles: {
              input: {
                'font-size': '16pt',
                color: '#3A3A3A'
              },
              '.valid': {
                color: 'green'
              }
            },
            fields: {
              txnMethod: {
                selector: '#txn-method',
                defaultValue: 'sale'
              },
              accountNumber: {
                selector: '#account-number'
              },
              cvv: {
                selector: '#cvv'
              },
              expDate: {
                selector: '#exp-date'
              }
            }
          },
          hostedFieldsDidCreate
        );
      }


      function hostedFieldsDidCreate(error, hostedFields) {
        submitBtn.addEventListener('click', submitHandler.bind(null, hostedFields));
        submitBtn.removeAttribute('disabled');
      }


      function submitHandler(hostedFields, event) {
        event.preventDefault();
        submitBtn.setAttribute('disabled', 'disabled');
      }

      ```


      #### Example static single page apps integration (merchant does not manage
      their own backend)

      ```html

      <form action="/" id="my-sample-form">

        <label for="txn-method">Transaction Type</label>
        <div id="txn-method"></div>

        <label for="account-number">Account Number</label>
        <div id="account-number"></div>

        <label for="exp-date">Expiration Date</label>
        <div id="exp-date"></div>

        <label for="cvv">CVV</label>
        <div id="cvv"></div>

        <label for="amount">Amount</label>
        <input id="amount" type="text" value="1" />

        <input id="my-submit" type="submit" value="Pay" disabled/>
      </form>


      <!-- Load the required hostedFields component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/hosted-fields.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var submitBtn = document.getElementById('my-submit');

      var form = document.getElementById('my-sample-form');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        seamlesspay.hostedFields.create(
          {
            txnType: 'CREDIT_CARD',
            client: client,
            styles: {
              input: {
                'font-size': '16pt',
                color: '#3A3A3A'
              },
              '.valid': {
                color: 'green'
              }
            },
            fields: {
              txnMethod: {
                selector: '#txn-method',
                defaultValue: 'sale'
              },
              accountNumber: {
                selector: '#account-number'
              },
              expDate: {
                selector: '#exp-date'
              },
              cvv: {
                selector: '#cvv'
              }
            }
          },
          hostedFieldsDidCreate
        );
      }


      function hostedFieldsDidCreate(error, hostedFields) {
        submitBtn.addEventListener('click', submitHandler.bind(null, hostedFields));
        submitBtn.removeAttribute('disabled');
      }


      function submitHandler(hostedFields, event) {
        event.preventDefault();
        submitBtn.setAttribute('disabled', 'disabled');
      }

      ```


      #### Example react integration

      ```html

      <div id="app"></div>

      <!-- Load the required components. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/hosted-fields.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/react/card-payments.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/react/hosted-field.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      'use strict';


      var React = require('react');

      var styles = {
        input: {
          'font-size': '12px',
          'font-family': 'helvetica, tahoma, calibri, sans-serif',
          color: '#3a3a3a'
        },
        'input.invalid': {
          color: 'red'
        },
        'input.valid': {
          color: 'green'
        },
        ':focus': {
          color: 'black'
        }
      };


      var SeamlesspayExample = React.createClass({
        getInitialState: function() {
          return {
            hostedFields: null
          };
        },

        handleReady: function(hostedFields) {
          this.setState({ hostedFields: hostedFields });
        },

        handleValidityChange: function(event) {
          console.log('event.fields: ', event.fields);
        },

        handleCardTypeChange: function(event) {
          console.log('event.cards: ', event.cards);
        },

        handleSdkError: function(error) {
          console.log('SEAMLESSPAY SDK ERROR: ');
          console.error(error);
        },

        handleSubmit: function(event) {
          event.preventDefault();
          if (!this.state.hostedFields) {
            return;
          }

          this.state.hostedFields.tokenize(function(error, payload) {
            if (error) {
              console.log('SEAMLESSPAY SDK TOKENIZE ERROR: ');
              console.error(error);
              return;
            }
            console.log('payload: ', payload);

            // Send the `payload.token` to your server with AJAX.

            // This is where you would submit payload.token to your server
            alert(`Submit token ${payload.token} to your server here!`);
          });
        },

        render: function() {
          return (
            <form onSubmit={this.handleSubmit.bind(this)}>
              <CardPayments
                seamless={window.seamlesspay}
                environment="sandbox"
                txnType="CREDIT_CARD"
                styles={styles}
                authorization={CLIENT_AUTHORIZATION}
                onReady={this.handleReady.bind(this)}
                onValidityChange={this.handleValidityChange}
                onCardTypeChange={this.handleCardTypeChange}
                onError={this.handleSdkError}
              >
                <HostedField name="accountNumber" placeholder="4242 4242 4242 4242" />
                <HostedField name="expDate" placeholder="MM / YY" />
              </CardPayments>
              <button>Submit</button>
            </form>
          );
        }
      });


      var mainElement = document.querySelector('app');


      ReactDOM.render(<SeamlesspayExample />, mainElement);

      ```


      ### Payment Request

      #### Example integration


      ```html

      <button id="payment-request-button">Make Payment Request $ 1.00</button>

      <!-- Load the required components. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/payment-request.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var button = document.querySelector('#payment-request-button');


      if (window.PaymentRequest) {
        // This browser supports Payment Request
        // Display your Payment Request button
      } else {
        alert('Browser does not support Payment Request');
        // Browser does not support Payment Request
      }


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        if (error) {
          // handle client error here
          return;
        }

        seamlesspay.paymentRequest.create(
          {
            client: client
          },
          paymentRequestDidCreate
        );
      }


      function paymentRequestDidCreate(error, paymentRequest) {
        if (error) {
          // Handle Payment Request errors here
          return;
        }

        button.addEventListener('click', submitHandler.bind(null, paymentRequest));
      }


      function submitHandler(paymentRequest, event) {
        event.preventDefault();

        paymentRequest.tokenize(
          {
            details: {
              total: {
                label: 'Total Amount',
                amount: {
                  currency: 'USD',
                  value: '1.00'
                }
              }
            },
            options: {
              requestPayerName: true,
              requestPayerPhone: true,
              requestPayerEmail: true
            }
          },
          function(error, payload) {
            if (error) {
              // Handle errors from processing payment request
              return;
            }

            // Send payload.token to your server here
            alert(payload.token);
          }
        );
      }

      ```


      ### Card Element


      #### Example integration


      ```html

      <div class="main">
          <form id="payment-form">
            <div id="card-element"></div>
            <button id="pay">Pay $ 0.1</button>
          </form>
      </div>


      <!-- Load the required cardElement component. -->

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/client.min.js"></script>

      <script
      src="https://web-sdk.seamlesspay.com/3.0.5/js/card-element.min.js"></script>

      <script src="/js/main.js"></script>

      ```


      ```javascript

      // main.js

      var payBtn = document.getElementById('pay');


      seamlesspay.client.create(
        {
          environment: 'sandbox',
          authorization: CLIENT_PUBLISHABLE_KEY
        },
        clientDidCreate
      );


      function clientDidCreate(error, client) {
        if (error) {
          alert(error);

          return;
        }

        seamlesspay.cardElement.create(
          {
            client: client,
            styles: {
              '.ElementsApp .InputElement': {
                color: '#007725'
              },
              '.ElementsApp .InputElement.is-invalid': {
                color: '#ff8401'
              }
            },
            selector: '#card-element'
          },
          cardElementDidCreate
        );
      }


      function cardElementDidCreate(error, cardElement) {
        if (error) {
          alert(error);

          return;
        }

        cardElement.on('change', function (event) {
          console.info(event.emittedBy + ' has been changed');
        });

        payBtn.addEventListener('click', submitHandlerPay.bind(null, cardElement));
      }


      function submitHandlerPay(cardElement, event) {
        event.preventDefault();
      }

      ```
  - name: GeneralErrorCodes
    x-displayName: General Error Codes
    description: "### `SeamlesspayError`\n\nCode\t                                       | Type\t    | Description\n-----------------------------------------------|------------|--------------------------------------\n`INSTANTIATION_OPTION_REQUIRED`                | `MERCHANT` | Occurs when a component is created that is missing a required option.\n`INVALID_OPTION`                               | `MERCHANT` | Occurs when a component is consuming unsupported option.\n`INCOMPATIBLE_VERSIONS`                        | `MERCHANT` | Occurs when a component is created with a client with a different version than the component.\n"
  - name: SeamlessPayCoreFramework
    x-displayName: SeamlessPayCore Framework
    description: >

      The SeamlessPay iOS SDK makes it quick and easy to build an excellent
      payment experience in your iOS app. We provide powerful elements that can
      be used out-of-the-box to collect your users’ payment details. We also
      expose the low-level APIs that power those UIs so that you can build fully
      custom experiences.


      We provide low-level SPAPIClient that correspond to objects and methods in
      the SeamlessPay API. You can build your own entirely custom UI on top of
      this layer, while still taking advantage of utilities from SeamlessPayCore
      framework.


      We provide native element to collect payment. SPPaymentCardTextField is a
      text field with similar properties to UITextField, but specialized for
      collecting credit/debit card information. It manages multiple UITextFields
      under the hood to collect this information. It’s designed to fit on a
      single line, and from a design perspective can be used anywhere a
      UITextField would be appropriate. <br>


      <image aligin="center" src="/images/card-field.gif" width=400> <br>


      Requirements:

      The SeamlessPay iOS SDK requires Xcode 10.1 or later and is compatible
      with apps targeting iOS 9 or above.
  - name: GettingStartedSDKiOS
    x-displayName: Getting Started
    description: >

      SeamlessPayCore is available through CocoaPods. To install, simply add the
      following line to your Podfile:

      ```javascript

      pod 'SeamlessPayCore'

      ```


      When your app starts, configure the SDK with your SeamlessPay publishable
      (you can get it on the API Keys page), so that it can make requests to the
      SeamlessPay API.


      Using only Publishable Key for a single page apps without their own
      backend. In this case you will be able to do `/v1/charge` only.<br/>

      Using a Secret Key allows you using all transaction's methods (e.g.
      `/v1/charge`, `/v1/refund`, `/v1/void`).


      #### Objective-C:

      ```javascript
        AppDelegate.m
          #import "AppDelegate.h"
          @import SeamlessPayCore;

          @implementation AppDelegate
          - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
              [[SPAPIClient getSharedInstance]
                setSecretKey:@"sk_XXXXXXXXXXXXXXXXXXXXXXXXXX" // can be nil
                publicKey:@"pk_XXXXXXXXXXXXXXXXXXXXXXXXXX"
                sandbox:TRUE];
              // do any other necessary launch configuration
              return TRUE;
          }
          @end
      ```

      #### Swift:

      ```swift
        import SeamlessPayCore

        @UIApplicationMain
        class AppDelegate: UIResponder, UIApplicationDelegate {
            func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
                // Override point for customization after application launch.

                SPAPIClient.getSharedInstance()?.setSecretKey(@"sk_XXXXXXXXXXXXXXXXXXXXXXXXXX", // can be nil
                                                              publishableKey: "pk_XXXXXXXXXXXXXXXXXXXXXXXXXX",
                                                              sandbox: true)

                return true
            }
        }
      ```
  - name: CreatePaymentForm
    x-displayName: Create Payment Form
    description: >

      Securely collect card information on the client with
      SPPaymentCardTextField, a drop-in UI component provided by the SDK.

      Create an instance of the card component and a Pay button with the
      following code:


      #### Objective-C:


      ```javascript
        CheckoutViewController.m

        #import "CheckoutViewController.h"
        @import SeamlessPayCore;

        @interface CheckoutViewController ()
        @property (weak) SPPaymentCardTextField *cardTextField;
        @property (weak) UIButton *payButton;
        @end

        @implementation CheckoutViewController

        - (void)viewDidLoad {
            [super viewDidLoad];
            self.view.backgroundColor = [UIColor whiteColor];
            SPPaymentCardTextField *cardTextField = [[SPPaymentCardTextField alloc] init];
            self.cardTextField = cardTextField;
            UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
            button.layer.cornerRadius = 5;
            button.backgroundColor = [UIColor systemBlueColor];
            button.titleLabel.font = [UIFont systemFontOfSize:22];
            [button setTitle:@"Pay" forState:UIControlStateNormal];
            [button addTarget:self action:@selector(pay) forControlEvents:UIControlEventTouchUpInside];
            self.payButton = button;
            UIStackView *stackView = [[UIStackView alloc] initWithArrangedSubviews:@[cardTextField, button]];
            stackView.axis = UILayoutConstraintAxisVertical;
            stackView.translatesAutoresizingMaskIntoConstraints = FALSE;
            stackView.spacing = 20;
            [self.view addSubview:stackView];
            [NSLayoutConstraint activateConstraints:@[
                [stackView.leftAnchor constraintEqualToSystemSpacingAfterAnchor:self.view.leftAnchor multiplier:2],
                [self.view.rightAnchor constraintEqualToSystemSpacingAfterAnchor:stackView.rightAnchor multiplier:2],
                [stackView.topAnchor constraintEqualToSystemSpacingBelowAnchor:self.view.topAnchor multiplier:20],
            ]];
        }

        - (void)pay {

            NSString *cardNumber = _cardTextField.cardNumber;
            NSString *exp = _cardTextField.formattedExpirationDate;
            NSString *cvc = _cardTextField.cvc;
            NSString *zip = _cardTextField.postalCode;

            NSLog(@"%@ %@ %@ %@",cardNumber,exp,cvc,zip);
        }
        @end
      ```

      #### Swift:


      ```javascript
        CheckoutViewController.swift

        import UIKit

        import SeamlessPayCore

        class ViewController: UIViewController {
            lazy var cardTextField: SPPaymentCardTextField = {
                let cardTextField = SPPaymentCardTextField()
                return cardTextField
            }()

            lazy var payButton: UIButton = {
                let button = UIButton(type: .custom)
                button.layer.cornerRadius = 5
                button.backgroundColor = .systemBlue
                button.titleLabel?.font = UIFont.systemFont(ofSize: 22)
                button.setTitle("Pay", for: .normal)
                button.addTarget(self, action: #selector(pay), for: .touchUpInside)
                return button
            }()

            override func viewDidLoad() {
                super.viewDidLoad()
                // Do any additional setup after loading the view.

                view.backgroundColor = .white
                let stackView = UIStackView(arrangedSubviews: [cardTextField, payButton])
                stackView.axis = .vertical
                stackView.spacing = 20
                stackView.translatesAutoresizingMaskIntoConstraints = false
                view.addSubview(stackView)
                NSLayoutConstraint.activate([
                    stackView.leftAnchor.constraint(equalToSystemSpacingAfter: view.leftAnchor, multiplier: 2),
                    view.rightAnchor.constraint(equalToSystemSpacingAfter: stackView.rightAnchor, multiplier: 2),
                    stackView.topAnchor.constraint(equalToSystemSpacingBelow: view.topAnchor, multiplier: 20),
                ])
            }

            @objc
            func pay() {
                // ...
            }
        }
      ```
  - name: CreatePaymentMethod
    x-displayName: Create Payment Method and Charge
    description: "\nWhen the user taps the pay button, convert the card information collected by STPPaymentCardTextField into a PaymentMethod token. Tokenization ensures that no sensitive card data ever needs to touch your server, so that your integration remains PCI compliant. After the client passes the token, pass its identifier as the source to create a charge:\n\n#### Objective-C:\n\n```javascript\n  - (void)pay {\n\n    [[SPAPIClient getSharedInstance] createPaymentMethodWithType:@\"CREDIT_CARD\"\n        account:self.cardTextField.cardNumber\n        expDate:self.cardTextField.formattedExpirationDate\n        cvv:self.cardTextField.cvc\n        accountType:nil\n        routing:nil\n        pin:nil\n        address:nil\n        address2:nil\n        city:nil\n        country:nil\n        state:nil\n        zip:self.cardTextField.postalCode\n        company:nil\n        email:nil\n        phone:nil\n        name:@\"IOS test\"\n        nickname:nil\n        verification : TRUE\n        success:^(SPPaymentMethod *paymentMethod) {\n          // Handle success\n        }\n        failure:^(SPError *error) {\n\n        \t// Handle the error\n\n          NSString *err = [error localizedDescription];\n\n        }];\n  }\n```\n### Swift:\n```swift\n  @objc\n      func pay() {\n          SPAPIClient.getSharedInstance()?.createPaymentMethod(\n              withType: \"CREDIT_CARD\",\n              account: cardTextField.cardNumber,\n              expDate: cardTextField.formattedExpirationDate,\n              cvv: self.cardTextField.cvc,\n              accountType: nil,\n              routing: nil,\n              pin: nil,\n              address: nil,\n              address2: nil,\n              city: nil,\n              country: nil,\n              state: nil,\n              zip: cardTextField.postalCode,\n              company: nil,\n              email: nil,\n              phone: nil,\n              name: nil,\n              nickname: nil,\n              verification: true,\n              success: { (paymentMethod: SPPaymentMethod?) in\n\n                  let token = paymentMethod?.token\n\n              }, failure: { (error: SPError?) in\n\n                  // Handle the error\n                  print(error?.localizedDescription ?? \"\")\n                  return\n              }\n          )\n      }\n```\nStart with <a href=\"https://github.com/seamlesspay/seamlesspay-ios/tree/dev/Example\" target=\"_blank\">'Demo APP'</a> for sample on basic setup and usage.\n"
  - name: SeamlessPayCoreFrameworkAndroid
    x-displayName: API Client
    description: >

      Welcome to SeamlessPay Android SDK. This library will help you accept card
      and alternative payments in your Android app.


      SeamlessPay Android SDK is available for Android SDK >= 21.


      ### Adding It To Your Project


      Add the dependency in your build.gradle:

      ```swift
        dependencies {
          implementation 'com.seamlesspay.api:Client:1.0.5'
        }
      ```
  - name: Authentication
    x-displayName: Authentication
    description: |

      ```swift
        import com.seamlesspay.api.SeamlesspayFragment;
        import com.seamlesspay.api.Authorization;

        public class CardActivity ...

        Authorization authorization = Authorization.fromKeys(
                            "sandbox",
                            "pk_XXXXXXXXXXXXXXXXXXXXXXXXXX");

        mSeamlesspayFragment = SeamlesspayFragment.newInstance(this, authorization);
      ```
  - name: SingleField
    x-displayName: Single Field
    description: >
      Singlefield widget drop-in UI component provided by the SDK.


      ### Adding It To Your Project

      Add the dependency in your ```build.gradle```:

      ```swift
        dependencies {
            implementation 'com.seamlesspay.ui:Singlefield:1.0.1'
        }
      ```


      ### Usage

      Create an instance of the card component and a Pay button by adding the
      following to your checkout page’s layout:

      ```swift
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout
                xmlns:android="http://schemas.android.com/apk/res/android"
                xmlns:tools="http://schemas.android.com/tools"
                xmlns:app="http://schemas.android.com/apk/res-auto"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                app:layout_behavior="@string/appbar_scrolling_view_behavior"
                tools:showIn="@layout/activity_checkout"
                tools:context=".CardActivity">

            <!--  ...  -->

            <com.seamlesspay.ui.view.CardInputWidget
                    android:id="@+id/cardInputWidget"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginLeft="20dp"
                    android:layout_marginRight="20dp"/>

            <Button
                    android:text="Pay"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:id="@+id/payButton"
                    android:layout_marginTop="20dp"
                    app:layout_constraintTop_toBottomOf="@+id/cardInputWidget"
                    app:layout_constraintStart_toStartOf="@+id/cardInputWidget"
                    app:layout_constraintEnd_toEndOf="@+id/cardInputWidget"/>

            <!--  ...  -->

        </androidx.constraintlayout.widget.ConstraintLayout>
      ```

      ### To access the values in the form, there are getters for each field:

      ```swift
        @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);

                Button payButton = findViewById(R.id.payButton);
                mCardInputWidget = (CardInputWidget) findViewById(R.id.cardInputWidget);
                mCardInputWidget.configureForUs();

                payButton.setOnClickListener(new View.OnClickListener() {
                            public void onClick(View v) {
                                // Code here executes on main thread after user presses button
                                mCardInputWidget.clearFocus();

                                CardBuilder cardBuilder = new CardBuilder()
                                        .accountNumber(mCardInputWidget.getCardNumber())
                                        .expirationMonth(mCardInputWidget.getExpirationMonth())
                                        .expirationYear(mCardInputWidget.getExpirationYear())
                                        .setTxnType(CardBuilder.Keys.CREDIT_CARD_TYPE)
                                        .billingZip(mCardInputWidget.getPostalCode())
                                        .cvv(mCardInputWidget.getCvv())
                                        .verification(true);

                                PanVault.tokenize(mSeamlesspayFragment, cardBuilder);
                            }
                        });
      ```


      ### Example

      <image aligin="center" src="/images/singlefield.gif" width=400> <br>

      Start with <a
      href="https://github.com/seamlesspay/seamlesspay-android/tree/master/DemoSingleField"
      target="_blank">'DemoSinglefield APP'</a> for sample on basic setup and
      usage.
  - name: CardForm
    x-displayName: Card Form
    description: >

      Card Form is a ready made card form layout that can be included in your
      app making it easy to accept credit and debit cards.


      ### Adding It To Your Project


      Add the dependency in your build.gradle:

      ```swift
        dependencies {
          implementation 'com.seamlesspay.sdk:CardForm:1.0.1'
        }
      ```

      ### Usage


      Card Form is a LinearLayout that you can add to your layout:

      ```swift
        <com.seamlesspay.cardform.view.CardForm
        android:id="@+id/card_form"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
      ```

      To initialize the view and change which fields are required for the user
      to enter, use the required field methods and
      ```CardForm#setup(AppCompatActivity activity)```.

      ```swift
        CardForm cardForm = (CardForm) findViewById(R.id.card_form);
        cardForm.cardRequired(true)
        .expirationRequired(true)
        .cvvRequired(true)
        .postalCodeRequired(true)
        .mobileNumberRequired(false)
        .actionLabel(getString(R.string.purchase))
        .setup(activity);
      ```

      To access the values in the form, there are getters for each field:

      ```swift
        cardForm.getCardNumber();
        cardForm.getExpirationMonth();
        cardForm.getExpirationYear();
        cardForm.getCvv();
        cardForm.getPostalCode();
      ```

      To check if ```CardForm``` is valid call ```CardForm#isValid()```. To
      validate each required field and show the user which fields are incorrect,
      call ```CardForm#validate()```.

      To set custom error messages on a field call
      ```CardForm#setCardNumberError(String)``` on the given field.


      Additionally ```CardForm``` has 4 available listeners:

      - ```CardForm#setOnCardFormValidListener``` called when the form changes
      state from valid to invalid or invalid to valid.

      - ```CardForm#setOnCardFormSubmitListener``` called when the form should
      be submitted.

      - ```CardForm#setOnFormFieldFocusedListener``` called when a field in the
      form is focused.

      - ```CardForm#setOnCardTypeChangedListener``` called when the CardType in
      the form changes.


      <image aligin="center" src="/images/androidSDK.png" width=400> <br>
  - name: CreateToken
    x-displayName: Create Token
    description: >
      Create the token of given payment data. To access the values in the form,
      there are getters for each field

      ```swift
        CardBuilder cardBuilder = new CardBuilder()
                          .accountNumber(mCardForm.getCardNumber())
                          .expirationMonth(mCardForm.getExpirationMonth())
                          .expirationYear(mCardForm.getExpirationYear())
                          .setTxnType(CardBuilder.Keys.CREDIT_CARD_TYPE)
                          .billingZip(mCardForm.getPostalCode())
                          .cvv(mCardForm.getCvv())
                          .verification(true);

                    PanVault.tokenize(activity, cardBuilder);
      ```

      Available listener:

      - ```PaymentMethodTokenCreatedListener``` called when the
      ```PaymentMethodToken``` getting card token.
  - name: CreateCharge
    x-displayName: Create a Charge
    description: >
      ```swift
        CardChargeBulder chargeBulder = new CardChargeBulder()
                        .setAmount("1")
                        .setCurrency(CardChargeBulder.Keys.CURRENCY_USD)
                        .setCapture(true)
                        .setToken(token.getToken())
                        .setDescription("Demo Android Client Charge")
                        .setCvv(mCardForm.getCvv());

                  Charge.create(activity, chargeBulder);
      ```

      Available listener:

      - ```BaseChargeTokenCreatedListener``` called when the ```chargeToken```
      getting charge info.
  - name: ExamplesAndroid
    x-displayName: Examples
    description: >

      Start with <a
      href="https://github.com/seamlesspay/seamlesspay-android/tree/dev/Demo"
      target="_blank">Demo APP</a> for sample on basic setup and usage.
x-tagGroups:
  - name: Pan Vault
    tags:
      - PanVault
  - name: Payments
    tags:
      - Charge
      - Adjustments
      - Captures
      - Voids
      - Refunds
      - Batches
      - GiftCards
      - BinLookup
  - name: Other
    tags:
      - Customers
servers:
  - url: https://api.seamlesspay.com
    description: Production
  - url: https://sandbox.seamlesspay.com
    description: Sandbox
paths:
  /v1/charge:
    post:
      summary: Create a Charge
      operationId: createCharge
      tags:
        - Charge
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Charge'
      responses:
        '201':
          description: Result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Captured'
                  - $ref: '#/components/schemas/Auth'
                  - $ref: '#/components/schemas/Gift'
              examples:
                captured:
                  summary: CAPTURED
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    apiKey: sk_01C043F2241X7WM7MTZKB5822N1
                    authCode: A11111
                    method: charge
                    order:
                      shipToZip: 11111-1111
                      shipFromZip: 99999-9999
                      items:
                        - discountAmount: '20.00'
                          unitCost: '10.00'
                          unitOfMeasure: CS
                          lineNumber: '1'
                          description: DESCRIPTION-1
                          taxAmount: '5.00'
                          quantity: '12'
                          upc: UPC-1
                          lineTotal: '105.00'
                          taxExempt: false
                          taxRate: '0.05'
                    avsMessage: street match, zip decline
                    avsResult: SM, ZD
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    statusDescription: Transaction capture success
                    cardBrand: Visa
                    lastFour: '1000'
                    businessCard: false
                    statusCode: captured
                    status: CAPTURED
                    batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
                    surchargeFeeAmount: '1.00'
                    tip: '1.00'
                    cvvResult: M
                    cardType: Credit
                    txnDate: '2020-02-24T19:43:12.730Z'
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
                auth:
                  summary: AUTH
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    apiKey: sk_01C043F2241X7WM7MTZKB5822N1
                    authCode: A11111
                    method: charge
                    order:
                      shipToZip: 11111-1111
                      shipFromZip: 99999-9999
                      items:
                        - discountAmount: '20.00'
                          unitCost: '10.00'
                          unitOfMeasure: CS
                          lineNumber: '1'
                          description: DESCRIPTION-1
                          taxAmount: '5.00'
                          quantity: '12'
                          upc: UPC-1
                          lineTotal: '105.00'
                          taxExempt: false
                          taxRate: '0.05'
                    avsMessage: street match, zip decline
                    avsResult: SM, ZD
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    statusDescription: Transaction approved
                    cardBrand: Visa
                    lastFour: '1000'
                    businessCard: false
                    statusCode: approved
                    status: AUTHORIZED
                    surchargeFeeAmount: '1.00'
                    tip: '1.00'
                    cvvResult: M
                    cardType: Credit
                    txnDate: '2020-02-24T19:43:12.730Z'
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
                gift_card:
                  summary: GIFT CARD
                  value:
                    id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
                    amount: '105.00'
                    apiKey: sk_01C043F2241X7WM7MTZKB5822N1
                    authCode: A11111
                    method: charge
                    avsMessage: street match, zip decline
                    avsResult: SM, ZD
                    currency: USD
                    ipAddress: 192.168.0.1
                    token: TKN_01BMFGDTK30EYH9FWTXPYR50
                    statusDescription: Transaction settled
                    statusCode: settled
                    status: SETTLED
                    txnDate: '2020-02-24T19:43:12.730Z'
                    updatedAt: '2020-02-24T19:43:12.730Z'
                    createdAt: '2020-02-24T19:43:12.730Z'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Charges
      operationId: listCharges
      tags:
        - Charge
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCharges'
        '401':
          $ref: '#/components/responses/401'
  /v1/charge/{transaction_id}:
    get:
      summary: Retrieve a Charge
      operationId: retrieveCharge
      tags:
        - Charge
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/Charge'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /checkout-session:
    post:
      summary: Create a Checkout Session
      operationId: createCheckoutSession
      tags:
        - Checkout
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/CheckoutSession'
      responses:
        '201':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Checkout Session ID.
                  amount:
                    allOf:
                      - $ref: '#/components/schemas/Amount'
                    description: String with 2 decimal places e.g “25.00”.
                  checkoutId:
                    type: string
                    description: Checkout Form ID.
                  checkoutFields:
                    type: string
                    description: Default Checkout Form values.
                  meta:
                    type: object
                    description: Data pushed with transaction. For reporting purposes only.
                  createdAt:
                    type: string
                    description: Date.
                example:
                  id: CHS_01DJNFZAA730Z5RM3YSKM2908V
                  checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
                  amount: '105.00'
                  checkoutFields:
                    company: Ledner, Toy and Roob
                    billing_name: Luella King
                    billing_state: California
                    billing_city: Sofiabury
                    billing_address: 626 Maggie Divide
                    billing_address2: Apt. 441
                  meta:
                    customField: customValue
                  createdAt: '2017-12-15T19:08:18.262Z'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
      x-code-samples:
        - lang: CURL
          source: |
            curl -X POST http://localhost:3030/checkout-session \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer {SECRET_API_KEY}" \
              -d '{ "amount": "3", "checkoutId": "CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ", "meta": { "customField": "customValue" } }'
  /v1/adjustment:
    post:
      summary: Create an Adjustment
      description: Adjustment only apply to `CREDIT_CARD` transactions
      operationId: createAdjustment
      tags:
        - Adjustments
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/Adjustment'
      responses:
        '201':
          $ref: '#/components/responses/Adjustment'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /v1/refund:
    post:
      summary: Create a Refund
      operationId: createRefund
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Refund'
      responses:
        '201':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Refunds
      operationId: listRefunds
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllRefund'
        '401':
          $ref: '#/components/responses/401'
  /v1/refund/{transaction_id}:
    get:
      summary: Retrieve a Refund
      operationId: retrieveRefund
      tags:
        - Refunds
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Refund
      operationId: updateRefund
      tags:
        - Refunds
      parameters:
        - name: transaction_id
          in: path
          description: ID of Transaction for update
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRefund'
      responses:
        '200':
          $ref: '#/components/responses/Refund'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /v1/capture:
    post:
      summary: Create a Capture
      operationId: createCapture
      tags:
        - Captures
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Capture'
      responses:
        '201':
          $ref: '#/components/responses/Capture'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Captures
      operationId: listCaptures
      tags:
        - Captures
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCaptures'
        '401':
          $ref: '#/components/responses/401'
  /v1/capture/{transaction_id}:
    get:
      summary: Retrieve a Capture
      operationId: retrieveCapture
      tags:
        - Captures
      parameters:
        - name: transaction_id
          in: path
          description: ID of Capture Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/Capture'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /v1/void:
    post:
      summary: Create a Void
      operationId: createVoid
      tags:
        - Voids
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Void'
      responses:
        '201':
          $ref: '#/components/responses/Void'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Voids
      operationId: listVoids
      tags:
        - Voids
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllVoids'
        '401':
          $ref: '#/components/responses/401'
  /v1/void/{transaction_id}:
    get:
      summary: Retrieve a Void
      operationId: retrieveVoid
      tags:
        - Voids
      parameters:
        - name: transaction_id
          in: path
          description: ID of Void Transaction to return
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/Void'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /v1/customers:
    post:
      summary: Create a Customer
      operationId: createCustomer
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '201':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Customers
      operationId: listCustomers
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllCustomers'
        '401':
          $ref: '#/components/responses/401'
  /v1/customers/{customer_id}:
    get:
      summary: Retrieve a Customer
      operationId: retrieveCustomer
      tags:
        - Customers
      parameters:
        - name: customer_id
          in: path
          schema:
            type: string
          description: ID of Customer to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a Customer
      operationId: updateCustomer
      tags:
        - Customers
      parameters:
        - name: customer_id
          in: path
          schema:
            type: string
          description: ID of customer for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /v1/submerchants:
    post:
      summary: Create Sub-Merchant
      description: Sub-Merchant
      operationId: createSubMerchant
      tags:
        - SubMerchant
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/SubMerchant'
      responses:
        '201':
          $ref: '#/components/responses/SubMerchant'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
    get:
      summary: List Sub-Merchants
      description: List Sub-Merchants
      operationId: listSubMerchants
      tags:
        - SubMerchant
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllSubMerchants'
        '401':
          $ref: '#/components/responses/401'
  /v1/submerchants/{submerchant_id}:
    get:
      summary: Retrieve Sub-Merchant
      description: Retrieve Sub-Merchant
      operationId: retrieveSubMerchant
      tags:
        - SubMerchant
      parameters:
        - name: submerchant_id
          in: path
          schema:
            type: string
          description: ID of sub-merchant to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/SubMerchant'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /v1/webhooks:
    get:
      summary: List Webhook Events
      description: Retrieves all Webhook Events
      operationId: listWebhooks
      tags:
        - WebhookEvents
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllWebhooksEvents'
        '401':
          $ref: '#/components/responses/401'
  /v1/webhooks-endpoints:
    post:
      summary: Create Webhook
      description: Webhooks
      operationId: createWebhook
      tags:
        - Webhooks
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Webhook'
      responses:
        '201':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /v1/webhooks/{webhook_id}:
    get:
      summary: Retrieve Webhook
      description: Retrieves the details of webhook
      operationId: retrieveWebhook
      tags:
        - Webhooks
      parameters:
        - name: webhook_id
          in: path
          schema:
            type: string
          description: ID of webhook to return
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/WebhookEvent'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /v1/webhooks-endpoints/{webhook_endpoint_id}:
    put:
      summary: Update Webhook
      description: Update the details of webhook
      operationId: updateWebhook
      tags:
        - Webhooks
      parameters:
        - name: webhook_endpoint_id
          in: path
          schema:
            type: string
          description: ID of webhook-endpoint for update
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/Webhook'
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /v1/close-batch:
    post:
      summary: Close a Batch
      description: Close Batch manually
      operationId: closeBatch
      tags:
        - Batches
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/platformVersion'
      requestBody:
        $ref: '#/components/requestBodies/CloseBatch'
      responses:
        '201':
          $ref: '#/components/responses/CloseBatch'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /v1/payouts:
    get:
      summary: List Payouts
      description: Statistical data of payouts
      operationId: listPayouts
      tags:
        - Payouts
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllPayouts'
        '401':
          $ref: '#/components/responses/401'
  /v1/statements:
    get:
      summary: List Statements
      description: Statistical data of statements
      operationId: listStatements
      tags:
        - Statements
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllStatements'
        '401':
          $ref: '#/components/responses/401'
  /v1/pci-audit-info:
    get:
      summary: List PCI Audit
      description: Statistical data of PCI Audit
      operationId: listPCI
      tags:
        - PCIAudit
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllPCI'
        '401':
          $ref: '#/components/responses/401'
  /v1/irs-info:
    get:
      summary: List IRS Reporting
      description: Statistical data of IRS Reporting
      operationId: listIRS
      tags:
        - IRSReporting
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllIRS'
        '401':
          $ref: '#/components/responses/401'
  /v1/disputes:
    get:
      summary: List Disputes
      description: Statistical data of disputes
      operationId: listDisputes
      tags:
        - Disputes
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllDisputes'
        '401':
          $ref: '#/components/responses/401'
  /v1/retrievals:
    get:
      summary: List Retrievals
      description: Retrieves all webhooks
      operationId: listRetrievals
      tags:
        - Retrievals
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '200':
          $ref: '#/components/responses/AllRetrievals'
        '401':
          $ref: '#/components/responses/401'
  /v1/gift-card:
    post:
      summary: Create Gift Card
      description: >-
        Creates a new stored value account (gift card) for the merchant
        associated with API key passed with the request.
      operationId: createGiftCard
      tags:
        - GiftCards
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/GiftCard'
      responses:
        '201':
          $ref: '#/components/responses/GiftCard'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
  /v1/gift-card/{accountNumber|token}:
    get:
      summary: Retrieve Gift Card
      description: >-
        For convenience we provide a dead simple endpoint for querying card
        information.
      operationId: retrieveGiftCard
      tags:
        - GiftCards
      parameters:
        - name: accountNumber|token
          in: path
          schema:
            type: string
          description: You must provide `accountNumber` or `token` for the requests.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '201':
          $ref: '#/components/responses/GiftCardInfo'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update Gift Card
      description: >-
        Adds value to card account for the merchant associated with API key
        passed with the request.
      operationId: updateGiftCard
      tags:
        - GiftCards
      parameters:
        - name: accountNumber|token
          in: path
          schema:
            type: string
          description: You must provide `accountNumber` or `token` for the requests.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/GiftCardUpdate'
      responses:
        '201':
          $ref: '#/components/responses/GiftCardReload'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      summary: Delete Gift Card
      description: >-
        Remove stored value account (gift card) for the merchant associated with
        API key passed with the request.
      operationId: deleteGiftCard
      tags:
        - GiftCards
      parameters:
        - name: accountNumber|token
          in: path
          schema:
            type: string
          description: You must provide `accountNumber` or `token` for the requests.
          required: true
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/apiVersion'
      responses:
        '201':
          $ref: '#/components/responses/GiftCardRemove'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /tokens:
    post:
      summary: Create Token
      description: >-
        Create the token of given payment data. Get token method require type of
        given object
      operationId: createToken
      servers:
        - url: https://pan-vault.seamlesspay.com
          description: Production
        - url: https://sandbox-pan-vault.seamlesspay.com
          description: Sandbox
      tags:
        - PanVault
      parameters:
        - $ref: '#/components/parameters/panVaultAuthorization'
        - $ref: '#/components/parameters/apiVersion'
      requestBody:
        $ref: '#/components/requestBodies/PanVault'
      responses:
        '201':
          $ref: '#/components/responses/PanVault'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        className:
          type: string
        message:
          type: string
        name:
          type: string
    WithoutDataError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: object
    InvalidError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            data:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
                statusCode:
                  type: string
                statusDescription:
                  type: string
    Transaction:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key
              example: sk_01C043F2241X7WM7MTZKB5822N
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
              example: street match, zip decline
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
              example: SM, ZD
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
              example: M
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
              example: AUTHORIZED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: approved
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction approved
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: Tip amount
            txnDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
    Refund:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            batch:
              allOf:
                - $ref: '#/components/schemas/BatchID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key
              example: sk_01C043F2241X7WM7MTZKB5822N
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
              example: '{"customOption":"example"}'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - refund
              description: Transaction method
              example: refund
            status:
              type: string
              enum:
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
              example: CAPTURED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: captured
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction capture success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
            idempotencyKey:
              type: string
              description: Optional, see section [above](#section/Idempotent-Requests).
              example: 7c62e63ab7fb6d10166b70945dc48b52
        - $ref: '#/components/schemas/ModelsDate'
    Capture:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            batch:
              allOf:
                - $ref: '#/components/schemas/BatchID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key
              example: sk_01C043F2241X7WM7MTZKB5822N
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
              example: street match
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            status:
              type: string
              enum:
                - CAPTURED
                - SETTLED
                - REFUNDED
                - DECLINED
                - ERROR
              description: Transaction status
              example: CAPTURED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: captured
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction capture success
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Tip amount
            txnDate:
              type: string
              format: date-time
              description: Transaction date
            taxAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
        - $ref: '#/components/schemas/ModelsDate'
    AdjustmentRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        surchargeFeeAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        txnID:
          type: string
          maxLength: 31
          description: Transaction ID.
      required:
        - amount
        - txnID
      example:
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
        txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    Adjustment:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/AdjustmentID'
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Adjustment amount
        tip:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tip amount
        taxAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tax amount
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
        txnID:
          type: string
          description: Transaction ID.
      example:
        id: ADJ_01BBEBNMZ7VYYMADN9MJ3RDAJM
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
        txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    ChargeAdjustment:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/AdjustmentID'
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Adjustment amount
        tip:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tip amount
        taxAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Tax amount
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
      example:
        id: ADJ_01BBEBNMZ7VYYMADN9MJ3RDAJM
        amount: '105.00'
        tip: '1.00'
        taxAmount: '5.00'
        surchargeFeeAmount: '1.00'
    Void:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Transaction amount
            apiKey:
              type: string
              description: API Key
              example: sk_01C043F2241X7WM7MTZKB5822N
            authCode:
              type: string
              description: Auth Code
              example: A11111
            batch:
              $ref: '#/components/schemas/BatchID'
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
                - refund
              description: Transaction method
              example: charge
            status:
              type: string
              enum:
                - VOIDED
                - DECLINED
                - ERROR
              description: Transaction status
              example: VOIDED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: voided
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction void success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
            businessCard:
              type: boolean
              example: false
              description: Flag determining credit card class
        - $ref: '#/components/schemas/ModelsDate'
    CaptureRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        txnID:
          allOf:
            - $ref: '#/components/schemas/TransactionID'
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
          description: Order(overwrite values on initial Charge).
      required:
        - txnID
      example:
        amount: '105.00'
        surchargeFeeAmount: '1.00'
        taxAmount: '1.00'
        tip: '1.00'
        order:
          shipToZip: 11111-1111
          shipFromZip: 99999-9999
          items:
            - discountAmount: '20.00'
              unitCost: '10.00'
              unitOfMeasure: CS
              lineNumber: '1'
              description: DESCRIPTION-1
              taxAmount: '5.00'
              quantity: '12'
              upc: UPC-1
              lineTotal: '105.00'
              taxExempt: false
              taxRate: '0.05'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    VoidRequest:
      type: object
      properties:
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        txnID:
          allOf:
            - $ref: '#/components/schemas/TransactionID'
          description: The ID or idempotencyKey of base transaction
      required:
        - txnID
      example:
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    PaymentMethod:
      type: object
      xml:
        name: paymentMethod
      properties:
        billingAddress:
          type: string
          description: The billing first address.
        billingAddress2:
          type: string
          description: The billing second address.
        billingCity:
          type: string
          description: The billing city.
        billingState:
          type: string
          description: The billing state.
        billingZip:
          type: string
          description: The billing zip.
        billingCountry:
          type: string
          description: The billing country.
        phone:
          type: string
          description: The phone.
        email:
          type: string
          description: The email.
        lastFour:
          type: string
          description: Last four of account number.
          example: '1000'
        name:
          type: string
          description: The Account name.
          default: customer
        nickname:
          type: string
          description: The nickname.
        token:
          type: string
          description: The token.
        routingNumber:
          type: string
          description: The Routing Number.
        txnType:
          type: string
          enum:
            - CREDIT_CARD
            - ACH
            - GIFT_CARD
            - PINDEBIT_CARD
            - PLDEBIT_CARD
    Customer:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            address:
              type: string
              description: The customer's first address.
            address2:
              type: string
              description: The customer's second address.
            city:
              type: string
              description: The customer's city.
            companyName:
              type: string
              description: The customer's company name.
            country:
              type: string
              description: The customer's country.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            paymentMethods:
              type: array
              xml:
                name: paymentMethod
                wrapped: true
              items:
                $ref: '#/components/schemas/PaymentMethod'
              description: The customer's payment methods.
            state:
              type: string
              maxLength: 2
              minLength: 2
              description: The customer's state.
            zip:
              type: string
              maxLength: 5
              minLength: 5
              description: The customer's zip code.
            website:
              type: string
              description: The customer's website.
          example:
            id: CUS_01CR94R2JQR071FVF76XBGC3W4
            address: 400 Madison Ave
            address2: 10th Fl
            companyName: ABC Business
            city: New York
            country: USA
            email: hello@seamlesspay.com
            metadata: '{"customOption":"example"}'
            name: Michael Smith
            phone: '2125555000'
            paymentMethods:
              - billingAddress: 400 Madison Ave
                billingAddress2: 10th Fl
                billingCity: New York
                billingState: NY
                billingZip: '10010'
                billingCountry: USA
                phone: '2125555000'
                email: hello@seamlesspay.com
                lastFour: '4242'
                name: Michael Smith
                nickname: Visa card
                token: TKN_01CBH0CKW6571SC337SWKSDCAE
                routingNumber: '123456789'
                txnType: CREDIT_CARD
            state: NY
            zip: '10010'
            website: https://example.com
        - $ref: '#/components/schemas/ModelsDate'
    TokenCustomerRequest:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            address:
              type: string
              description: The customer's first address.
            address2:
              type: string
              description: The customer's second address.
            city:
              type: string
              description: The customer's city.
            companyName:
              type: string
              description: The customer's company name.
            country:
              type: string
              description: The customer's country.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            state:
              type: string
              maxLength: 2
              minLength: 2
              description: The customer's state.
            zip:
              type: string
              maxLength: 5
              minLength: 5
              description: The customer's zip code.
            website:
              type: string
              description: The customer's website.
          required:
            - name
      example:
        customer:
          address: 400 Madison Ave
          address2: 10th Fl
          companyName: ABC Business
          city: New York
          country: USA
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          state: NY
          zip: '10010'
          website: https://example.com
    CustomerRequest:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            address:
              type: string
              description: The customer's first address.
            address2:
              type: string
              description: The customer's second address.
            city:
              type: string
              description: The customer's city.
            companyName:
              type: string
              description: The customer's company name.
            country:
              type: string
              description: The customer's country.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            state:
              type: string
              maxLength: 2
              minLength: 2
              description: The customer's state.
            zip:
              type: string
              maxLength: 5
              minLength: 5
              description: The customer's zip code.
            website:
              type: string
              description: The customer's website.
          required:
            - name
      example:
        customer:
          address: 400 Madison Ave
          address2: 10th Fl
          companyName: ABC Business
          city: New York
          country: USA
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          state: NY
          zip: '10010'
          website: https://example.com
    TokenCustomer:
      type: object
      properties:
        customer:
          type: object
          description: The payment method customer.
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            address:
              type: string
              description: The customer's first address.
            address2:
              type: string
              description: The customer's second address.
            city:
              type: string
              description: The customer's city.
            companyName:
              type: string
              description: The customer's company name.
            country:
              type: string
              description: The customer's country.
            email:
              type: string
              description: The customer's email.
            metadata:
              type: string
              description: Custom JSON.
            name:
              type: string
              description: The customer's name.
            phone:
              type: string
              maxLength: 10
              minLength: 10
              description: The customer's phone number.
            state:
              type: string
              maxLength: 2
              minLength: 2
              description: The customer's state.
            zip:
              type: string
              maxLength: 5
              minLength: 5
              description: The customer's zip code.
            website:
              type: string
              description: The customer's website.
            updatedAt:
              type: string
              format: date-time
              description: Date of update data
            createdAt:
              type: string
              format: date-time
              description: Date of create data
      example:
        customer:
          id: CUS_01CBVZHCFCYQD84QS5V2323HB6
          address: 400 Madison Ave
          address2: 10th Fl
          companyName: ABC Business
          city: New York
          country: USA
          email: hello@seamlesspay.com
          metadata: '{"customOption":"example"}'
          name: Michael Smith
          phone: '2125555000'
          state: NY
          zip: '10010'
          website: https://example.com
          updatedAt: '2017-12-15T19:08:18.262Z'
          createdAt: '2017-12-15T19:08:18.262Z'
    GiftCard:
      allOf:
        - type: object
          properties:
            amount:
              type: string
              maxLength: 12
              description: Amount.
            lastFour:
              type: string
              description: Last four of account number.
          example:
            amount: '105.00'
            lastFour: '0018'
        - $ref: '#/components/schemas/ModelsDate'
    BinLookup:
      type: object
      properties:
        bin:
          type: string
          description: The BIN value.
        cardBrand:
          type: string
          enum:
            - Visa
            - MasterCard
            - American Express
            - Discover
          description: Detail Card Product - Visa, MasterCard, American Express, Discover.
        cardClass:
          type: string
          description: >-
            Categorizes the BIN as a Business card, Corporate T&E card, Purchase
            card or Consumer card. Assists the POS device with prompting
            decisions – to collect addenda or not.`
        cardDetail:
          type: string
          description: Determines the card usage (pin, signature etc.).
        cardType:
          type: string
          enum:
            - Credit
            - Debit
            - Prepaid
          description: >-
            Determines the card type (credit, debit, prepaid) and usage (pin,
            signature etc.).
        country:
          type: string
          description: Three character alpha country code.
        debitNetwork:
          type: string
          description: Debit Network/PINless value.
        debitSignatureNetworkParticipant:
          type: string
          description: S = STAR Access.
        fsa:
          type: string
          enum:
            - 'Yes'
            - 'No'
          description: FSA Indicator (Yes/No).
        issuingBank:
          type: string
          description: This is the Issuer Bank name for the BIN.
        regulatorIndicator:
          type: string
          description: Applies to US issued cards only (Visa, MasterCard, and Discover).
        prepaidIndicator:
          type: string
          enum:
            - 'Yes'
            - 'No'
          description: Prepaid Card (Yes/No).
        productID:
          type: string
          description: >-
            These values indicate card product sub categories (Purchase Card,
            Business Card, etc.) for Visa, MasterCard, and Discover.
      example:
        bin: '411111'
        issuingBank: Bank Name
        country: USA
        cardBrand: Visa
        cardType: Credit
        cardDetail: True credit (No PIN/Signature capability)
        debitNetwork: ACCEL FISERV – Pinned POS
        debitSignatureNetworkParticipant: ''
        fsa: 'No'
        prepaidIndicator: 'No'
        productID: Visa Classic
        regulatorIndicator: 'N'
        cardClass: Consumer
    GiftCardReload:
      allOf:
        - type: object
          properties:
            amount:
              type: string
              description: Gift card amount.
            currency:
              type: string
              description: Currency.
            status:
              type: string
              description: Status.
            statusDescription:
              type: string
              description: Status descriptions.
            txnMethod:
              type: string
              enum:
                - refund
              description: Transaction type.
            txnID:
              type: string
              maxLength: 31
              description: Transaction ID.
          example:
            amount: '105.00'
            currency: USD
            status: SETTLED
            statusDescription: Transaction settled
            txnMethod: refund
            txnID: TXN_01BXA5RCMCMRES01JA2D6HE08H
        - $ref: '#/components/schemas/ModelsDate'
    GiftCardInfo:
      allOf:
        - $ref: '#/components/schemas/GiftCard'
        - type: object
          properties:
            currency:
              type: string
              description: Currency.
            status:
              type: string
              description: Status.
            statusDescription:
              type: string
              description: Status descriptions.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
          example:
            currency: USD
            status: approved
            statusDescription: Approval
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
    PanVault:
      allOf:
        - type: object
          discriminator:
            propertyName: txnType
            mapping:
              CREDIT_CARD: '#/components/schemas/PanVaultCreditResponse'
              PLDEBIT_CARD: '#/components/schemas/PanVaultPlDebitResponse'
              ACH: '#/components/schemas/PanVaultAchRespon'
              GIFT_CARD: '#/components/schemas/PanVaultGiftResponse'
          properties:
            token:
              type: string
              description: Token of given payment data.
            name:
              type: string
              description: Name as it appears on card.
            customer:
              type: object
              description: The payment method customer.
              properties:
                id:
                  type: string
                  description: Unique identifier for the object.
                address:
                  type: string
                  description: The customer's first address.
                address2:
                  type: string
                  description: The customer's second address.
                city:
                  type: string
                  description: The customer's city.
                companyName:
                  type: string
                  description: The customer's company name.
                country:
                  type: string
                  description: The customer's country.
                email:
                  type: string
                  description: The customer's email.
                metadata:
                  type: string
                  description: Custom JSON.
                name:
                  type: string
                  description: The customer's name.
                phone:
                  type: string
                  maxLength: 10
                  minLength: 10
                  description: The customer's phone number.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The customer's state.
                zip:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The customer's zip code.
                website:
                  type: string
                  description: The customer's website.
                updatedAt:
                  type: string
                  format: date-time
                  description: Date of update data
                createdAt:
                  type: string
                  format: date-time
                  description: Date of create data
          example:
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            name: Michael Smith
            customer:
              id: CUS_01CBVZHCFCYQD84QS5V2323HB6
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
              updatedAt: '2017-12-15T19:08:18.262Z'
              createdAt: '2017-12-15T19:08:18.262Z'
    Batch:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            autoBatchTime:
              type: string
              format: date-time
              description: Time for batch to close
            batchNumber:
              type: string
              description: The batches number
            batchStatus:
              type: string
              enum:
                - BATCH_OPEN
                - BATCH_CLOSED
                - BATCH_CLOSED_AUTO
                - BATCH_CLOSED_ERROR
              description: The batches status
            merchantID:
              type: string
              description: The merchant ID
          example:
            id: BCH_01BBC61W87JS2JTF2A6SZWM55K
            batchStatus: BATCH_CLOSED
            batchNumber: '980060411111'
            entryDate": '2017-12-15T19:08:18.262Z'
            merchantID: '6434364365346436'
        - $ref: '#/components/schemas/ModelsDate'
    WebhookEvent:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            event:
              type: string
              description: The webhook event type.
            endpointID:
              type: string
              description: The endpoint identifier.
            response:
              type: object
              properties:
                success:
                  type: boolean
              description: The webhook's response.
            service:
              type: string
              description: The endpoint service.
            status:
              type: string
              description: The webhook's status.
            sentAttempts:
              type: integer
              description: The webhook's sent at attempts.
          example:
            id: WBE_01C56BV08MX9ACFFN84GQEKEGH
            service: tickets
            event: created
            endpointID: WBH_01C569BBWRP1KSDDDN098Y3127
            status: '200'
            sentAttempts: 1
            response:
              success: true
        - $ref: '#/components/schemas/ModelsDate'
    Webhook:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            endpointType:
              type: string
              enum:
                - ACCOUNT
                - CONNECT
              description: The endpoint type.
            payloadUrl:
              type: string
              pattern: ^(https:\/\/).*
              description: The webhook url.
            secret:
              type: string
              description: The secret key.
            webhookSubscriptions:
              type: array
              items:
                $ref: '#/components/schemas/Subscription'
              description: The webhook's subscriptions.
          example:
            id: WBH_01BBC61W87JS2JTF2A6SGTM50X
            endpointType: ACCOUNT
            payloadUrl: https://www.example.com/webhook
            secret: '50991311'
            webhookSubscriptions:
              - id: WBS_01FFC61W87JS2JTF3A8SGTM70T
                event: created
                service: customers
        - $ref: '#/components/schemas/ModelsDate'
    CloseBatch:
      type: object
      properties:
        data:
          type: object
          properties:
            transactions:
              type: number
              description: Count of affected transactions.
            batches:
              type: array
              description: Array of batches unique identifiers.
          description: Transaction data.
        message:
          type: string
          description: Result message.
        input:
          type: object
          properties:
            batchId:
              type: string
              description: The batch's unique identifier.
            env:
              type: string
              enum:
                - live
                - sandbox
            merchantId:
              type: string
              description: The merchant's unique identifier.
      example:
        data:
          transactions: 1
          batches:
            - BCH_01EHSX8WQP0KYJCCK9B80PX3M1
        message: Produce transactions successfully!
        input:
          batchId: BCH_01EHSX8WQP0KYJCCK9B80PX3M1
          env: live
          merchantId: MRT_01D6K7PCCH4YDAPENGVBRPK861
    CreateBatch:
      type: object
      properties:
        batchID:
          type: string
          description: Batch ID.
      example:
        batchID: BCH_01BPH7PHBE8EHYAJRGGMN94DD5
    Retrieval:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            amount:
              type: string
              maxLength: 12
              description: Amount.
            caseNumber:
              type: string
              description: Case number.
            lastFour:
              type: string
              description: Last four of account number.
            merchantID:
              type: string
              description: Merchant ID.
            retrievalCode:
              type: string
              description: Retrieval code.
            retrievalDate:
              type: string
              description: Retrieval date.
            txnDate:
              type: string
              description: Transaction date.
            txnID:
              type: string
              description: Transaction ID.
          example:
            id: RTL_01BBC61W87JS2JTF2A6SZWM33Y
            amount: '105.00'
            caseNumber: '34643'
            lastFour: '6773'
            merchantID: '2142314234231412'
            retrievalCode: '6021'
            retrievalDate: 01/16/2017
            txnDate: '2020-02-24T19:43:12.730Z'
            txnID: 004-463436346543643643
        - $ref: '#/components/schemas/ModelsDate'
    Dispute:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            amount:
              type: string
              maxLength: 12
              description: Amount.
            caseNumber:
              type: string
              description: Case Number.
            cbCode:
              type: string
              description: CB code.
            cbdetail:
              type: array
              items:
                type: object
              description: CB detail.
            disputeDate:
              type: string
              description: Dispute date.
            lastFour:
              type: string
              description: Last four of account number.
            merchantID:
              type: string
              description: Dispute date.
            repeatCb:
              type: string
              description: Repeat flag.
            txnDate:
              type: string
              description: Transactions date.
            txnID:
              type: string
              maxLength: 31
              description: Transactions ID.
          example:
            id: CHK_01BBC61W87JS2JTF2A6SZWM11Y
            amount: 211.15
            caseNumber: 043 345 34534
            cbCode: '430'
            cbdetail: []
            disputeDate: 01/30/2017
            lastFour: '7982'
            merchantID: '3425423542523523245424'
            repeatCb: '1'
            txnDate: '2020-02-24T19:43:12.730Z'
            txnID: 004-463436346543643643
        - $ref: '#/components/schemas/ModelsDate'
    PCI:
      allOf:
        - type: object
          properties:
            assessor:
              type: string
              description: Assessor.
            companyName:
              type: string
              description: Company name.
            complianceProgram:
              type: string
              description: Compliance Program.
            customerID:
              type: string
              description: The customer's ID.
            dateAdded:
              type: string
              description: The Date of added.
            dateRegistered:
              type: string
              description: The Date of registrered.
            firstCertDate:
              type: string
              description: First Certification Date.
            lastLoginDate:
              type: string
              description: Last login date.
            merchantStatus:
              type: string
              description: Merchant status.
            merchantType:
              type: string
              description: Merchant type.
            mostRecentSaqDate:
              type: string
            mostRecentScanDate:
              type: string
            pciExpiry:
              type: string
              description: PCI expire date.
            pciLevel:
              type: integer
              description: PCI level.
            pciStatus:
              type: string
              description: PCI status.
            primaryMerchantID:
              type: string
              description: Primary merchant ID.
            primaryPocEmail:
              type: string
            primaryPocLastName:
              type: string
            saqExpiry:
              type: string
            saqStatus:
              type: string
            saqType:
              type: string
            scanExpiry:
              type: string
            scanStatus:
              type: string
          example:
            assessor: Trustwave
            companyName: ABC Business
            complianceProgram: SAQ_AND_SCAN
            customerID: '3425324'
            dateAdded: 07/02/2014
            dateRegistered: 08/27/2014
            firstCertDate: 08/26/2014
            lastLoginDate: 08/27/2014
            merchantStatus: ACTIVE
            merchantType: INET-PA
            mostRecentSaqDate: 08/27/2014
            mostRecentScanDate: 10/27/2016
            pciExpiry: 08/26/2015
            pciLevel: 4
            pciStatus: EXPIRED
            primaryMerchantID: '3544325243543232'
            primaryPocEmail: email@merchant.com
            primaryPocLastName: Gaon
            saqExpiry: 08/26/2015
            saqStatus: EXPIRED
            saqType: SAQ_C
            scanExpiry: 01/26/2017
            scanStatus: PASS
    IRS:
      allOf:
        - type: object
          properties:
            irsMatch:
              type: boolean
              description: IRS match on Tax ID number.
            lastChangeDate:
              type: string
              description: Last change date.
          example:
            lastChangeDate: 03/02/2017
            irsMatch: true
    Payout:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            amount:
              type: string
              maxLength: 12
              description: The payout's amount.
            payoutDDA:
              type: string
            merchantID:
              type: string
              description: The merchant ID
            fundingDate:
              type: string
              description: The transmit date
          example:
            id: DPT_01BBC61W87JS2JTF2A6SZWM77K
            amount: '105.00'
            payoutDDA: '****152296'
            merchantID: '3463465436543653'
            fundingDate: 03/08/2017
        - $ref: '#/components/schemas/ModelsDate'
    Statement:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            merchantID:
              type: string
              description: The merchant ID
            month:
              type: string
              description: Month
            pdfBase64:
              type: string
              description: PDF file in Base64
            year:
              type: string
              description: Year
          example:
            id: ST_01BBC61W87JS2JTF2A6SZWM99Y
            merchantID: '5342543254235324'
            month: '04'
            pdfBase64: JVBERi0xLjMKJ...
            year: '2016'
        - $ref: '#/components/schemas/ModelsDate'
    Subscription:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            event:
              type: string
              description: The event name.
            service:
              type: string
              description: The service name.
          example:
            id: WBS_01FFC61W87JS2JTF3A8SGTM70T
            event: created
            service: customers
    SubMerchant:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the object.
            subMID:
              type: string
              description: The sub-merchants id.
            masterMID:
              type: string
              description: The Master Merchant id.
            masterDescriptor:
              type: boolean
              description: The master descriptor
              default: true
            splitProgramID:
              type: string
              description: Split programm id.
            subMerchantEntityName:
              type: string
              description: The sub-merchant's bussiness name
            subMerchantEmail:
              type: string
              description: The sub-merchant email.
          example:
            id: SMT_01C5KKZEAM92FB2ZM3XJTKDEPP
            subMID: '54648651'
            masterMID: '32462476'
            subMerchantEntityName: TEST
            masterDescriptor: true
            splitProgramID: SP_01BBC61NYHG6AR5T35D5Q1ZBFC
            subMerchantEmail: test@test.com
        - $ref: '#/components/schemas/ModelsDate'
    RefundRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        currency:
          $ref: '#/components/schemas/Currency'
        descriptor:
          type: string
          description: >-
            This field contains the merchant name/product/service to be used in
            lieu of the DBA name.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        txnID:
          maxLength: 31
          description: >
            The ID of base transaction <p style='color: #e53935'>This field is
            required if `token` not specified.</p>
        token:
          type: string
          description: >
            The payment method (token) from pan-vault. Is used for headless
            refunds. <p style='color: #e53935'>This field is required if `txnID`
            not specified.</p> <p style='color: #e53935'>Headless refunds
            require special approval by SeamlessPay.</p>
        txnEnv:
          type: string
          enum:
            - M
            - E
            - X
            - C
            - T
          description: |
            <ul>
              <li>M – Telephone or mail</li>
              <li>E – Ecommerce/internet</li>
              <li>X – Magstripe doesn't work</li>
              <li>C – Card on file</li>
              <li>T – Retail</li>
            </ul>
      required:
        - txnID
        - token
      example:
        amount: '105.00'
        currency: USD
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
        metadata: '{"customOption":"example"}'
        txnEnv: E
        txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
        token: TKN_01BMFGDTK30EYH9FWTXPYR50
    RefundLv1Request:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            accountNumber:
              type: string
              description: >-
                Account Number, Track Data, Token or HSM encrypted data. It
                isn't required if EMV data exists. <p style='color: #e53935'>
                HSM encrypted data should be BASE64 encoded </p>
            HostRSAKeyPairID:
              type: string
              description: >-
                RSA key pair ID associated with public key used for HSM
                encryption (required if HSM encrypted data was provided in
                accountNumber).
            currency:
              $ref: '#/components/schemas/Currency'
            posEntryMode:
              type: string
              enum:
                - contactless
                - keyed
                - track
                - emv
                - emv_contactless
                - emv_fallback_keyed
                - emv_fallback_msr
              description: POS Entry Mode.
            pinEntryCapability:
              type: string
              enum:
                - pin_capable
                - pin_incapable
              description: >-
                The electronic/PIN authentication capability <ul>
                <li>pin_capable – PIN entry capability</li> <li>pin_incapable –
                No PIN entry capability</li> </ul>
            descriptor:
              type: string
            expDate:
              type: string
              minLength: 4
              maxLength: 4
              description: Card expiration date (required if card number is provided).
            email:
              type: string
              description: Email.
            emvData:
              type: string
              description: Consists of a list of EMV tags in BER TLV format.
            idempotencyKey:
              type: string
              description: Optional, see section [above](#section/Idempotent-Requests).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
            name:
              type: string
              description: Name.
            phone:
              type: string
              minLength: 10
              maxLength: 10
              description: Phone number.
            txnID:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            pinBlock:
              type: string
              description: Encrypted PIN Block.
            pinKSN:
              type: string
              description: PIN Serial Number.
            signatureImage:
              type: byte
              description: Signature image.
            txnType:
              type: string
              enum:
                - CREDIT_CARD
                - ACH
                - GIFT_CARD
                - PLDEBIT_CARD
                - PINDEBIT_CARD
              description: Transactions type (required if token is not provided).
            txnEnv:
              type: string
              enum:
                - M
                - E
                - X
                - C
                - T
                - U
              description: |
                <ul>
                  <li>M – Telephone or mail</li>
                  <li>E – Ecommerce/internet</li>
                  <li>X – Magstripe doesn't work</li>
                  <li>C – Card on file</li>
                  <li>T – Retail</li>
                  <li>U – Unattended Device</li>
                </ul>
            recurring:
              type: boolean
            terminalModel:
              type: string
              description: Terminal model.
            terminalID:
              type: string
              description: Terminal ID.
          required:
            - txnType
            - posEntryMode
          example:
            amount: '105.00'
            currency: USD
            txnType: CREDIT_CARD
            txnID: TR_01BBEBNMZ7VYYMADN8MJ4RDBBB
            idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
            pinEntryCapability: pin_capable
            posEntryMode: emv_contactless
            emvData: >-
              4F07A0000000031010500B564953412043524544495457134242424242424242D22092010790342500000F5A0842424242424242425F201A546573742F4361726420303120202020202020202020202020205F24032209305F25031809015F300202015F3401009F12104361706974616C4F6E652044656269749F39023035
        - $ref: '#/components/schemas/CustomerRequest'
    Charge:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key (exist in response only for production)
              example: sk_01C043F2241X7WM7MTZKB5822N
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
              example: street match, zip decline
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
              example: SM, ZD
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
              example: M
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            businessCard:
              type: boolean
              example: false
              description: Flag determining credit card class
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            refunds:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Refund'
              description: List of refunds associated with the charge.
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
              example: AUTHORIZED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: approved
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction approved
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Tip amount
            txnDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
    ChargeCreate:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key (exist in response only for production)
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            cardBrand: Visa
            lastFour: '1000'
            statusCode: captured
            status: CAPTURED
            batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            cvvResult: M
            cardType: Credit
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeLv1:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Transaction amount.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
              example: street match, zip decline
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
              example: SM, ZD
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
              example: pass
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '4242'
            method:
              type: string
              enum:
                - charge
              description: Transaction method
              example: charge
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
              example: AUTHORIZED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: approved
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction approved
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: Surcharge fee amount
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: Tip amount
            txnDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
        - $ref: '#/components/schemas/TokenCustomer'
    ChargeLv1Create:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeLv1PartialApproval:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Partial amount approved
            cardBrand: Visa
            lastFour: '1000'
            statusCode: approved_partial_amount
            status: AUTHORIZED
            cvvResult: pass
            cardType: Credit
            emvData: >-
              8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutSession:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Checkout Session ID.
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            checkoutId:
              type: string
              description: Checkout Form ID.
            meta:
              type: object
              description: Optional.
            createdAt:
              type: string
              description: Date.
          example:
            id: CHS_01DJNFZAA730Z5RM3YSKM2908V
            merchantId: '3544325243543232'
            checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
            amount: '105.00'
            meta:
              customField: customValue
            createdAt: '2017-12-15T19:08:18.262Z'
    CheckoutCharge:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            method: charge
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Transaction capture success
            cardBrand: Visa
            lastFour: '1000'
            statusCode: captured
            status: CAPTURED
            batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            cvvResult: M
            cardType: Credit
            emvData: >-
              8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreate:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    RefundLv1:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - refund
              description: Transaction method
              example: refund
            status:
              type: string
              enum:
                - REFUNDED
                - RETURNED
                - DECLINED
                - ERROR
              description: Transaction status
              example: REFUNDED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: refunded
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction refund success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
    RefundLv1Create:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
              example: Visa
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
              example:
                emvData: >-
                  8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
              example: '1000'
            method:
              type: string
              enum:
                - refund
              description: Transaction method
              example: refund
            status:
              type: string
              enum:
                - REFUNDED
                - RETURNED
                - DECLINED
                - ERROR
              description: Transaction status
              example: REFUNDED
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
              example: refunded
            statusDescription:
              type: string
              description: Transaction status description.
              example: Transaction refund success
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
        - $ref: '#/components/schemas/ModelsDate'
        - $ref: '#/components/schemas/TokenCustomer'
    ChargeRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        capture:
          type: boolean
          description: Create a capture transaction.
        currency:
          $ref: '#/components/schemas/Currency'
        cvv:
          type: string
          maxLength: 4
          description: >-
            CVV2, CVC2 and CID are, Visa, MasterCard, MaestroInt, American
            Express and Discover card verification tools designed to reduce
            fraud losses primarily on transactions when the card is not present.
            With the exception of American Express, this is a three character
            value printed on the back of the card in the signature panel, after
            the card number. For American Express, it is a four character value
            printed on the face of the card.
        description:
          type: string
          description: Payment Description.
        descriptor:
          type: string
          description: >-
            This field contains the merchant name/product/service to be used in
            lieu of the DBA name.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        poNumber:
          type: string
        surchargeFeeAmount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: Surcharge fee amount
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
          description: Order.
        orderID:
          type: string
          description: A number assigned to uniquely reference a transaction.
        token:
          allOf:
            - $ref: '#/components/schemas/Token'
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        tip:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        txnEnv:
          type: string
          enum:
            - M
            - E
            - X
            - C
            - T
          description: |
            <ul>
              <li>M – Telephone or mail</li>
              <li>E – Ecommerce/internet</li>
              <li>X – Magstripe doesn't work</li>
              <li>C – Card on file</li>
              <li>T – Retail</li>
            </ul>
        recurring:
          type: boolean
        taxExempt:
          type: boolean
      required:
        - token
      example:
        amount: '105.00'
        capture: false
        order:
          shipToZip: 11111-1111
          shipFromZip: 99999-9999
          items:
            - discountAmount: '20.00'
              unitCost: '10.00'
              unitOfMeasure: CS
              lineNumber: '1'
              description: DESCRIPTION-1
              taxAmount: '5.00'
              quantity: '12'
              upc: UPC-1
              lineTotal: '105.00'
              taxExempt: false
              taxRate: '0.05'
        currency: USD
        token: TKN_01BMFGDTK30EYH9FWTXPYR50
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    CheckoutSessionRequest:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            checkoutId:
              type: string
              description: Checkout Form ID
            checkoutFields:
              type: object
              description: Default Checkout Form values
              properties:
                company:
                  type: string
                  description: Company name.
                billing_name:
                  type: string
                  description: Name.
                billing_state:
                  type: string
                  description: State.
                billing_city:
                  type: string
                  description: City.
                billing_address:
                  type: string
                  description: Address.
                billing_address2:
                  type: string
                  description: Apt/Suite.
                billing_zip:
                  type: string
                  description: Zip.
                phone_number:
                  type: string
                  description: Phone.
                email:
                  type: string
                  description: Email.
                customFields:
                  type: object
                  description: Additional fields.
                  properties:
                    custom_field1:
                      type: string
                      description: Custom Field.
                    custom_field2:
                      type: string
                      description: Custom Field.
            meta:
              type: object
              description: Data pushed with transaction. For reporting purposes only.
          required:
            - amount
            - checkoutId
          example:
            checkoutId: CHF_01CAQDPSAJ8H0BCAXVJFT87TQZ
            amount: '105.00'
            checkoutFields:
              company: Ledner, Toy and Roob
              billing_name: Luella King
              billing_state: California
              billing_city: Sofiabury
              billing_address: 626 Maggie Divide
              billing_address2: Apt. 441
            meta:
              customField: customValue
    CheckoutChargeRequest:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            accountNumber:
              type: string
              description: Account Number
            routingNumber:
              type: string
              description: Routing Number (required if txnType `ACH`)
            billingName:
              type: string
              description: Name.
            billingAddress:
              type: string
              description: Address.
            billingAddress2:
              type: string
              description: Additional address.
            billingCity:
              type: string
              description: City.
            billingCountry:
              type: string
              description: Country.
            billingState:
              type: string
              description: State.
            billingZip:
              type: string
              description: Customer zip.
            capture:
              type: boolean
              description: Create a capture transaction
            cvv:
              type: string
              maxLength: 4
              description: >-
                CVV2, CVC2 and CID are, Visa, MasterCard, MaestroInt, American
                Express and Discover card verification tools designed to reduce
                fraud losses primarily on transactions when the card is not
                present. With the exception of American Express, this is a three
                character value printed on the back of the card in the signature
                panel, after the card number. For American Express, it is a four
                character value printed on the face of the card.
            description:
              type: string
              description: Payment Description.
            descriptor:
              type: string
              description: >-
                This field contains the merchant name/product/service to be used
                in lieu of the DBA name
            expDate:
              type: string
              minLength: 4
              maxLength: 4
              description: Card expiration date (required if card number is provided).
            email:
              type: string
              description: Email.
            idempotencyKey:
              type: string
              description: Optional, see section [above](#section/Idempotent-Requests).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
            name:
              type: string
              description: Name.
            phone:
              type: string
              minLength: 10
              maxLength: 10
              description: Phone number.
            poNumber:
              type: string
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            orderID:
              type: string
              description: A number assigned to uniquely reference a transaction.
            txnType:
              type: string
              enum:
                - CREDIT_CARD
                - ACH
            txnEnv:
              type: string
              enum:
                - M
                - E
                - X
                - C
                - T
              description: |
                <ul>
                  <li>M – Telephone or mail</li>
                  <li>E – Ecommerce/internet</li>
                  <li>X – Magstripe doesn't work</li>
                  <li>C – Card on file</li>
                  <li>T – Retail</li>
                </ul>
            recurring:
              type: boolean
            taxExempt:
              type: boolean
          required:
            - accountNumber
            - routingNumber
            - amount
            - txnType
          example:
            amount: '105.00'
            accountNumber: '4242424242424242'
            capture: true
            currency: USD
            expDate: '0125'
            txnType: CREDIT_CARD
            idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
            order:
              shipToZip: 11111-1111
              shipFromZip: 99999-9999
              items:
                - discountAmount: '20.00'
                  unitCost: '10.00'
                  unitOfMeasure: CS
                  lineNumber: '1'
                  description: DESCRIPTION-1
                  taxAmount: '5.00'
                  quantity: '12'
                  upc: UPC-1
                  lineTotal: '105.00'
                  taxExempt: false
                  taxRate: '0.05'
    ChargeLv1Request:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            accountNumber:
              type: string
              description: >-
                Account Number, Track Data, Token or HSM encrypted data. It
                isn't required if EMV data exists. <p style='color: #e53935'>
                HSM encrypted data should be BASE64 encoded </p>
            HostRSAKeyPairID:
              type: string
              description: >-
                RSA key pair ID associated with public key used for HSM
                encryption (required if HSM encrypted data was provided in
                accountNumber).
            billingAddress:
              type: string
              description: Address.
            billingAddress2:
              type: string
              description: Additional address.
            billingCity:
              type: string
              description: City.
            billingCountry:
              type: string
              description: Country.
            billingState:
              type: string
              description: State.
            billingZip:
              type: string
              description: Customer zip.
            capture:
              type: boolean
              description: Create a capture transaction
            currency:
              $ref: '#/components/schemas/Currency'
            posEntryMode:
              type: string
              enum:
                - contactless
                - keyed
                - track
                - emv
                - emv_contactless
                - emv_fallback_keyed
                - emv_fallback_msr
              description: POS Entry Mode.
            pinEntryCapability:
              type: string
              enum:
                - pin_capable
                - pin_incapable
              description: >-
                The electronic/PIN authentication capability <ul>
                <li>pin_capable – PIN entry capability</li> <li>pin_incapable –
                No PIN entry capability</li> </ul>
            cvv:
              type: string
              maxLength: 4
              description: >-
                CVV2, CVC2 and CID are, Visa, MasterCard, MaestroInt, American
                Express and Discover card verification tools designed to reduce
                fraud losses primarily on transactions when the card is not
                present. With the exception of American Express, this is a three
                character value printed on the back of the card in the signature
                panel, after the card number. For American Express, it is a four
                character value printed on the face of the card.
            description:
              type: string
              description: Payment Description.
            descriptor:
              type: string
            expDate:
              type: string
              minLength: 4
              maxLength: 4
              description: Card expiration date (required if card number is provided).
            email:
              type: string
              description: Email.
            emvData:
              type: string
              description: Consists of a list of EMV tags in BER TLV format.
            idempotencyKey:
              type: string
              description: Optional, see section [above](#section/Idempotent-Requests).
            metadata:
              type: string
              description: >-
                Optional, for JSON object with up to 8 fields and 64 chars
                limit.
            name:
              type: string
              description: Name.
            phone:
              type: string
              minLength: 10
              maxLength: 10
              description: Phone number.
            poNumber:
              type: string
            order:
              allOf:
                - $ref: '#/components/schemas/Order'
              description: Order.
            orderID:
              type: string
              description: A number assigned to uniquely reference a transaction.
            pinBlock:
              type: string
              description: Encrypted PIN Block.
            pinKSN:
              type: string
              description: PIN Serial Number.
            signatureImage:
              type: byte
              description: Signature image.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            txnType:
              type: string
              enum:
                - CREDIT_CARD
                - ACH
                - GIFT_CARD
                - PLDEBIT_CARD
                - PINDEBIT_CARD
              description: Transactions type (required if token is not provided).
            taxAmount:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnEnv:
              type: string
              enum:
                - M
                - E
                - X
                - C
                - T
                - U
              description: |
                <ul>
                  <li>M – Telephone or mail</li>
                  <li>E – Ecommerce/internet</li>
                  <li>X – Magstripe doesn't work</li>
                  <li>C – Card on file</li>
                  <li>T – Retail</li>
                  <li>U – Unattended Device</li>
                </ul>
            recurring:
              type: boolean
            taxExempt:
              type: boolean
            terminalModel:
              type: string
              description: Terminal model.
            terminalID:
              type: string
              description: Terminal ID.
          required:
            - accountNumber
            - amount
            - txnType
            - posEntryMode
          example:
            amount: '105.00'
            accountNumber: '4242424242424242'
            capture: false
            currency: USD
            expDate: '0125'
            txnType: CREDIT_CARD
            idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
            pinEntryCapability: pin_incapable
            posEntryMode: emv_contactless
            emvData: >-
              4F07A0000000031010500B564953412043524544495457134242424242424242D22092010790342500000F5A0842424242424242425F201A546573742F4361726420303120202020202020202020202020205F24032209305F25031809015F300202015F3401009F12104361706974616C4F6E652044656269749F39023035
            order:
              shipToZip: 11111-1111
              shipFromZip: 99999-9999
              items:
                - discountAmount: '20.00'
                  unitCost: '10.00'
                  unitOfMeasure: CS
                  lineNumber: '1'
                  description: DESCRIPTION-1
                  taxAmount: '5.00'
                  quantity: '12'
                  upc: UPC-1
                  lineTotal: '105.00'
                  taxExempt: false
                  taxRate: '0.05'
        - $ref: '#/components/schemas/CustomerRequest'
    RefundUpdateRequest:
      type: object
      properties:
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
      required:
        - metadata
      example:
        metadata: '{"customOption":"example"}'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    RefundUpdateLv1Request:
      type: object
      properties:
        metadata:
          type: string
          description: Optional, for JSON object with up to 8 fields and 64 chars limit.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
      required:
        - metadata
      example:
        metadata: '{"customOption":"example"}'
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    ChargeUpdateRequest:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        void:
          type: boolean
          description: Create void transaction
        capture:
          type: boolean
          description: Create capture transaction
      example:
        amount: '105.00'
        void: false
        capture: false
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    ChargeUpdateLv1Request:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Amount'
          description: String with 2 decimal places e.g “25.00”.
        currency:
          $ref: '#/components/schemas/Currency'
        idempotencyKey:
          type: string
          description: Optional, see section [above](#section/Idempotent-Requests).
        taxAmount:
          type: string
          description: String with 2 decimal places e.g “25.00”.
        void:
          type: boolean
          description: Create void transaction
        capture:
          type: boolean
          description: Create capture transaction
      example:
        amount: '105.00'
        currency: USD
        void: false
        capture: false
        idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
    PanVaultRequest:
      allOf:
        - type: object
          discriminator:
            propertyName: txnType
            mapping:
              CREDIT_CARD: '#/components/schemas/PanVaultCREDIT'
              PLDEBIT_CARD: '#/components/schemas/PanVaultPLDEBIT'
              ACH: '#/components/schemas/PanVaultACH'
              GIFT_CARD: '#/components/schemas/PanVaultGIFT'
          properties:
            txnType:
              type: string
              enum:
                - CREDIT_CARD
                - PLDEBIT_CARD
                - ACH
                - GIFT_CARD
              description: >-
                PAN Vault support five types of payments "Credit Card", "PINLess
                Debit Card", "ACH", "Gift Card"
            billingAddress:
              type: string
              description: The billing first address.
            billingAddress2:
              type: string
              description: The billing second address.
            billingCity:
              type: string
              description: The billing city.
            billingCountry:
              type: string
              description: The billing country.
            billingState:
              type: string
              maxLength: 2
              minLength: 2
              description: The billing state.
            billingZip:
              type: string
              maxLength: 5
              minLength: 5
              description: The billing zip.
            company:
              type: string
              description: The billing company name.
            email:
              type: string
              description: Account email.
            name:
              type: string
              description: Name as it appears on card.
            phoneNumber:
              type: string
              maxLength: 10
              minLength: 10
              description: Phone number.
            customer:
              type: object
              description: The payment method customer.
              properties:
                address:
                  type: string
                  description: The customer's first address.
                address2:
                  type: string
                  description: The customer's second address.
                city:
                  type: string
                  description: The customer's city.
                companyName:
                  type: string
                  description: The customer's company name.
                country:
                  type: string
                  description: The customer's country.
                email:
                  type: string
                  description: The customer's email.
                metadata:
                  type: string
                  description: Custom JSON.
                name:
                  type: string
                  description: The customer's name.
                phone:
                  type: string
                  maxLength: 10
                  minLength: 10
                  description: The customer's phone number.
                state:
                  type: string
                  maxLength: 2
                  minLength: 2
                  description: The customer's state.
                zip:
                  type: string
                  maxLength: 5
                  minLength: 5
                  description: The customer's zip code.
                website:
                  type: string
                  description: The customer's website.
              required:
                - name
          example:
            billingAddress: 400 Madison Ave
            billingAddress2: 10th Fl
            billingCity: New York
            billingCountry: USA
            billingState: NY
            billingZip: '10010'
            company: ABC Business
            email: hello@seamlesspay.com
            name: Michael Smith
            phoneNumber: '2125555000'
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
          required:
            - txnType
    OpenBatches:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Batch ID.
            autoBatchTime:
              type: string
              description: Batch closing time.
            batchNumber:
              type: string
              description: Batch number.
            batchStatus:
              type: string
              enum:
                - BATCH_OPEN
                - BATCH_CLOSED
                - BATCH_CLOSED_AUTO
                - BATCH_CLOSED_ERROR
              description: Batch status.
            merchantId:
              type: string
              description: Merchant ID.
          example:
            id: BCH_01BPH7PHBE8EHYAJRGGMN94DD5
            autoBatchTime: '10:00'
            batchNumber: '70195401736'
            batchStatus: BATCH_OPEN
            merchantId: '11111111'
        - $ref: '#/components/schemas/ModelsDate'
    PanVaultCREDIT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account Number.
            expDate:
              type: string
              description: Expiration Date.
            cvv:
              type: string
              description: cvv data to verify (not storing)
            verification:
              type: boolean
              description: if true billingAddress, billingZip and cvv will be verified.
          required:
            - accountNumber
            - expDate
          example:
            txnType: CREDIT_CARD
            accountNumber: '4242424242424242'
            expDate: 01/25
            verification: true
    PanVaultPLDEBIT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account Number.
            expDate:
              type: string
              description: Expiration Date.
          required:
            - accountNumber
            - expDate
          example:
            txnType: PLDEBIT_CARD
            accountNumber: '4242424242424242'
            expDate: 01/25
    PanVaultACH:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              description: Account number.
            bankAccountType:
              type: string
              enum:
                - Checking
                - Savings
              description: Bank account type.
            routingNumber:
              type: string
              minLength: 9
              maxLength: 9
              description: Bank routing number.
          required:
            - accountNumber
            - bankAccountType
            - routingNumber
          example:
            txnType: ACH
            accountNumber: '99211226789'
            bankAccountType: Savings
            routingNumber: '999999992'
    PanVaultGIFT:
      allOf:
        - $ref: '#/components/schemas/PanVaultRequest'
        - type: object
          properties:
            accountNumber:
              type: string
              pattern: ^[0-9]{1,23}$
              description: Account Number.
            pinNumber:
              type: string
              maxLength: 6
              description: Gift card PIN.
          required:
            - accountNumber
          example:
            txnType: GIFT_CARD
            accountNumber: '1238990000000018'
            pinNumber: '000000'
    Data:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'
        total:
          type: number
    Pagination:
      type: object
      properties:
        count:
          type: integer
          description: Results returned per page
        page:
          type: integer
          description: Page number
        pages:
          type: integer
          description: Total number of pages
        size:
          type: integer
          description: Total results from query
      example:
        count: 10
        page: 1
        pages: 2
        size: 19
    Currency:
      type: string
      enum:
        - USD
        - CAD
      description: |
        Currency:
         - `USD` - United States dollar.
         - `CAD` - Canadian dollar.
    Amount:
      type: string
      maxLength: 12
      description: String with 2 decimal places e.g “25.00”.
      example: '1.00'
    Method:
      type: string
      enum:
        - AUTH
        - CAPTURE
        - SALE
        - VOID
        - REFUND
    MethodCapture:
      type: string
      enum:
        - CAPTURE
        - SALE
    MethodVoid:
      type: string
      enum:
        - VOID
    Token:
      type: string
      maxLength: 31
      description: The payment method (token) from pan-vault
      example: TKN_01BMFGDTK30EYH9FWTXPYR50
    TransactionID:
      type: string
      maxLength: 31
      description: The ID of base transaction
      example: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
    BatchID:
      type: string
      maxLength: 31
      description: The ID of batch
      example: BCH_01BJE0H947B53D3JRRSJ4W6R9T
    AdjustmentID:
      type: string
      maxLength: 31
      description: The ID of adjustment
      example: ADJ_01BBEBNMZ7VYYMADN9MJ3RDAJM
    Card:
      type: string
      maxLength: 16
      minLength: 16
      description: The card
      example: 411111******1111
    EmvData:
      type: string
      description: EMV Data for EMV transactions.
      example: >-
        8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
    ModelsDate:
      type: object
      properties:
        updatedAt:
          type: string
          format: date-time
          description: Date of update data
        createdAt:
          type: string
          format: date-time
          description: Date of create data
      example:
        updatedAt: '2017-12-15T19:08:18.262Z'
        createdAt: '2017-12-15T19:08:18.262Z'
    PanVaultCreditResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            txnType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
            expDate:
              type: string
              description: Expiration Date.
            cardBrand:
              type: string
              description: Card Brand.
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            verificationResult:
              type: string
              enum:
                - verification_successful
                - verification_failed
          example:
            txnType: CREDIT_CARD
            lastfour: '4242'
            expDate: '0125'
            avsResult: SM,ZM
            cardBrand: Visa
            cvvResult: M
            verificationResult: verification_successful
    PanVaultPlDebitResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            txnType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
            expDate:
              type: string
              description: Expiration Date.
            cardBrand:
              type: string
              description: Card Brand.
          example:
            txnType: PLDEBIT_CARD
            lastfour: '4242'
            expDate: '0125'
            cardBrand: Visa
    PanVaultAchRespon:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            txnType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
          example:
            txnType: ACH
            lastfour: '6789'
    PanVaultGiftResponse:
      allOf:
        - $ref: '#/components/schemas/PanVault'
        - type: object
          properties:
            txnType:
              type: string
              description: Payment type.
            lastfour:
              type: string
              description: Last four of account number.
          example:
            txnType: GIFT_CARD
            lastfour: '0018'
    Auth:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key (exist in response only for production)
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            businessCard:
              type: boolean
              description: Flag determining credit card class
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            businessCard: false
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction approved
            cardBrand: Visa
            lastFour: '1000'
            statusCode: approved
            status: AUTHORIZED
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            cvvResult: M
            cardType: Credit
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Captured:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key (exist in response only for production)
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            businessCard:
              type: boolean
              description: Flag determining credit card class
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            businessCard: false
            expDate: '0125'
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            cardBrand: Visa
            lastFour: '1000'
            statusCode: captured
            status: CAPTURED
            batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            tip: '1.00'
            cvvResult: M
            cardType: Credit
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Gift:
      allOf:
        - type: object
          description: Example of a successful response22
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            apiKey:
              type: string
              description: API Key (exist in response only for production)
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            apiKey: sk_01C043F2241X7WM7MTZKB5822N1
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction settled
            statusCode: settled
            status: SETTLED
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreateAuth:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction approved
            cardBrand: Visa
            lastFour: '1000'
            statusCode: approved
            status: AUTHORIZED
            surchargeFeeAmount: '1.00'
            cvvResult: M
            cardType: Credit
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    CheckoutChargeCreateCaptured:
      allOf:
        - type: object
          properties:
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - M
                - 'N'
                - P
                - S
                - U
                - X
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            method: charge
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            statusDescription: Transaction capture success
            cardBrand: Visa
            lastFour: '1000'
            statusCode: captured
            status: CAPTURED
            batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            cvvResult: M
            cardType: Credit
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeLv1CreateAuth:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Transaction approved
            cardBrand: Visa
            lastFour: '1000'
            statusCode: approved
            status: AUTHORIZED
            cvvResult: pass
            cardType: Credit
            emvData: >-
              8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeLv1CreateCaptured:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            expDate:
              type: string
              description: Expiration Date.
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            expDate: '0125'
            ipAddress: 192.168.0.1
            method: charge
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Transaction capture success
            cardBrand: Visa
            lastFour: '1000'
            statusCode: captured
            status: CAPTURED
            batch: BCH_01D8JSWWW3YQ1N8FCSKZ6Z8GDR
            surchargeFeeAmount: '1.00'
            cvvResult: pass
            cardType: Credit
            emvData: >-
              8A023030910A7344A67B24F6578F30309F6E04000000019F7C20DEADBEEFDEADBEEF010203040506070809101112131415161718192021222324
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    ChargeLv1CreateGift:
      allOf:
        - type: object
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/TransactionID'
            amount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            authCode:
              type: string
              description: Auth Code
              example: A11111
            avsMessage:
              type: string
              description: AVS Message
              enum:
                - street match
                - street decline
                - zip match
                - zip decline
                - AVS not supported
                - system error - retry
                - global non-AVS participant
            avsResult:
              type: string
              description: >-
                AVS Result [(See all AVS verification
                codes)](#tag/AVSVerificationCode)
              enum:
                - SM
                - ZD
                - SD
                - ZM
                - NS
                - SE
                - GN
            cvvResult:
              type: string
              enum:
                - pass
                - fail
                - unavailable
                - unchecked
                - unsupported
              description: >-
                CVV Result [(See all CVV verification
                codes)](#tag/CVVVerificationCode)
            currency:
              $ref: '#/components/schemas/Currency'
            cardBrand:
              type: string
              enum:
                - Visa
                - MasterCard
                - American Express
                - Discover
              description: >-
                Detail Card Product - Visa, MasterCard, American Express,
                Discover.
            cardType:
              type: string
              enum:
                - Credit
                - Debit
                - Prepaid
              description: >-
                Determines the card type (credit, debit, prepaid) and usage
                (pin, signature etc.).
            emvData:
              $ref: '#/components/schemas/EmvData'
            ipAddress:
              type: string
              description: IP Address
              format: ipv4
            lastFour:
              type: string
              description: Last four of account number.
            method:
              type: string
              enum:
                - charge
              description: Transaction method
            status:
              type: string
              enum:
                - AUTHORIZED
                - CAPTURED
                - DECLINED
                - ERROR
              description: Transaction status
            statusCode:
              type: string
              description: >-
                Transaction status code [(See all available transaction status
                codes)](#tag/TransactionStatus).
            statusDescription:
              type: string
              description: Transaction status description.
            surchargeFeeAmount:
              allOf:
                - $ref: '#/components/schemas/Amount'
              description: String with 2 decimal places e.g “25.00”.
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
            tip:
              type: string
              description: String with 2 decimal places e.g “25.00”.
            txnDate:
              type: string
              format: date-time
              description: Transaction date
          example:
            id: TR_01BBEBNMZ7VYYMADN8MJ4RDBJX
            amount: '105.00'
            authCode: A11111
            avsMessage: street match, zip decline
            avsResult: SM, ZD
            currency: USD
            ipAddress: 192.168.0.1
            method: charge
            surchargeFeeAmount: '1.00'
            token: TKN_01BMFGDTK30EYH9FWTXPYR50
            tip: '1.00'
            statusDescription: Transaction settled
            statusCode: settled
            status: SETTLED
            customer:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              state: NY
              zip: '10010'
              website: https://example.com
            txnDate: '2020-02-24T19:43:12.730Z'
            updatedAt: '2020-02-24T19:43:12.730Z'
            createdAt: '2020-02-24T19:43:12.730Z'
    Order:
      type: object
      properties:
        shipToZip:
          type: string
          description: Ship To zip code.
          example: 11111-1111
        shipFromZip:
          type: string
          description: Ship From zip code.
          example: 99999-9999
        items:
          type: array
          items:
            type: object
            properties:
              discountAmount:
                type: string
                description: String with 2 decimal places e.g “25.00”.
                example: '9.00'
              unitCost:
                type: string
                description: String with 2 decimal places e.g “25.00”.
                example: '2.00'
              unitOfMeasure:
                type: string
                description: >-
                  Please be sure to provide a <a href="/unitMeasureCodes.pdf"
                  target="_blank">Standard Unit of Measure</a> in order to
                  qualify for Level 3 Interchange pricing.
                example: CS
              lineNumber:
                type: string
                description: Line number.
                example: '1'
              description:
                type: string
                description: Description.
                example: DESCRIPTION-1
              taxAmount:
                type: string
                description: String with 2 decimal places e.g “25.00”.
                example: '109.00'
              quantity:
                type: string
                description: Quantity.
                example: '1000'
              upc:
                type: string
                description: Universal product code.
                example: UPC-1
              lineTotal:
                type: string
                description: String with 2 decimal places e.g “25.00”.
                example: '2000.00'
              taxExempt:
                type: boolean
                example: true
              taxRate:
                type: string
                description: >-
                  Tax rate expressed as a string with decimal value e.g. for
                  2.5%, taxRate should be "0.025".
                example: '0.025'
          description: Items.
  parameters:
    authorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: '``Bearer {SECRET_API_KEY}``'
      required: true
    panVaultAuthorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: '``Bearer {PUBLISHABLE_API_KEY}``'
      required: true
    sessionAuthorization:
      name: Authorization
      in: header
      schema:
        type: string
      description: >-
        Authorization header containing your base_64 encoded [Session
        ID](/#operation/createCheckoutSession).
      required: true
    apiVersion:
      name: API-Version
      in: header
      schema:
        type: string
      description: >-
        API-Version parameter switches the version used by API calls. Calls with
        no API-Version parameter use the latest version of the API by default.
      required: false
    platformVersion:
      name: SeamlessPay-Account
      in: header
      schema:
        type: string
      description: >-
        The SeamlessPay-Account parameter contains the Sub Merchant Account ID.
        This allows you to call the API with the master merchant API key.
      required: false
    client:
      name: client
      in: query
      schema:
        type: string
      description: Client ID - issued when you created your app.
      required: true
    merchant:
      name: merchant
      in: query
      schema:
        type: string
      description: The merchant's identifier.
      required: true
    groupBy:
      name: groupBy
      in: query
      schema:
        type: string
      description: Group data by field
    accountNumber:
      name: accountNumber
      in: query
      schema:
        type: string
      required: true
      description: Account Number
    limit:
      name: $limit
      in: query
      schema:
        type: integer
      example: 2
      description: >-
        $limit will return only the number of results you specify.
        <br><br>`?$limit=2`
    skip:
      name: $skip
      in: query
      schema:
        type: integer
      example: 2
      description: $skip will skip the specified number of results. <br><br>`?$skip=2`
    sort:
      name: $sort
      in: query
      schema:
        type: string
      description: >-
        $sort will sort based on the object you provide. It can contain a list
        of properties by which to sort mapped to the order (1 ascending, -1
        descending). <br><br>`?$sort[fieldName]=-1`
    select:
      name: $select
      in: query
      schema:
        type: string
      description: >-
        $select allows to pick which fields to include in the result. This will
        work for any service method. <br><br>`?$select[fieldName]=text`
    in:
      name: $in
      in: query
      schema:
        type: string
      description: >-
        Find all records where the property does ($in) or does not ($nin) match
        any of the given values. <br><br>`?fieldName[$in]=2`
    nin:
      name: $nin
      in: query
      schema:
        type: string
      description: >-
        Find all records where the property does ($in) or does not ($nin) match
        any of the given values. <br><br>`?fieldName[$nin]=2`
    lt:
      name: $lt
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is less ($lt) or less and equal ($lte)
        to a given value. <br><br>`?fieldName[$lt]=1479664146607`
    lte:
      name: $lte
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is less ($lt) or less and equal ($lte)
        to a given value. <br><br>`?fieldName[$lte]=1479664146607`
    gt:
      name: $gt
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is more ($gt) or more and equal ($gte)
        to a given value. <br><br>`?fieldName[$gt]=1479664146607`
    gte:
      name: $gte
      in: query
      schema:
        type: string
      description: >-
        Find all records where the value is more ($gt) or more and equal ($gte)
        to a given value. <br><br>`?fieldName[$gte]=1479664146607`
    ne:
      name: $ne
      in: query
      schema:
        type: string
      description: >-
        Find all records that do not equal the given property value.
        <br><br>`?fieldName[$ne]=false`
    or:
      name: $or
      in: query
      schema:
        type: string
      description: >-
        Find all records that match any of the given criteria.
        <br><br>`?$or[0][fieldName][$ne]=false&$or[1][fieldName][$gte]=0`
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Authorization
    Session:
      type: session
      in: header
      name: Authorization
  requestBodies:
    Charge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeRequest'
      required: true
    CheckoutSession:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutSessionRequest'
      required: true
    CheckoutCharge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutChargeRequest'
      required: true
    Adjustment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdjustmentRequest'
      required: true
    Refund:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundRequest'
      required: true
    Capture:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CaptureRequest'
      required: true
    Void:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoidRequest'
      required: true
    ChargeLv1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeLv1Request'
      required: true
    RefundLv1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundLv1Request'
      required: true
    CaptureLv1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CaptureLv1Request'
      required: true
    UpdateTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeUpdateRequest'
      required: true
    UpdateRefund:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundUpdateRequest'
      required: true
    UpdateRefundLv1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundUpdateLv1Request'
      required: true
    Customer:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
                description: The customer's first address.
              address2:
                type: string
                description: The customer's second address.
              companyName:
                type: string
                description: The customer's company name.
              city:
                type: string
                description: The customer's city.
              country:
                type: string
                description: The customer's country.
              email:
                type: string
                description: The customer's email.
              metadata:
                type: string
                description: >-
                  Optional, for JSON object with up to 8 fields and 64 chars
                  limit.
              name:
                type: string
                description: The customer's name.
              phone:
                type: string
                minLength: 10
                maxLength: 10
                description: The customer's phone number.
              paymentMethods:
                type: array
                xml:
                  name: paymentMethod
                  wrapped: true
                items:
                  type: object
                  xml:
                    name: paymentMethod
                  properties:
                    nickname:
                      type: string
                      description: The payment method's name.
                    token:
                      type: string
                      description: The token.
                  required:
                    - token
                description: The customer's payment methods.
              state:
                type: string
                minLength: 2
                maxLength: 2
                description: The customer's state.
              zip:
                type: string
                minLength: 5
                maxLength: 5
                description: The customer's zip code.
              website:
                type: string
                description: The customer's website.
            required:
              - name
            example:
              address: 400 Madison Ave
              address2: 10th Fl
              companyName: ABC Business
              city: New York
              country: USA
              email: hello@seamlesspay.com
              metadata: '{"customOption":"example"}'
              name: Michael Smith
              phone: '2125555000'
              paymentMethods:
                - nickname: Visa card
                  token: TKN_01CBH0CKW6571SC337SWKSDCAE
              state: NY
              zip: '10010'
              website: https://example.com
    SubMerchant:
      content:
        application/json:
          schema:
            type: object
            properties:
              address1:
                type: string
                description: The primary address.
              address2:
                type: string
                description: The second address.
              businessName:
                type: string
                description: DBA.
              city:
                type: string
                description: City.
              country:
                type: string
                description: The customer's country.
              DDAnumber:
                type: string
                description: Bank account.
              dateOfBirth:
                type: string
                description: Date of birth.
              email:
                type: string
                description: Email.
              firstName:
                type: string
                description: The customer's name.
              lastName:
                type: string
                description: The customer's last name.
              phone:
                type: string
                maxLength: 10
                minLength: 10
                description: Phone.
              routingNumber:
                type: string
                maxLength: 9
                minLength: 9
                description: Routing number.
              subMerchantEntityName:
                type: string
                description: Business name.
              state:
                type: string
                maxLength: 2
                minLength: 2
                description: The merchant's state.
              ssn:
                type: string
                description: SSN.
              splitProgram:
                type: string
                description: >-
                  ID of split program. Default value is a merchant's default
                  split program.
              taxID:
                type: string
                description: The merchant's tax.
              zip:
                type: string
                maxLength: 5
                minLength: 5
                description: The merchant's zip.
            required:
              - DDAnumber
              - businessName
              - dateOfBirth
              - firstName
              - lastName
              - email
              - routingNumber
              - state
              - city
              - taxID
              - zip
            example:
              address1: 400 Madison Ave
              address2: 10th Fl
              businessName: '123'
              city: New York
              dateOfBirth: '1960-01-02'
              DDAnumber: '0000000000'
              email: xyz@business.com
              firstName: Michael
              lastName: Smith
              phone: '2125555000'
              routingNumber: '123456789'
              splitProgram: SP_01BBC61NYHG6AR5T35D5Q1ZBFC
              ssn: '123457890'
              state: NY
              subMerchantEntityName: XYZ Business
              taxID: '271234567'
              zip: '10010'
      required: true
    Webhook:
      content:
        application/json:
          schema:
            type: object
            properties:
              endpointType:
                type: string
                enum:
                  - ACCOUNT
                  - CONNECT
                description: >-
                  The webhook's type (ACCOUNT/CONNECT). When using "CONNECT",
                  you can also receive notifications of events that occur in
                  connected accounts.
              payloadUrl:
                type: string
                pattern: ^(https:\/\/).*
                description: The webhook's url.
              secret:
                type: string
                description: The webhook's header token.
              webhookSubscriptions:
                type: array
                items:
                  type: object
                  properties:
                    event:
                      type: string
                    service:
                      type: string
                description: The webhook's events.
            required:
              - endpointType
              - payloadUrl
              - secret
              - webhookSubscriptions
            example:
              endpointType: ACCOUNT
              payloadUrl: https://www.example.com/webhook
              secret: '50991311'
              webhookSubscriptions:
                - event: created
                  service: customers
      required: true
    CloseBatch:
      content:
        application/json:
          schema:
            type: object
            properties:
              batchID:
                type: string
                description: The batch ID.
            required:
              - batchID
            example:
              batchID: BCH_01C6ZF2MB6K61AYM63AX89NCS5
      required: true
    Batch:
      content:
        application/json:
          schema:
            type: object
            properties:
              batchID:
                type: string
                description: The batch ID.
            required:
              - batchID
            example:
              batchID: BCH_01C6ZF2MB6K61AYM63AX89NCS5
      required: true
    GiftCard:
      content:
        application/json:
          schema:
            properties:
              accountNumber:
                type: string
                description: A gift card account number (if not using token).
              token:
                type: string
                description: An existing token representing the gift card account.
              amount:
                type: string
                maxLength: 12
                description: >-
                  Amount to add to stored value account, as String with 2
                  decimal places e.g “25.00”.
              idempotencyKey:
                type: string
                description: Optional, see section [above](#section/Idempotent-Requests).
            required:
              - amount
              - accountNumber
              - token
            example:
              accountNumber: '1238990000000018'
              token: tok_gift_card
              amount: '105.00'
              idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
      required: true
    GiftCardUpdate:
      content:
        application/json:
          schema:
            properties:
              amount:
                type: string
                maxLength: 12
                description: >-
                  Amount to add to stored value account, as String with 2
                  decimal places e.g “25.00”.
              idempotencyKey:
                type: string
                description: Optional, see section [above](#section/Idempotent-Requests).
            required:
              - amount
            example:
              amount: '105.00'
              idempotencyKey: 7c62e63ab7fb6d10166b70945dc48b52
      required: true
    GiftCardInfo:
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  accountNumber:
                    type: string
            type: object
            properties:
              currency:
                type: string
                description: Card currency.
              pinNumber:
                type: string
                maxLength: 6
                description: ' Optional, value used to restrict access to gift card. A value used to restrict access to gift card. This field is divided into two subfields; the first 4 digits are the secondary security code (SSC) to be used with bar coded accounts. The second subfield is a 4 digit PIN number used for any card not present transaction or when the magnetic strip is not available to add extra security for the card account. Each Sub-field should be right justified left zero filled.'
            required:
              - accountNumber
            example:
              accountNumber: '1238990000000018'
      required: true
    PanVault:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PanVaultRequest'
      required: true
    GiftCardCancel:
      content:
        application/json:
          schema:
            type: object
            properties:
              transactionID:
                type: string
                maxLength: 31
                description: Transaction ID to cancel.
            required:
              - transactionID
            example:
              transactionID: TXN_01ARZ3NDEKTSV4RRFFQ69G5FAV
      required: true
    OAuth:
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              clientID:
                type: string
                description: Client ID - issued when you created your app.
              clientSecret:
                type: string
                description: Client Secret - issued when you created your app.
              code:
                type: string
                description: A temporary authorization code.
              grantType:
                type: string
                description: Access token grant type, use authorization_code.
            required:
              - clientID
              - clientSecret
              - grantType
              - code
            example:
              clientID: OAC_01BPC3F1R3RHYAMTKYF06S9XCQ
              clientSecret: e2cad5a754822712a9cd499b562eb31dbc1574d6
              code: abcdef12345678901234567890
              grantType: authorization_code
      required: true
  responses:
    '401':
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  errors:
                    type: object
          example:
            name: NotAuthenticated
            code: 401
            className: not-authenticated
            data:
              statusCode: 401
              statusDescription: Authentication failed
              errors:
                - null
      description: Not Authenticated
    '404':
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              className:
                type: string
              message:
                type: string
              name:
                type: string
          example:
            name: NotFound
            message: Item not found.
            code: 404
            className: not-found
            errors: null
      description: Item not found
    '422':
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: string
                      statusCode:
                        type: string
                      statusDescription:
                        type: string
          example:
            name: Unprocessable
            message: Validation error
            code: 422
            className: unprocessable
            data:
              statusCode: '110'
              statusDescription: Validation error
              errors:
                - error
      description: Unprocessable
    AllTransactions:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
      description: Success
    AllRefund:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Refund'
      description: Success
    AllCaptures:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Capture'
      description: Success
    AllVoids:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Void'
      description: Success
    AllRefundLv1:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RefundLv1'
      description: Success
    AllCapturesLv1:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaptureLv1'
      description: Success
    CaptureLv1:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CaptureLv1'
    AllChargesLv1:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChargeLv1'
      description: Success
    Transaction:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
    Charge:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Charge'
    ChargeCreate:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeCreate'
    AllCharges:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Charge'
      description: Success
    Adjustment:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Adjustment'
    Refund:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    Capture:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    Void:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Void'
    ChargeLv1:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeLv1'
    ChargeLv1Create:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeLv1Create'
    ChargeLv1PartialApproval:
      description: Partial Approval
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeLv1PartialApproval'
    RefundLv1:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundLv1'
    RefundLv1Create:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundLv1Create'
    AllCustomers:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
      description: Success
    Customer:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    AllSubMerchants:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubMerchant'
      description: Success
    SubMerchant:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubMerchant'
      description: Success
    OpenBatches:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OpenBatches'
      description: Success
    AllWebhooksEvents:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookEvent'
      description: Success
    Webhook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
      description: Success
    WebhookEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
      description: Success
    AllBatches:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OpenBatches'
      description: Success
    CloseBatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloseBatch'
      description: Success
    Batch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBatch'
      description: Success
    AllPayouts:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payout'
      description: Success
    AllStatements:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Statement'
      description: Success
    AllPCI:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PCI'
      description: Success
    AllIRS:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/IRS'
      description: Success
    AllDisputes:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dispute'
      description: Success
    AllRetrievals:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Data'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Retrieval'
      description: Success
    BinLookup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BinLookup'
      description: Success
    GiftCard:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  amount:
                    type: string
                    maxLength: 12
                    description: Amount.
                  lastFour:
                    type: string
                    description: Last four of account number.
                  token:
                    allOf:
                      - $ref: '#/components/schemas/Token'
                example:
                  amount: '105.00'
                  lastFour: '0018'
                  token: TKN_01BMFGDTK30EYH9FWTXPYR50
              - $ref: '#/components/schemas/ModelsDate'
      description: Success
    GiftCardReload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardReload'
      description: Success
    GiftCardRemove:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  lastFour:
                    type: string
                    description: Last four of account number.
                example:
                  lastFour: '0018'
              - $ref: '#/components/schemas/ModelsDate'
      description: Success
    GiftCardInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardInfo'
      description: Success
    PanVault:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PanVault'
      description: Success
    OAuth:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuth'
      description: Success
